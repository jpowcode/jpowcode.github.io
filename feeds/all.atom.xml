<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>jpowcode</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2024-10-29T10:20:00+00:00</updated><entry><title>Poscode Faker</title><link href="/Creting%20valid%20fake%20postcodes.html" rel="alternate"></link><published>2024-10-29T10:20:00+00:00</published><updated>2024-10-29T10:20:00+00:00</updated><author><name>jpowcode</name></author><id>tag:None,2024-10-29:/Creting valid fake postcodes.html</id><summary type="html">&lt;p&gt;A Python function to generate a given number of poscodes in a given region that are valid.&lt;/p&gt;</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;h3&gt;Postcode Faker&lt;/h3&gt;
&lt;p&gt;A recent project I worked on involved plotting the location of home addresses on a map. The location of their home I generated from their postcode using an api provided by the Office for National Statistics. (There will be more details on this in a future post.) When writing this project up I want to show the visualisations I'd generated, but I did not want to display the actual location of the people in the data set as this is obviously not a good idea for privacy reasons. I started looking about for python libabries to generate valid postcodes. Valid, being key here as generating any random string will not necessarily result in a location that actually exists. &lt;/p&gt;
&lt;p&gt;A uk postcode is a combination of either 6 or 7 characters. What I want to be able to do is specify the start of the postcode as a string and generate a given number of random valid postcodes that start with that string. &lt;/p&gt;
&lt;p&gt;The first step was to obtain a list of all valid postcodes in the UK. This came from the &lt;a href="https://geoportal.statistics.gov.uk/datasets/a2f8c9c5778a452bbf640d98c166657c/about"&gt;ONS, Office for National Statistics&lt;/a&gt; in the form of a large spreadsheet. The first column of the spreadsheet contains the postcode. The rest of the columns are not-needed. First I ran the following command using &lt;a href="https://www.cyberciti.biz/faq/bash-scripting-using-awk/"&gt;awk&lt;/a&gt; to strip out the first column and save it as a separate CSV file.  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;awk -F "," '{print $1}' ons_postcode_data.csv &amp;gt; postcodes.csv
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This sets a comma as a separator and prints out the first field. Awk uses 1 as the first field and not zero like python.&lt;/p&gt;
&lt;p&gt;Then I wrote a python function to produce the random postcodes. First import pandas and load csv file into a dataframe.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import pandas as pd
postcodes = pd.read_csv('postcodes.csv')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next create a function that takes as input a dataframe, a partial postcode and a number of random samples required. It compiles a regular expression that starts with the partial postcode searches for all postcodes that contain the string and then selects a random sample from them. Case is ignored. The resulting dataframe is returned from the function.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def pcfake(df, partial_pc, number):
  regex = f'^{partial_pc}'
  return df[df.iloc[:,0].str.contains(regex, case = False)].sample(n=number)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can test this as follows and we should get 10 postcodes that all start with "np"&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pcfake(postcodes, "Np", 10).head(10)
&lt;/code&gt;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;</content><category term="Python"></category><category term="Python"></category></entry><entry><title>Data Science with Pandas, ScikitLearn and Altair 1: Analysis of Pupil Progress</title><link href="/Analysing%20the%20progress%20made%20by%20financially%20deprived%20students.html" rel="alternate"></link><published>2024-08-19T10:20:00+01:00</published><updated>2024-08-19T10:20:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2024-08-19:/Analysing the progress made by financially deprived students.html</id><summary type="html"></summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;In the UK it's often the case that on average pupils from more (financially) deprived backgrounds do not attain as high grades at school as pupils from more (financially) well off backgrounds. (This is obviously a huge generallisation and will not be the case for all pupils in all schools in all subjects.) There are many reasons for this which I don't want to go into here. At my school (and many other UK schools) pupils have historically been put into sets (groups) based on their attainment. This starts when they arrive from primary school (the first 6 years of education) at age 11 and leave after sitting GCSE exams at age 16. When they first arrive at school the exam scores from primary school are used to put them into sets. Then at the end of each year they do an exam and again this determines what set they are placed in the following year (This is a somewhat simplified version of what actually happens. In reality many other factors are taken into account such as how pupils interact with each other and their teacher's professional judgement.) What I would like to do is examine a hypothesis at the school I teach that a contributing factor or these pupils attaining lower tghan their more well off opeers is to do with the sets they are placed in.  The hypothesis is that pupils from more deprived backgrounds have a tendency to "slide down" through the sets over the 5 years they are in school and are more likely to end up underperforming because of this. I will investigate this for a a single year group of pupils that have now left the school. The data set I have contains the set each pupil was in over the 5 years they were in school (Year 7 - Year 11) and also a field called PP. In the UK families that are less well off get labeled &lt;a href="https://www.gov.uk/government/publications/pupil-premium/pupil-premium#:~:text=pupil%20premium%20funding.-,Purpose,service%20pupil%20premium%20(%20SPP%20)."&gt;"Pupil Premium"&lt;/a&gt; and schools get extra funding to support them. I will compare PP students with non-PP students to see if there is any difference.  &lt;/p&gt;
&lt;p&gt;An interactive version of this post can be found and run on Google Drive  &lt;a href="https://drive.google.com/file/d/1q2zG9vryDs7SVfuBSLGRqZBfnz5OR7UV/view?usp=sharing"&gt;here&lt;/a&gt; and the csv file &lt;a href="https://drive.google.com/file/d/1jCrJ73sJ_bx_1e1LRq2y3RwCJaOrOu3l/view?usp=sharing"&gt;here&lt;/a&gt; and also on &lt;a href="https://github.com/jpowcode/data_projects"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Import the required libraries&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;import io
import altair as alt
import pandas as pd
import numpy as np
import random
from google.colab import files
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Upload the csv file with the class data.&lt;/h3&gt;
&lt;p&gt;Names have been taken out of the data set in Excel for privacy and replaced with labels a1, a2 etc. The order of the pupils has also been randomised so it is no longer alphabetical. This was done in Excel before importing.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;uploaded = files.upload()
y11_sets = pd.read_csv(io.BytesIO(uploaded['y11_sets_anon.csv']))
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Check the types of the imported data.&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;y11_sets.dtypes
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Convert data&lt;/h3&gt;
&lt;p&gt;There is one field that is different to the others (for some reason the Excel file had different data types) so we will convert all numeric data to float64 for consistency and check this.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;y11_sets = y11_sets.astype({'Y07_set': 'float64','Y09_set': 'float64','Y08_set': 'float64', 'Y10_set': 'float64', 'Y11_set': 'float64'})
y11_sets.dtypes
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Transform Data&lt;/h3&gt;
&lt;p&gt;Sometimes different year groups will contain a different number of sets. For example, there could be 11 sets in years 7 and 8 and 12 sets in years 9, 10 and 11. So a pupil who moves from set 6 in year 8 to set 7 in year 9 may not actually be changing that much in realtion to their peers. For this reason I am going to &lt;a href="https://en.wikipedia.org/wiki/Normalization_(statistics)"&gt;normalise&lt;/a&gt; the sets and create a new column for each year group. for example Y07_set_n will be the normalised set for year 7. The formula used for this is&lt;/p&gt;
&lt;p&gt;$X_n=\frac{X-\mu}{\sigma}$&lt;/p&gt;
&lt;p&gt;where
$X$ is the unnormalised data,
$\mu$ is the mean of the data,
$\sigma$ is the sdandard deviation of the data and
$X_n$ is the normalised data&lt;/p&gt;
&lt;p&gt;Notice that there are some empty values which represent pupils who have joined or left the school at some point during 5 years. I will leave these values in.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;y11_sets['Y07_set_n'] = (y11_sets['Y07_set'] -y11_sets['Y07_set'].mean())/y11_sets['Y07_set'].std()
y11_sets['Y08_set_n'] = (y11_sets['Y08_set'] -y11_sets['Y08_set'].mean())/y11_sets['Y08_set'].std()
y11_sets['Y09_set_n'] = (y11_sets['Y09_set'] -y11_sets['Y09_set'].mean())/y11_sets['Y09_set'].std()
y11_sets['Y10_set_n'] = (y11_sets['Y10_set'] -y11_sets['Y10_set'].mean())/y11_sets['Y10_set'].std()
y11_sets['Y11_set_n'] = (y11_sets['Y11_set'] -y11_sets['Y11_set'].mean())/y11_sets['Y11_set'].std()
y11_sets.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To assit in some visuals later I am going to add extra random fluctuation to the whole number that represents the set. This will be explained in more detail below. To do this I will create an array of random numbers in it's own data frame called rand and check this looks ok.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rand = pd.DataFrame()
variation = 0.2
rand['RAND1'] = np.random.random(size=len(y11_sets))*variation
rand['RAND2'] = np.random.random(size=len(y11_sets))*variation
rand['RAND3'] = np.random.random(size=len(y11_sets))*variation
rand['RAND4'] = np.random.random(size=len(y11_sets))*variation
rand['RAND5'] = np.random.random(size=len(y11_sets))*variation
rand.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now I will create a new column for each year group with the random number added on. For example Y07_set_r will be the set number for year 7 with a random fluctuation added.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;y11_sets['Y07_set_r'] = y11_sets['Y07_set'] + rand['RAND1']
y11_sets['Y08_set_r'] = y11_sets['Y08_set'] + rand['RAND2']
y11_sets['Y09_set_r'] = y11_sets['Y09_set'] + rand['RAND3']
y11_sets['Y10_set_r'] = y11_sets['Y10_set'] + rand['RAND4']
y11_sets['Y11_set_r'] = y11_sets['Y11_set'] + rand['RAND5']
y11_sets.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Calculate the means&lt;/h2&gt;
&lt;p&gt;I am going to calculate the mean value of the set for each year group for the PP students and the non-PP students. For each set and group by whether they are a PP student or not. We round off all the data to two decimal places. We also add a row that contains the difference between the values for the PP and non-PP students.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mean_by_year_grouped = y11_sets.groupby('PP')[['Y07_set_n', 'Y08_set_n', 'Y09_set_n', 'Y10_set_n', 'Y11_set_n']].mean()
mean_by_year = y11_sets[['Y07_set_n', 'Y08_set_n', 'Y09_set_n', 'Y10_set_n', 'Y11_set_n']].mean()
mean_by_year_grouped.loc['A'] = [mean_by_year['Y07_set_n'],mean_by_year['Y08_set_n'],mean_by_year['Y09_set_n'], mean_by_year['Y10_set_n'], mean_by_year['Y11_set_n']]
summary_data = mean_by_year_grouped.round(2)
summary_data.loc['D'] = summary_data.diff().loc['Y']
summary_data.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img alt="Summary Data" src="./images/small-means.png"/&gt;&lt;/p&gt;
&lt;p&gt;Here N is the mean values for the non PP students, Y the mean values for the PP students, A is the mean values for all the students (Note that due to the values being normailsed a mean value of zero is correct) and D the difference in the mean values between the PP and non PP students.&lt;/p&gt;
&lt;h3&gt;Analysis&lt;/h3&gt;
&lt;p&gt;We need to bare in mind that the sets have been normalised to values between -1 and 1. So a value close to -1 represents a high attaining set and a value close to 1 represents a low attaining set. If there were 10 sets in a year group then a normalised value of 0.2 would represent about a set dfifference. When pupils enter the school in year 7 the difference between the PP and non-PP is 0.15, slightly less than a set difference. This increases slightly in year 8 to 0.22, about a set difference. The increase to year 9 however represents to biggest change to 0.41 and then continues to increase to year 10 and year 11. So it would appear from this analysis that the PP students do indeed appear to "slide down" through the sets in their time at school.&lt;/p&gt;
&lt;h3&gt;Visualisation&lt;/h3&gt;
&lt;p&gt;I'm going to create a parallel coordenates plot to track the movement for all pupils as they change sets throughout the years. To emphasize the numbers of pupils moving I have added a small random value to each set number. Without this most of the lines lie on top of each other and it is difficult to see any variation. The amount of variation can be experimented with by changing the variable "variation" above and rerunning that cell and the one below it.&lt;/p&gt;
&lt;p&gt;PP and non-PP students have been given different colours.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;alt.Chart(y11_sets, width=700, height=700).transform_window(
    index='count()'
    ).transform_fold(
    ['Y07_set_r', 'Y08_set_r','Y09_set_r', 'Y10_set_r', 'Y11_set_r']
).mark_line().encode(
    x='key:N',
    y='value:Q',
    detail='index:N',
    color='PP:N'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img alt="Parallel Coordinates Plot" src="./images/small-pp_graph.png"/&gt;&lt;/p&gt;
&lt;h3&gt;Observations&lt;/h3&gt;
&lt;p&gt;Not many PP pupils seem to make it into the highest set in year 7. Those that do seem to have been moved down in year 8. Checking the actual numbers below we can see that only 8 PP pupils out of 60 remain in the highest set in year 8.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;y11_sets[y11_sets['Y07_set']==1.0].groupby('PP')[['Y07_set']].count()
y11_sets[y11_sets['Y08_set']==1.0].groupby('PP')[['Y08_set']].count()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img alt="Year 7 counts" src="./images/small-y7_set.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Year 8 Counts" src="./images/small-y8_set.png"/&gt;&lt;/p&gt;
&lt;p&gt;In years 7 and 8 pupils are split into two equal half year groups so there are two groups for set 1, two for set 2 etc. In years 9-11 pupils are put together into a single year group so there is now only 1 group for set 1 and one group for set 2 etc. The PP pupils definately seem to loose out during this change. There seem to be a higher proportion of PP pupils "slipping down" than non-PP and I would suggest that more attention needs to focused on this transition to ensure the PP pupils are not hard done by.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><category term="Data Science"></category><category term="Data Science"></category><category term="Python"></category></entry><entry><title>Data Science with Pandas, ScikitLearn and Altair 0: Introduction</title><link href="/Using%20Python%20for%20data%20science%20experiments.html" rel="alternate"></link><published>2024-08-19T10:20:00+01:00</published><updated>2024-08-19T10:20:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2024-08-19:/Using Python for data science experiments.html</id><summary type="html">&lt;p&gt;An introduction to the series and tools&lt;/p&gt;</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;
In each of this series of posts I will tackle some problem that involves data processing and analysis. I'm going to ivestigate the data, visualise it and possibly perform some predictive analysis with machine learning. The aim is to demonstrate the skills and tools involved at the same time as doing something useful or interesting. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Tools&lt;/strong&gt;
I'll be using Google Colab as my IDE and running python3 as my programming language and making use of the following libraries&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://numpy.org/"&gt;numpy&lt;/a&gt; for dealing with vectors and arrays.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pandas.pydata.org/"&gt;pandas&lt;/a&gt; for manimulating data.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://altair-viz.github.io/"&gt;altair&lt;/a&gt; for visualisation.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scikit-learn.org/stable/"&gt;scikit&lt;/a&gt; learn for training machine learning models.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scipy.org/"&gt;scipy&lt;/a&gt; to provide numerical analysis algorithms&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most notebooks will start with the following code to import the tools. The last line allows Google colab to open files from the local envirnment.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import io, math
import numpy as np
import altair as alt
import pandas as pd
import sklearn as skl
import scipy as scp
from google.colab import files
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first few posts will focus on problems with an educational theme as that is my background.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><category term="Data Science"></category><category term="Data Science"></category><category term="Python"></category></entry><entry><title>Computing in School: Data Structures with Python Classes</title><link href="/Data%20Structures%20in%20Python.html" rel="alternate"></link><published>2024-07-14T10:20:00+01:00</published><updated>2024-07-14T10:20:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2024-07-14:/Data Structures in Python.html</id><summary type="html">&lt;p&gt;Creating data structures with classes in python&lt;/p&gt;</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;A big part of the A-level Computing syllabus has content on different data types. Arrays, stacks, queues, linked lists, graphs and trees to name a few. Another aspect of the syllabus is &lt;a href="https://www.educative.io/blog/object-oriented-programming"&gt;object orientated programming&lt;/a&gt;. In this post I aim to use an object orientated approach to build some of these data structures from scratch. I will be using Python as a programming language. All data structures will be built up from the basic data structures that python contains, i.e., lists, strings and integers. I will also be adding in a few software engineeing practices such as &lt;a href="https://realpython.com/python-testing/"&gt;unit testing&lt;/a&gt;, &lt;a href="https://sourcelevel.io/blog/what-is-a-linter-and-why-your-team-should-use-it"&gt;linting&lt;/a&gt;, using &lt;a href="https://realpython.com/python-testing/"&gt;test runners&lt;/a&gt;,  and task runners. This post is not inteded to be a tutorial on Object Orientated Programming (OOP) or data structures. It is more an illustration of how OOP principles can be applied using structures that should be famiuliar to an A-level computing student. I have written a &lt;a href="http://localhost:8002/Basic%20Classes%20in%20Python.html"&gt;priliminary activity&lt;/a&gt; to this one using shapes as a concept.&lt;/p&gt;
&lt;p&gt;This is a summary of all that will be covered&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creating data structures for an Array, Stack and Queue&lt;/li&gt;
&lt;li&gt;Using Classes&lt;/li&gt;
&lt;li&gt;Inheritance&lt;/li&gt;
&lt;li&gt;Encapsulation &lt;/li&gt;
&lt;li&gt;Magic methods &lt;/li&gt;
&lt;li&gt;Writing tests using Unittest library&lt;/li&gt;
&lt;li&gt;Using a test runner&lt;/li&gt;
&lt;li&gt;Using a task runner&lt;/li&gt;
&lt;li&gt;The concept of &lt;a href="https://www.techtarget.com/searchapparchitecture/definition/refactoring"&gt;refactoring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Linting&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All resources will be hosted on my &lt;a href="https://github.com/jpowcode/python_classes"&gt;Github&lt;/a&gt; page. There is a table at the bottom of this post detailing which files are needed for each section of the tutorial.&lt;/p&gt;
&lt;h3&gt;0. Setting up our environment&lt;/h3&gt;
&lt;p&gt;I will be using a Linux based envirnment for much of this task. In school I would use &lt;a href="https://www.pythonanywhere.com/"&gt;pythonanywhere&lt;/a&gt; which gives us an IDE for editing python code and a bash shell for running the code and any tests etc. This is by far the easiest option and has the advantage of working wherever you have access to a web browser. If you are on windows you might consider using the windows subsystem for linux. &lt;/p&gt;
&lt;h3&gt;1. Creating the basic array class&lt;/h3&gt;
&lt;p&gt;We create the MyArray class with a constructor method (in python this is &lt;code&gt;__init__()&lt;/code&gt;).  The constructor takes as input a number &lt;code&gt;given_i&lt;/code&gt; (at the moment this is a one dimensional array) for the size of the array and a string &lt;code&gt;given_array_type&lt;/code&gt; that specifies the type as either an 8 bit integer or a character. The constructor method sets the attributes 'i'and 'array_type' and also creates an empty list &lt;code&gt;array&lt;/code&gt; to hold the array elements. The array is then populated with &lt;code&gt;None&lt;/code&gt; values. We then run some tests by creating instances of the &lt;code&gt;MyArray&lt;/code&gt; class to make sure there are no errors.  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class MyArray:
    def __init__(self, given_i, given_array_type):
        """Allowed types
            - int8: 8 bit unsigned integer 0 - 2^8 -1
            - char: a single character
        """
        self.i = given_size
        self.array_type = given_array_type
        self.array = []

        for _ in range(self.size):
            self.array.append(None)


print("""
Conduct Tests
________________________________________________________________________
""")
print("Check we can create a class, there should be no errors")
array_1 = MyArray(1,'int8')
array_2 = MyArray(5,'char')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the bash console run the command &lt;code&gt;python3 my_array_1.py&lt;/code&gt; to test the code.&lt;/p&gt;
&lt;p&gt;In part 4 of this post the tests will be moved into a separate file and run separately.&lt;/p&gt;
&lt;p&gt;Note that I am going to use a naming convention whereby all variable names passed into a function will be prefixed with the word "given". For example &lt;code&gt;given_i&lt;/code&gt; is passed to the constructor so it can create the attribute &lt;code&gt;i&lt;/code&gt;. In practice I would probably just use the same name for both, but the exam mark schemes seem to prefer different names.&lt;/p&gt;
&lt;h3&gt;2. Add a method to check the type of the array&lt;/h3&gt;
&lt;p&gt;We add a helper method called check_type. The method takes as input a value and then checks if this value is the same type as the array otherwise it returns &lt;code&gt;False&lt;/code&gt;. The &lt;code&gt;isinstance()&lt;/code&gt; function returns &lt;code&gt;True&lt;/code&gt; if the value is of the specified type. Note that we have added a extra condition to check that an int8 type is of between 0 and 255 and a char type is of length 1. This method will be used later when we add values to the array.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def check_type(self, value):
        if self.array_type == 'int8':
            return isinstance(value, int) and 0 &amp;lt; value &amp;lt;= 255

        elif self.array_type == 'char':
            return isinstance(value, str) and len(value) == 1
        else:
            return False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A few tests have been added below. Notice that we have written some valid, invalid and edge case tests. Also not that we don't get very good feedback from the tests. This will be fixed when introduce proper test runners in section 4. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print("Check the check_type function works correctly")
print(array_1.check_type(1))
print(array_1.check_type(0.5))
print(array_1.check_type(280))
print(array_1.check_type(255))
print(array_1.check_type(0))

print(array_2.check_type("a"))
print(array_2.check_type(0.5))
print(array_2.check_type("hello"))
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;3. Add an input method&lt;/h3&gt;
&lt;p&gt;In order to populate our arrays we need to add an input method to the MyArray class. This method takes as a parameter a list of values. It fist checks whether the length of this list is the correct length for the array. It then checks that the type of each value in the list is correct for the type of the array. If both of these are true then it will populate the array. I have not included any tests at the the end of this file. They will be included in the next iteration.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def input(self, values):
        if len(values) != self.size:
            return 'Incorrect data size'

        for value in values:
            if not self.check_type(value):
                return 'Incorrect data type'

        for index in range(self.self.size):
            self.array[index] = values[index]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;4. Start using proper tests&lt;/h3&gt;
&lt;p&gt;Having all the tests at the bottom of the file is not an ideal practice. We will now remove these. We do not want to be running tests when we are using our Classes. Putting tests into a separate file and runnning them independently would be superior. We will start using the unittest library to run tests. Each set of tests will be defined as a class in a separate test file. Each class will have a &lt;code&gt;setUp()&lt;/code&gt; method to create what it needs to perform the tests. For example, to instantiate an object for an array and populate it. We are testing that we cannot enter incorrect data types or an incorrect array size. Note that the name of each method within the class is descriptive of what the test performs. We are using the &lt;code&gt;assertEqual()&lt;/code&gt; function which takes three parameters. The first two parameters need to be the same for the test to pass otherwise a message is printed (the third parameter).  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import unittest
from my_array_4 import MyArray

class TestArrayInput(unittest.TestCase):

    def setUp(self):
        self.my_empty_array = MyArray(3, 'int8')
        self.my_full_array = MyArray(3, 'int8')
        self.my_full_array.input([3 ,2, 1])

    def test_incorrect_data_char(self):
        self.assertEqual(self.my_empty_array.input(['a',2, 1]), 'Incorrect data type', "Should be Incorrect data type")

    def test_incorrect_data_float(self):
        self.assertEqual(self.my_empty_array.input([3.2, 2, 1]), 'Incorrect data type', "Should be Incorrect data type")

    def test_incorrect_data_big(self):
        self.assertEqual(self.my_empty_array.input([3.2, 2, 300]), 'Incorrect data type', "Should be Incorrect data type")

    def test_incorrect_data_negative(self):
        self.assertEqual(self.my_empty_array.input([3, -2, 1]), 'Incorrect data type', "Should be Incorrect data type")

    def test_incorrect_data_edge(self):
        self.assertEqual(self.my_empty_array.input([0, -2, 1]), 'Incorrect data type', "Should be Incorrect data type")

    def test_incorrect_data_size(self):
        self.assertEqual(self.my_empty_array.input([5, -2, 1, 4]), 'Incorrect data size', "Should be Incorrect data size")

    def test_incorrect_data_correct(self):
        self.assertEqual(self.my_full_array.array, [3, 2, 1] , "Should be [3, 2, 1]")


if __name__ == '__main__':
    unittest.main()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To run these tests enter the command &lt;code&gt;python3 test_array_1.py&lt;/code&gt; in bash. You should see something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.......
----------------------------------------------------------------------
Ran 7 tests in 0.000s
OK
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that in this step we haven't really added any functionality to our code. What we have done is "refactored" it. This is the porocess of making changes to our code to make it "better". This could be more readable, faster, more robust. In this case adding a better system for running tests. As we add more functionality to our array class we will add more tests. &lt;/p&gt;
&lt;h3&gt;5. Add a method to calculate the size of an array&lt;/h3&gt;
&lt;p&gt;We add a function that calculates the size of the array in bytes. The type of the array is taken in to consideration when doing this. We add a class to the test file to test the size of the array function.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def size(self):
        if self.array_type == 'int8':
            return self.i*8

        elif self.array_type == 'char':
            return self.i*4

        else:
            return "Incorrect type"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We add a test class to the test file as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class TestArraySize(unittest.TestCase):

    def setUp(self):
        self.my_int_array = MyArray(3, 'int8')
        self.my_int_array.input([5 ,2, 1])

        self.my_char_array = MyArray(4, 'char')
        self.my_char_array.input(['a' ,'b', 'c', 'd'])

    def test_correct_int_size(self):
        self.assertEqual(self.my_int_array.size(), 24, "Should be 24")

    def test_correct_char_size(self):
        self.assertEqual(self.my_char_array.size(), 16, "Should be 16")
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;6. Add a print method&lt;/h3&gt;
&lt;p&gt;Add a method to print out the array. We won't bother writing any tests for this.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def my_print(self):
    for value in self.array:
        print(value)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;7. Encaspulation&lt;/h3&gt;
&lt;p&gt;Before we go too much further, now woould be a good time to talk about encapsualtion as shortly we will have multiple classes inheriting from each other. In python adding a double underscore before an attribute or method name makes it inaccessible from outside of the class. If other classes need to access or change a protected variable they would need to do iut through a getter or setter method.&lt;/p&gt;
&lt;p&gt;The underscore is used as an index in the for loop instead of a variable name as it will not be used within the loop. This prevents python from creating variables that are not used. We modify the &lt;code&gt;array&lt;/code&gt; attribute within the constructor method to be private as we don't want any other classes to be able to modify it directly. This should be done through the &lt;code&gt;input()&lt;/code&gt; method for example.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class MyArray:
    def __init__(self, i, array_type):
        """Allowed types
            - int8: 8 bit unsigned integer 0 - 2^8 -1
            - char: a single character
        """
        self.__array = []
        self.i = i
        self.array_type = array_type

        for _ in range(i):
            self.__array.append(None)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that all references to &lt;code&gt;array&lt;/code&gt; attribute need to be modified to &lt;code&gt;__array&lt;/code&gt; within the class. This is another example of refactoring our code.&lt;/p&gt;
&lt;h3&gt;8. Create a Stack Class&lt;/h3&gt;
&lt;p&gt;Create a Stack structure that inherits from an Array. We need to run the constructor for the Array. Relabel the size of the array as max_size and set the current size of the stck to be -1 for empty. The stack will not always take up the full size of the array. We add an atribute called structure that tells us we are dealing with a stack. This will be useful in future when we inherit from the Stack class to create a Queue.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from my_array_7 import MyArray

class MyStack(MyArray):
    def __init__(self, max_size, stack_type):
        MyArray.__init__(self, max_size, stack_type)
        self.stack_size = -1
        self.max_size = self.i
        self.structure = "stack"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We create a test file for the stack and run it with &lt;code&gt;python3 test_stack_1.py&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import unittest
from my_stack_1 import MyStack

class TestStackInput(unittest.TestCase):

    def setUp(self):
        self.my_empty_stack = MyStack(3, 'int8')

    def test_incorrect_data_char(self):
        self.assertEqual(self.my_empty_stack.input(['a',2, 1]), 'Incorrect data type', "Should be Incorrect data type")

    def test_incorrect_data_float(self):
        self.assertEqual(self.my_empty_stack.input([3.2, 2, 1]), 'Incorrect data type', "Should be Incorrect data type")

    def test_incorrect_data_big(self):
        self.assertEqual(self.my_empty_stack.input([3.2, 2, 1]), 'Incorrect data type', "Should be Incorrect data type")

    def test_incorrect_data_negative(self):
        self.assertEqual(self.my_empty_stack.input([3, -2, 1]), 'Incorrect data type', "Should be Incorrect data type")

    def test_incorrect_data_edge(self):
        self.assertEqual(self.my_empty_stack.input([0, -2, 1]), 'Incorrect data type', "Should be Incorrect data type")

    def test_incorrect_data_size(self):
        self.assertEqual(self.my_empty_stack.input([5, -2, 1, 4]), 'Incorrect data size', "Should be Incorrect data size")

if __name__ == '__main__':
    unittest.main()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;9. Using a test runner&lt;/h3&gt;
&lt;p&gt;We now have multiple files and testfiles in our project so it will be useful to organise everything and employ the use of a test runner. A test runner is a programme that takes charge of running the tests and will add some functionality which you will see shortly. I am going be using nose which you might need to install with the command &lt;code&gt;pip3 install --user nosetests&lt;/code&gt;. Before running tests we will put all of the older files into an archive directory so the only files we will have in our current directory at this point will be my_array_7.py, my_stack_1.py, test_array_2.py and test_stack_1.py. We can run all of our tests with &lt;code&gt;nosetests -v  --no-byte-compile&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;-v&lt;/code&gt; option makes the output more verbose, i.e., we get more information
The &lt;code&gt;--no-byte-compile&lt;/code&gt; prevents nosetests from producing lots of .pyc files that get in the way. &lt;/p&gt;
&lt;p&gt;You should see something like the following output&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;test_incorrect_data_big (test_array_2.TestArrayInput) ... ok
test_incorrect_data_char (test_array_2.TestArrayInput) ... ok
test_incorrect_data_correct (test_array_2.TestArrayInput) ... ERROR
test_incorrect_data_edge (test_array_2.TestArrayInput) ... ok
test_incorrect_data_float (test_array_2.TestArrayInput) ... ok
test_incorrect_data_negative (test_array_2.TestArrayInput) ... ok
test_incorrect_data_size (test_array_2.TestArrayInput) ... ok
test_correct_char_size (test_array_2.TestArraySize) ... ok
test_correct_int_size (test_array_2.TestArraySize) ... ok
test_incorrect_data_big (test_stack_1.TestStackInput) ... ok
test_incorrect_data_char (test_stack_1.TestStackInput) ... ok
test_incorrect_data_edge (test_stack_1.TestStackInput) ... ok
test_incorrect_data_float (test_stack_1.TestStackInput) ... ok
test_incorrect_data_negative (test_stack_1.TestStackInput) ... ok
test_incorrect_data_size (test_stack_1.TestStackInput) ... ok
======================================================================
ERROR: test_incorrect_data_correct (test_array_2.TestArrayInput)
----------------------------------------------------------------------
Traceback (most recent call last):
File "/home/jpowell/Alevel/data_structures/version2/test_array_2.py", line 30, in test_incorrect_data_correct
    self.assertEqual(self.my_full_array.array, [3, 2, 1] , "Should be [3, 2, 1]")
AttributeError: MyArray instance has no attribute 'array'
----------------------------------------------------------------------
Ran 15 tests in 0.043s
FAILED (errors=1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The test &lt;code&gt;test_incorrect_data_correct&lt;/code&gt; from the file test_array_2.TestArrayInput has failed. &lt;/p&gt;
&lt;p&gt;If we look at the error message we can see that  &lt;code&gt;AttributeError: MyArray instance has no attribute 'array'&lt;/code&gt; This is because we have made the attribute &lt;code&gt;array&lt;/code&gt; private in the array class by giving it the double underscore. We have a few options to fix this test. We could add a getter method to the array class to access the array attribute and refactor the test to use this method. However, we don't really want or need the class to have a getter method. Maybe the best thing to do is remove this test as it is now not testing any functionality we can make use of. &lt;/p&gt;
&lt;h3&gt;10. Methods to calculate the size/height of the stack&lt;/h3&gt;
&lt;p&gt;Before we can write push and pop methods for the stack we need to add some helper methods. &lt;code&gt;height()&lt;/code&gt; returns the current size(height) of the stack. &lt;code&gt;isEmpty&lt;/code&gt; returns true if the stack contains at least one value.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def height(self):
        return self.stack_size + 1

def isEmpty(self):
    return self.stack_size &amp;lt; 0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;11. Adding push and pop methods&lt;/h3&gt;
&lt;p&gt;We add methods for push, pop and top. Push should put a value on to the top of the stack. Pop should remove a value from the top of the stack and return it. Top should return the value from the top of the stack without removing it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def push(self, value):
    if self.stack_size + 1 == self.max_size:
        return(self.structure, 'is full')
    else:
        self.stack_size += 1
        self.stack.append(value)

def pop(self):
    if self.isEmpty():
        return(self.structure, 'is empty')
    else:
        temp = self.stack[self.stack_size]
        del self.stack[-1]
        self.stack_size -=1
        return temp

def top(self):
    if self.isEmpty():
        return(self.structure, 'is empty')
    else:
        return self.stack[-1]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;12. Adding magic methods&lt;/h3&gt;
&lt;p&gt;We add some magic methods to allow stacks to perform as normal data structures in python. For example if we create two stacks S1 and S2 that are the same and ask python S1 == S2 then we should get the reult True. This is performed by the &lt;code&gt;__eq__&lt;/code&gt; method. If we perform &lt;code&gt;str(S1)&lt;/code&gt; then &lt;code&gt;__str&lt;/code&gt; will deal with this.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def __str__(self):
    output = [str(x) for x in self.stack]
    return ','.join(output)


def __eq__(self, other):
    if self.max_size != other.max_size:
        return False

    for i, j in zip(self.stack, other.stack):
        if i != j:
            return False
    return True
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;13. Linting our code&lt;/h3&gt;
&lt;p&gt;There are many different ways in which a programmer code structure their code. For example, they could use 2 spaces or 4 spaces for indentation. They could leave a space after a comma or not. They could capitalise class names or not etc, etc. In 2001 Guido van Rossum created a style guide for python and published it as PEP8. PEP's or Python Enhancement Proposals are documents people write to suggest changes to the language. The Python comunnity will then need to decide on whether to accept the proposal or not. PEP8 focuses on descibing certain rules on how python code should be written and it is now what most software engineers adopt as standard. This helps when multiple people are working on the same project or when programmers are reading a code that is not thiers. A linter is a programme that checks your code against the rules of PEP8 and produces a report offering suggestions. We are going to use a linter called flake8. We might need to install this first using &lt;code&gt;pip3 install --user flake8&lt;/code&gt;. Then we can run flake8 on all the python files in our directory with the command &lt;code&gt;flake8 *.py&lt;/code&gt;. We will then get a list of all the things in our files that do not follow the PEP8 rules. You might notice lots of the same the same things. For example &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;E231 missing whitespace after ','
E501 line too long (86 &amp;gt; 79 characters)  
E265 block comment should start with '# '
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should fix all of these now and run the linter on your code from time to time to check you are following the rules. This has been done to this code base and the files updated to new versions. &lt;/p&gt;
&lt;h3&gt;14.Setting up a task runner&lt;/h3&gt;
&lt;p&gt;We now have several commands that we are running on the bash terminal for executing the code, running our linter and running our tests. There might be more as the project grows. It can become awkward to remember what all the commands are for these tasks which is where a task runner comes in handy. I will be using invoke. We create a file called tasks.py and whenever we run &lt;code&gt;invoke "command name"&lt;/code&gt; invoke will look in the file tasks.py for the command name and run it. So then all we need to remember is the name of the tasks to be run. &lt;/p&gt;
&lt;p&gt;Firstly we import the commands we need from the invoke library. The to create a task we simmply define a function and put the decorator &lt;code&gt;@task&lt;/code&gt; on the line above it. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from invoke import task, run

@task
def hello(ctx):
    print("Hello world!")
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So now when we run `invoke hello' on the command line it should print "Hello world!" Note the ctx variable that the function takes as an input is a "context". Do not worry about this, it's just some thing the library needs. This isn't very usefull so now lets write some more. I will use the same basic structure for all tasks&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@task
def template(ctx):
    cmd = []
    cmd.append("bash syntax for command 1")
    cmd.append("bash syntax for command 2")
    cmd.append("bash syntax for command 3")
    # as many commands as you want to run

    for command in cmd:
        run(command, hide=False, warn=False)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the task for running a linter&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@task
def lint(ctx):
    cmd = []
    cmd.append("flake8 *.py ")

    for command in cmd:
        run(command, hide=False, warn=False)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A task for running our tests.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@task
def test(ctx):
    cmd = []
    cmd.append("clear")
    cmd.append("nosetests -v --rednose --with-coverage")

    for command in cmd:
        run(command, hide=False, warn=False)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A function (not a task) to print out a divider&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def star_line(comment):
    print()
    print('*'*60)
    print(comment)
    print('*'*60)
    print()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A task for cleaning up our directory.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@task
def clean(ctx):
    cmd = []
    cmd.append("bash syntax for command 1")

    for command in cmd:
        run(command, hide=False, warn=False)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A task for performing a fulltest which runs unit tests and lints the code.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@task
def fulltest(ctx):
    clean(ctx)
    star_line('Running Unit Tests')
    test(ctx)
    star_line('Linting Code')
    lint(ctx)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;List of files required for each section&lt;/h3&gt;
&lt;table style="width: 742px; height: 369px;"&gt;
&lt;tbody&gt;
&lt;tr style="height: 22px;"&gt;
&lt;td style="height: 22px; width: 209.429px;"&gt;Section Number&lt;/td&gt;
&lt;td style="height: 22px; width: 241.104px;"&gt; File&lt;/td&gt;
&lt;td style="height: 22px; width: 290.636px;"&gt; Test File&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 22px;"&gt;
&lt;td style="height: 22px; width: 209.429px;"&gt;1&lt;/td&gt;
&lt;td style="height: 22px; width: 241.104px;"&gt; my_array_1.py&lt;/td&gt;
&lt;td style="height: 22px; width: 290.636px;"&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 23px;"&gt;
&lt;td style="height: 23px; width: 209.429px;"&gt;2 &lt;/td&gt;
&lt;td style="height: 23px; width: 241.104px;"&gt; my_array_2.py&lt;/td&gt;
&lt;td style="height: 23px; width: 290.636px;"&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 25px;"&gt;
&lt;td style="height: 25px; width: 209.429px;"&gt;3 &lt;/td&gt;
&lt;td style="height: 25px; width: 241.104px;"&gt; my_array_3.py&lt;/td&gt;
&lt;td style="height: 25px; width: 290.636px;"&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 10px;"&gt;
&lt;td style="height: 10px; width: 209.429px;"&gt;4 &lt;/td&gt;
&lt;td style="height: 10px; width: 241.104px;"&gt; my_array_4.py&lt;/td&gt;
&lt;td style="height: 10px; width: 290.636px;"&gt; test_array_1.py&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 23px;"&gt;
&lt;td style="height: 23px; width: 209.429px;"&gt;5 &lt;/td&gt;
&lt;td style="height: 23px; width: 241.104px;"&gt; my_array_5.py&lt;/td&gt;
&lt;td style="height: 23px; width: 290.636px;"&gt; test_array_2.py&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 22px;"&gt;
&lt;td style="height: 22px; width: 209.429px;"&gt;6&lt;/td&gt;
&lt;td style="height: 22px; width: 241.104px;"&gt; my_array_6.py&lt;/td&gt;
&lt;td style="height: 22px; width: 290.636px;"&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 22px;"&gt;
&lt;td style="height: 22px; width: 209.429px;"&gt;7 &lt;/td&gt;
&lt;td style="height: 22px; width: 241.104px;"&gt; my_array_7.py&lt;/td&gt;
&lt;td style="height: 22px; width: 290.636px;"&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 22px;"&gt;
&lt;td style="height: 22px; width: 209.429px;"&gt;8 &lt;/td&gt;
&lt;td style="height: 22px; width: 241.104px;"&gt; my_stack_1.py&lt;/td&gt;
&lt;td style="height: 22px; width: 290.636px;"&gt; test_stack_1.py&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 22.8571px;"&gt;
&lt;td style="height: 22.8571px; width: 209.429px;"&gt;9 &lt;/td&gt;
&lt;td style="height: 22.8571px; width: 241.104px;"&gt; my_array_7.py, my_stack_1.py&lt;/td&gt;
&lt;td style="height: 22.8571px; width: 290.636px;"&gt; test_array_2.py, test_stack_1.py&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 22px;"&gt;
&lt;td style="height: 22px; width: 209.429px;"&gt;10 &lt;/td&gt;
&lt;td style="height: 22px; width: 241.104px;"&gt; my_array_7.py, my_stack_2.py&lt;/td&gt;
&lt;td style="height: 22px; width: 290.636px;"&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 22px;"&gt;
&lt;td style="height: 22px; width: 209.429px;"&gt;11 &lt;/td&gt;
&lt;td style="height: 22px; width: 241.104px;"&gt; my_array_7.py, my_stack_3.py&lt;/td&gt;
&lt;td style="height: 22px; width: 290.636px;"&gt; test_stack_2.py&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;!-- DivTable.com --&gt;&lt;/body&gt;&lt;/html&gt;</content><category term="Computing in School"></category><category term="Python"></category></entry><entry><title>Computing in School: Scaffolding Programming Problems with Pseudocode</title><link href="/Project%20Euler%20Scaffolding%20in%20Python.html" rel="alternate"></link><published>2024-06-15T10:20:00+01:00</published><updated>2024-06-15T10:20:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2024-06-15:/Project Euler Scaffolding in Python.html</id><summary type="html">&lt;p&gt;Giving pupils some scaffolding when solving problems, using the Project Euler website.&lt;/p&gt;</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;h2&gt;Scaffolding Programming Problems with Pseudocode&lt;/h2&gt;
&lt;p&gt;Pupils oftern find it difficult to get started on a programming problem.  I have various different methods for scaffolding a problem to allow the pupils to get stuck in and make some progress. One of which is to provide pupils with a &lt;a href="https://builtin.com/data-science/pseudocode"&gt;psuedo-code&lt;/a&gt; version of a solution to a problem and allow pupils to convert it into Python code. This enables them to focus on the Python without worrying about how to solve the problem. This post will use the problems from the fantastic &lt;a href="https://projecteuler.net/archives"&gt;Project Euler&lt;/a&gt; website which are largely mathematically themed. Pupils also find it difficult to learn the language that programmers use. This exercise will get them into the habit interpreting what is meant by, for example, "initialise a variable". I've borrowed the soultions to the Project Euler problems from &lt;a href="https://github.com/nayuki/Project-Euler-solutions/blob/master/python/p003.py?ts=4"&gt;here&lt;/a&gt;. All the solutions can also be found on my &lt;a href="https://github.com/jpowellstm/project-Euler-Pseudocode"&gt;github&lt;/a&gt; page. If you find this task useful please let me know in the comments. If you would like to add some more examples then please email me and I will add them.&lt;/p&gt;
&lt;h3&gt;Problem 1&lt;/h3&gt;
&lt;p&gt;If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.&lt;/p&gt;
&lt;h3&gt;Pseudocode&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;define a function 'compute' with no inputs 
    initialise a variable 'sum' to zero

    loop 'number' from 1 to 10000
        if 'number' is divisible by 3 or 5 add 'number' to 'sum'

    return 'sum' from function

call function 'compute' and print it
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;def compute():
    sum = 0 
    for x in range(1000):
        if x % 3 == 0 or x % 5 == 0:
            sum = sum + x
    return sum

print(compute())
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Problem 2&lt;/h3&gt;
&lt;p&gt;Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.&lt;/p&gt;
&lt;h3&gt;Pseudocode&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;define a function 'compute' with no inputs
    initialise a variable 'sum' to zero
    initialise a variable 'f1' to 1
    initialise a variable 'f2' to 2

    loop until 'f1' is 4000000
        if 'f1' is divisible by 2 add 'f1' to 'sum' 
    otherwise make 'f1' equal to 'f2' and 'f2' equal to 'f1' + 'f2'

    return 'sum' from function

call function 'compute' and print it
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;def compute():
    ans = 0
    x = 1  # Represents the current Fibonacci number being processed
    y = 2  # Represents the next Fibonacci number in the sequence
    while x &amp;lt;= 4000000:
        if x % 2 == 0:
            ans += x
        x, y = y, x + y
    return str(ans)

print(compute())
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Problem 3&lt;/h3&gt;
&lt;p&gt;The prime factors of 13195 are 5, 7, 13 and 29. What is the largest prime factor of the number 600851475143 ?&lt;/p&gt;
&lt;h3&gt;Pseudocode&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;define a function 'smallest_prime_factor' with one input 'number'
    initaialise a variable 'max' to the square root of 'number + 1
    cast 'max' into an integer
    if 'number' is bigger than 2
        loop 'i' from 2 to 'max'
            if number is divisible by 'i' return 'i'
    return 'number'

define a function 'compute' with no inputs
    initialise a variable 'n' to 600851475143
    initalise a variable 'p' to 1
    loop until 'p' is equal to 'n'
        let 'p' = smallest_prime_factor('n')
    if 'p' is less than 'n' replace 'n' by 'n' divided by 'p'
    else return 'n'

Call the function compute and print it
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;def smallest_prime_factor(n):
    assert n &amp;gt;= 2
    for i in range(2, eulerlib.sqrt(n) + 1):
        if n % i == 0:
            return i
    return n  # n itself is prime

def compute():
    n = 600851475143
    while True:
        p = smallest_prime_factor(n)
        if p &amp;lt; n:
            n //= p
        else:
            return str(n)

print(compute())
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Problem 4&lt;/h3&gt;
&lt;p&gt;A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99. Find the largest palindrome made from the product of two 3-digit numbers.&lt;/p&gt;
&lt;h3&gt;Pseudocode&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;define a function 'compute' with no inputs
    initialise a variable 'ans' to be 0
    loop 'i' from 100 to 1000
        loop 'j' from 100 to 1000
        initialise a variable 'prod' to 'i' times 'j'
        cast prod to a string
        reverse the string
        if the string is equal to the reverse of the string and 'prod' is greater than 'ans' then let 'ans' = 'prod'
    return 'ans'

call the function 'compute' and print it
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;def compute():
    ans = 0
    for i in range(100, 1000)
        for j in range(100, 1000)
            if str(i * j) == str(i * j)[ : : -1]) and i*j &amp;gt; ans:
                ans = i*j

    return ans

print(compute())
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Problem 5&lt;/h3&gt;
&lt;p&gt;2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder. What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?&lt;/p&gt;
&lt;h3&gt;Pseudocode&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;import the python 'fractions' library
define a function 'compute' with no inputs
    initialise a variable 'ans' to be 1
    loop i from 1 to 21
        call the gcd method from the fractions library with inputs 'i' and 'ans'
        initialise this to a variable 'gcd'
        let 'ans' be 'ans' times 'gcd'
    retunr 'ans'

call the function compute and print it
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;def compute():
    ans = 1
    for i in range(1, 21):
        ans *= i // fractions.gcd(i, ans)
    return str(ans)
&lt;/code&gt;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;</content><category term="Computing in School"></category><category term="Python"></category></entry><entry><title>Computing in School: An Introduction to Classes</title><link href="/Basic%20Classes%20in%20Python.html" rel="alternate"></link><published>2024-06-11T10:20:00+01:00</published><updated>2024-06-11T10:20:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2024-06-11:/Basic Classes in Python.html</id><summary type="html">&lt;p&gt;Using shapes to introduce the concept of classes in python.&lt;/p&gt;</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;h2&gt;Computing in Schools: The Basics of OOP&lt;/h2&gt;
&lt;p&gt;In this post I will build up a collection of classes and objects using simple concepts of shape that all pupils should be familiar with. For example we will start with a shape class and build up triangles and quadriallterals classes that will inhert from the shape class, then a square class etc. &lt;/p&gt;
&lt;h3&gt;1. Create a class called Shape&lt;/h3&gt;
&lt;p&gt;We create a basic root class called Shape. We give it a constructor method. In python this is the &lt;code&gt;__init__()&lt;/code&gt; method. The constructor to define the number of sides the shape has. The constructor method should take as input an integer to specify the number of sides it has. This should then be declared as an attribute within the method. We will also declare a name attribute within the constructor &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Shape:
    def __init__(self, given_num_sides):
        self.num_sides = given_num_sides
        self.name = "shape"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that I am going to use a naming convention whereby all variable names passed into a function will be prefixed with the word "given". For example &lt;code&gt;given_num_sides&lt;/code&gt; is passed to the constructor so it can create the attribute &lt;code&gt;num_sides&lt;/code&gt;. In practice I would probably just use the same name for both, but the exam mark schemes seem to prefer different names.&lt;/p&gt;
&lt;h3&gt;2. Create a Triangle class&lt;/h3&gt;
&lt;p&gt;The Triangle class should inherit from the Shape class. It needs its own constructor method. The contructor for Triangle should take as input a base and a height and declare these as attributes. The constructor should call the constructor of the class it inherits from. To do this in python we use the &lt;code&gt;super()&lt;/code&gt; function. This super function needs to take as input the integer 3 which the Shape class will use to define a number of sides attribute. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Triangle(Shape):
    def __init__(self, given_base, given_height):
        super().__init__(3)
        self.base = given_base
        self.height = given_height
        self.name = "triangle"
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;3. Add an area method to the Triangle class&lt;/h3&gt;
&lt;p&gt;We add a method to the Triangle class to calculate a the value of the area. Note that when using the values for the base and height within the class we need to use the &lt;code&gt;self&lt;/code&gt; keyword that references the values of the object rather than the class. For example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Triangle(Shape):
    def __init__(self, given_base, given_height):
        super().__init__(3)
        self.base = given_base
        self.height = given_height
        self.name = "triangle"

    def area(self):
        return 0.5 * self.base * self.height
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that we could have given the triangle and area attribute instead of a method like so&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Triangle(Shape):
    def __init__(self, given_base, given_height):
        super().__init__(3)
        self.base = given_base
        self.height = given_height
        self.name = "triangle"
        self.area = 0.5 * given_base * given_height
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;4. Test everything works so far.&lt;/h3&gt;
&lt;p&gt;We will now instantiate (which just means create) a shape object from the Shape class and print its attributes. We will also instantiate a triangle object from the Triangle class (assuming we are using the first version of Triangle), print its attributes and call its area method. Note that even though we have not passed the number 3 as input when creating the triangle object its &lt;code&gt;num_sides&lt;/code&gt; attribute will still be set to three inside the constructor.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;shape = Shape(5)
print(shape.name)
print(shape.num_sides)

triangle = Triangle(4, 5)
print(triangle.name)
print(triangle.num_sides)
print(triangle.base)
print(triangle.height)
print(triangle.area())
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;5. Create a Quadrillateral class&lt;/h3&gt;
&lt;p&gt;We create a Quadrillateral class that inherits from the Shape class. Everything is very similar to the Triangle class, i.e., it should have a constructor method that calls the super classes constructor with the number of sides as 4. The point of doing this is that if in future we decide that all quadrillaterals should have something in common they we only need to modify the quadrillateral class and not all the classes that inherit from it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Quadrillateral(Shape):
    def __init__(self):
        super().__init__(4)
        self.name = "quadrillateral"
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;6. Create a Square class&lt;/h3&gt;
&lt;p&gt;We will now create a class for a Square that should inherit from the Quadrillateral class. As usual it will need a constructor method and some attributes set. We add a list as an attribute to hold values for the angles of the square. We also add an area method.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Square(Quadrillateral):
    def __init__(self, given_length):
        super().__init__()
        self.angles = [90, 90, 90, 90]
        self.length = given_length
        self.name = "Square"

    def area(self):
        return self.length **2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point you might be thinking that actually all quadrillaterals have 4 angles so the Quadrillateral class should have an attribute to hold the angles. Or for that matter the Shape class should have an attribute for the angles. We will go ahead now and modify the classes to make this work. Note that angles will need to be passed through the constructor methods. This is an example of what programmers call refactoring, i.e., changing the structure of their programme without changing its functionality. This could be to make it more readable or maintainable for example. The new classes now look like this&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Shape:
    def __init__(self, given_num_sides, given_angles):
        self.num_sides = given_num_sides
        self.name = "shape"
        self.angles = given_angles

class Triangle(Shape):
    def __init__(self, given_base, given_height, angles):
        super().__init__(3, angles)
        self.base = given_base
        self.height = given_height
        self.name = "triangle"

    def area(self):
        return 0.5 * self.base * self.height

class Quadrillateral(Shape):
    def __init__(self, given_angles):
        super().__init__(4, given_angles)
        self.name = "quadriallateral"

class Square(Quadrillateral):
    def __init__(self, given_length):
        super().__init__([90, 90, 90, 90])
        self.length = given_length
        self.name = "Square"
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;7 Test some more&lt;/h3&gt;
&lt;p&gt;Now that the classes have been refactored we will test them all to make sure they work&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;shape = Shape(5, [30, 40, 50, 60, 70])
print(shape.name)
print(shape.num_sides)
print(shape.angles)

triangle = Triangle(4, 5, [30, 60, 90])
print(triangle.name)
print(triangle.num_sides)
print(triangle.base)
print(triangle.height)
print(triangle.area())

square = Square(4)
print(square.name)
print(square.num_sides)
print(square.length)
print(square.area())
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;8. Validation&lt;/h3&gt;
&lt;p&gt;You might have noticed that it is possible to define shapes that have angles that are not consistent. For example, there is nothing to stop us defining a triangle with angles of 10, 20 and 30. We will add a validation method to the shape class that will raise an error if the sum of the angles are not consistent with the number of sides of the shape. We also check to make sure the shape has at least 3 sides. We have included this in the Shape class so that all inherited classes will gain this method. The validator method is called within the constructor for the shape class. You might be able to think of other validations that need to be made to make sure only consistent shapes are created.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Shape:
    def __init__(self, given_num_sides, given_angles):
        self.num_sides = given_num_sides
        self.name = "shape"
        self.angles = given_angles
        self.angle_sum = (self.num_sides - 2) * 180
        self.validator()

    def validator(self):
        if sum(self.angles) != self.angle_sum:
        raise ValueError("Angles must sum to "+str(self.angle_sum))
        if self.num_sides &amp;lt; 3:  
        raise ValueError("The shape must have at least 3 sides")
        if self.num_sides != len(self.angles):
        raise ValueError("The number of sides must be the same as the number of angles")
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;9. Encapsulation&lt;/h3&gt;
&lt;p&gt;We will add a private attribute to the Shape class. In python we doo this by adding a double underscore infront of the name. This attribute will only be able to be modified or accessed by methods within the class itself. The follwoing code should result in an error as we have tried to access a private attribute&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Shape:
    def __init__(self, n, angles):
        self.__secret = "You can't see me"

    shape = Shape(3, [30, 60, 90])
    shape.__secret
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is called encapsulation. The secret attitribute is encapsualted with the class. We can however allow access to this attribute from outside the class by writting what are called getter and setter methods. Getter's get the value of attribute and setter's change the value of the attribute. This makes it more unlikelikly that this attribute will be accessed or changed by accident (although not impossible). The Shape class now looks like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Shape:
    def __init__(self, given_num_sides, given_angles):
        self.num_sides = given_num_sides
        self.name = "shape"
        self.angles = given_angles
        self.angle_sum = (self.num_sides - 2) * 180
        self.validator()
        self.__secret = "You can't see me"

    def get_secret(self):
        return self.__secret

    def set_secret(self, given_secret):
        self.__secret = given_secret

    def validator(self):
        if sum(self.angles) != self.angle_sum:
        raise ValueError("Angles must sum to "+str(self.angle_sum))
        if self.num_sides &amp;lt; 3:  
        raise ValueError("The shape must have at least 3 sides")
        if self.num_sides != len(self.angles):
        raise ValueError("The number of sides must be the same as the number of angles")
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;10. Create a Tracker class&lt;/h3&gt;
&lt;p&gt;We will now create a class called Tracker thats purpose is to keep track of all the objects we create. This class will not inherit from Shape as it has nothing in common with it. Its constructor method will create an attribute called &lt;code&gt;created_objects&lt;/code&gt; that will be an empy list and used for storing the shape objects we create. We will make it private by adding the double underscore as we don't want it to be accidentally changed. We add a setter method called add that will add an object to the list and a getter method called summarise that will print out the details of the objects. Note that neither the getter or settr methods access the &lt;code&gt;created_objects&lt;/code&gt; attribute in its raw form. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Tracker:
    def __init__(self):
        self.__created_objects = []

    def add(self, obj):
        if obj not in self.__created_objects:
        self.__created_objects.append(obj)

    def summarise(self):
        for obj in self.__created_objects:
        print(obj.name, obj.num_sides)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now test it by instantiating an instance of the Triangle and Square classes then instantiating an instance of the Tracker class then calling the add method to add the triangle and square objects to the tracker object. We then call the summarise method to list the details of the stored objects.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;triangle = Triangle(3, 4, [30, 60, 90])
square = Square(4)
tracker = Tracker()
tracker.add(triangle)
tracker.add(square)
tracker.summarise()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More functionality could be added to the summarise method such as prettier printing with column titles for example and/or more details about the shapes.&lt;/p&gt;
&lt;h3&gt;11. Polymorphism&lt;/h3&gt;
&lt;p&gt;Let's say we would like to write a method that prints out all of the attributes of an object. For the shape class this might look something like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def print_all(self):
    print("This shape has " + str(self.num_sides))
    print("The angles of the shape are " ,self.angles)
    print("The sum of the angles is " + str(self.angle_sum))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All classess that inherit from Shape will gain this method. However, subclasses of Shape may need to print out additional information. The Triangle class for example may need to print out its base and height. We will need to rewrite the print_all method for the Triangle class. This is an example of method overiding. The &lt;code&gt;print_all&lt;/code&gt; method in the Triangle class "overirdes" the inherited version of the &lt;code&gt;print_all&lt;/code&gt; method it got from the Shape class. This is an example of how the &lt;code&gt;print_all&lt;/code&gt; method could be implemented in the Triangle class &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def print_all(self):
    super.print_all()
    print("The triangle has a height of " + str(self.height))
    print(" The triangle has a base of " + str(self.base))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note we have made a call to the &lt;code&gt;print_all&lt;/code&gt; function in the super class to avoid repeating code.&lt;/p&gt;
&lt;h3&gt;12. Further suggestions&lt;/h3&gt;
&lt;p&gt;This activity could be taken much further. We could implement methods to draw the shapes. methods to calculate other aspects of the shapes etc. Please comment below if you have any good suggestions. I am constantly modifying this every time I use it with pupils. If your have any suggestions then please post in the comments below.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><category term="Computing in School"></category><category term="Python"></category></entry><entry><title>Altair by Example</title><link href="/Python%20and%20Altair.html" rel="alternate"></link><published>2024-06-10T10:20:00+01:00</published><updated>2024-06-10T10:20:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2024-06-10:/Python and Altair.html</id><summary type="html">&lt;p&gt;A cookbook of examples for creating dashboard visualisations with python's Altair library.&lt;/p&gt;</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;A pupil of mine wanted to create a dashboard for trading Bitcoin. (He will either go bankrupt or become very rich!) We needed to create some nice looking visualisations and after doing a bit of experimentation with different libraries I came across &lt;a href="https://pypi.org/project/altair/"&gt;Altair&lt;/a&gt;. It looks good, has a nice syntax and works in ipython notebooks. I've created a cookbook of examples that build up from importing data to creating basic graphs and building them up into some dashboard components. You can download the ipython notebook &lt;a href="https://drive.google.com/file/d/1e6l_rY8bVxGImKrAbzgNESZJERr8qTHK/view?usp=drive_link"&gt;here&lt;/a&gt; or just run it in Google Colab. You will also need to download the following files &lt;a href="https://drive.google.com/file/d/128YI5DMBmCDlMech57hS-WIdRvbzy70G/view?usp=sharing"&gt;happiness&lt;/a&gt; and &lt;a href="https://drive.google.com/file/d/1qmrrh5S-VRjubyIkbAsMPX7rFFg4X7Fu/view?usp=sharing"&gt;happiness_2021&lt;/a&gt;.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><category term="Data Science"></category><category term="Python"></category><category term="Altair"></category><category term="Programming"></category></entry><entry><title>Customising Mouse Buttons in Linux</title><link href="/Customising%20extra%20mouse%20buttons%20in%20Linux.html" rel="alternate"></link><published>2021-02-12T10:20:00+00:00</published><updated>2021-02-12T10:20:00+00:00</updated><author><name>jpowcode</name></author><id>tag:None,2021-02-12:/Customising extra mouse buttons in Linux.html</id><summary type="html">&lt;p&gt;Using xbindkeys to remap mouse buttons to run a bash script&lt;/p&gt;</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;I recently bought a 4K monitor, which is great, but one of the things I noticed that annoys me was that when moving the mouse from one side of the screen to the other I have to pick it up and reset it. Once across the mouse matt is not enough to get the cursor from on side to the other. This is the case even with the acceleration of the mouse set to it's highest value.  I've eased this issue by binding a script to three of the extra mouse buttons that repositions the cursor to the top left, middle or top right depending on the button pressed. I'll outline the process below &lt;/p&gt;
&lt;p&gt;Run the following command in the terminal&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;xev -event mouse
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Click on the area that appears with the buttons you want to use and pay attention to the output in the terminal. All you need is the number of each button you want to use.&lt;/p&gt;
&lt;p&gt;Install xbindkeys and xdotool (on debian based systems that would be)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install xbindkeys
sudo apt-get install xdotool
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create a file in your home directory (the dot is important)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch .xbindkeysrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Edit this file with the bash commands you want to run using the example below as a guide. It does the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;moves the mouspointer to the point (200, 200) from the top left of the screen when I press my button 6.&lt;/li&gt;
&lt;li&gt;moves the mouspointer to the point (3600, 200) from the top left of the screen, which is the top right of the screen on a 4K monitor, when I press my button 7.&lt;/li&gt;
&lt;li&gt;moves the mouspointer to the point (1900, 200) from the top left of the screen, which is the middle of the screen, when I press my button 2.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Button 6, 7 and 2 correspond to the scroll wheel on my mouse which can be pushed down and to either side.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;"xdotool mousemove 200 200"
        m:0x0 + b:6

"xdotool mousemove 3600 200"
        m:0x0 + b:7

"xdotool mousemove 1900 200"
        m:0x0 + b:2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run the following to kill any existing xbindkeys process running and restart it. Test it to make sure it works.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pkill -f xbindkeys
xbindkeys
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You now need to make sure it runs on startup. Every distro is going to be slightly different so you may need to Google it. However, on Mint when you install xbindkeys it is automatically configured to run on startup&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><category term="Linux"></category><category term="Linux"></category></entry><entry><title>Bike light internals and repair</title><link href="/Inside%20a%20bike%20light%20and%20a%20repair.html" rel="alternate"></link><published>2021-01-28T10:20:00+00:00</published><updated>2021-01-28T10:20:00+00:00</updated><author><name>jpowcode</name></author><id>tag:None,2021-01-28:/Inside a bike light and a repair.html</id><summary type="html">&lt;p&gt;A simple look inside and repair of a  bike light.&lt;/p&gt;</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;As with lots of electronic items these days, after a while, they just stop working. Often with modern electronics that have a rechargeable lithium battery the cause is the battery wearing out. In some items the battery is not removable, in others the battery can be removed, but a replacement cannot be sourced.  In some of these cases an alternative battery can be fitted. In third category of cases the battery is removable and available making the fix easy.  This is what I was hoping for with this bike light.&lt;/p&gt;
&lt;p&gt;The light was easy to dismantle with a few small hex wrenches. You can see in the photos below what it looks like on the inside. &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center;"&gt;&lt;/th&gt;
&lt;th style="text-align: center;"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Im1" src="./images/bike_light1.jpg"/&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Im2" src="./images/bike_light2.jpg"/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;You can see that there is a single cell 1850 lithium battery which should be easy to source on Ebay. This proved to be partially the case. I bought several, but for some reason they all appeared to be slightly too short. Rather that keep on wasting my money on more batteries I have wedged a small bit off copper between one end of the battery and the terminal. This has done the job and the light now charges and works fine. &lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><category term="Repair"></category><category term="Repair"></category><category term="Electronics"></category></entry><entry><title>Computing in School: ML for Kids</title><link href="/Getting%20kids%20into%20machine%20learning.html" rel="alternate"></link><published>2021-01-24T10:20:00+00:00</published><updated>2021-01-24T10:20:00+00:00</updated><author><name>jpowcode</name></author><id>tag:None,2021-01-24:/Getting kids into machine learning.html</id><summary type="html">&lt;p&gt;Using the machine learning for kids website to introduce pupils to the concept.&lt;/p&gt;</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;The term "machine learning" gets bandied around in the press all the time these days. How many pupils when they come across this term understand what it means? How is it exactly that a machine "learns"? The website &lt;a href="https://machinelearningforkids.co.uk/"&gt;machine learning for kids MLFK&lt;/a&gt; goes some way to helping with the problem of educating pupils on the process of machine learning. What it doesn't do is look into the black box of the machine learning algorithm. For this you'd need a lot more maths. I've currently used this website with A-level pupils (aged 16-18) and GCSE pupils (aged 14-16). I'm going to describe my experience here to give you an idea about whether or not you want to give it a go.&lt;/p&gt;
&lt;p&gt;The first thing to do is set up a teacher account. This involves setting up a free account on IBM's Watson Cloud Compute service and connecting it to the MLFK website. With the excellent step by step instructions provided I found this pretty straight forward. Then you set up some accounts for the pupils to use. Now the free account on IMB Watson only allows you so many accounts to train models simultaneously. For example, for simple text based models you get 5 simultaneous accounts. However, what the website does allow you to do is set up group collaborative projects. So a few pupils or indeed a whole class can contribute to the same project. Whole class projects were the way I used the website.&lt;/p&gt;
&lt;p&gt;The first project I tried was a text based model. I set up two categories labeled "nice comments" and "nasty comments" and I encouraged the pupils to submit comments to each category. They were informed that comments were not allowed to be personal and they should be school appropriate. I monitored the submitted comments and deleted anything that didn't meet these expectations. They were pretty sensible, but quite creative in making comments with words I had never heard before! A bit of Googling followed to make sure they were appropriate! After we had a around 50 or so comments in each category we sent the model off to be "trained" by IBM Watson. And this is where it feels a little bit of a black box. There is no indication given about how the model is trained. That aside for the moment, it generally doesn't take very long to train a text based model. When finished a text box appears where pupils can enter different nice and nasty comments and the model will return which category it fits into and  what it's  percentage confidence is.  My challenge to the pupils was to fool the model. Could they make it categorise a nice comment as a nasty one. Once they'd achieved this we talked about what examples fooled the model and how that might have happened. We then went back to the training examples and added more in that would attempt to fix the incorrect classifications. This gave pupils a good overview of the process involved in training a model. What it didn't do was give any insight into the black box. The website does acknowledge this and provides a section dedicated to resources for teaching the internals of the models.&lt;/p&gt;
&lt;p&gt;The second project we tackled was an image classifier. I gave the pupils the categories "cat" and "dog". They went away and found images online for as many different cats and dogs as they could find. Then we repeated the same process as above, uploading the photos to the website. This took a bit longer to train so it's worth having something else to do whilst it completes. There are some interesting experiments to try with this project. For example if you fill the dog category with pictures that have sky in them and the cat category with pictures that are taken at night will the model focus on the content of the image or will the background dominate? I also tried getting the pupils to sketch pictures of dogs and cats. The website includes a function for this. It worked surprisingly well.&lt;/p&gt;
&lt;p&gt;The third project I tried was using a webcam to take pictures of the pupils faces and train a model to recognise them. This was a bit more limited in how accurate it was, but it started a discussion about the size and variation of the data set. We probably needed to upload a lot more photos of the pupils.&lt;/p&gt;
&lt;p&gt;I had a discussion recently with a computer scientist friend of mine about the pedagogical nature of how computer science should be taught. He was of the opinion that things should be taught from the bottom up. For example, starting with the basic algorithms and building on them gradually. However, I feel that pupils often lack motivation if they cannot see an application to what they are learning and I postulated that a top down approach was an alternative. Starting with the MLFK website pupils can get a feel for how ML works. The next step down could be a description of how a some aspects of text classifier work. I think pupils could get there heads around the concepts of &lt;a href="https://studymachinelearning.com/stemming-and-lemmatization/"&gt;stemming&lt;/a&gt; and &lt;a href="https://studymachinelearning.com/stemming-and-lemmatization/"&gt;n-grams&lt;/a&gt;. One further level down would be studying a particular algorithm in detail and coding it up. I haven't tried this yet with pupils but I will let you know when I do.&lt;/p&gt;
&lt;p&gt;In conclusion I would thoroughly recommend giving MLFK a go. It's great fun and gives pupils a fantastic insight into real world applications of computer science. &lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><category term="Computing in School"></category><category term="Machine Learning"></category></entry><entry><title>Some Lockdown Builds</title><link href="/A%20few%20quick%20builds%20during%20the%20lock-down.html" rel="alternate"></link><published>2021-01-06T10:20:00+00:00</published><updated>2021-01-06T10:20:00+00:00</updated><author><name>jpowcode</name></author><id>tag:None,2021-01-06:/A few quick builds during the lock-down.html</id><summary type="html">&lt;p&gt;USing some spare time and some scrap materials to build a few things.&lt;/p&gt;</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;With plenty of spare time on my hands and a garage full of scrap bits and bobs I made a few things. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Phone or tablet stand&lt;/strong&gt; &lt;br/&gt;
For watching YouTube whilst lying on the sofa. Also useful for Video calls. Simply made from some scrap plywood and some hinges I had knocking about. I put bits of bicycle handlbar tape on the bottom to stop it scratching the table.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Image 1_1" src="./images/tablet_stand.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bee box&lt;/strong&gt; &lt;br/&gt;
For attracting Bees to the garden. I had loads of oak lying about for years after a few mishaps whilst building a bookcase.  The hexagonal design is supposed to mirror the shape of the cells within a beehive. It's currently filled with some drilled out bits of wood in various diameter holes and some roled up bits of paper. &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center;"&gt;&lt;/th&gt;
&lt;th style="text-align: center;"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Image 2_1" src="./images/bee_box1.jpg"/&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Image 2_2" src="./images/bee_box2.jpg"/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Dice shield&lt;/strong&gt; &lt;br/&gt;
For stopping dice going everywhere whilst playing board games. I also wanted to practice some finger joints on my router.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center;"&gt;&lt;/th&gt;
&lt;th style="text-align: center;"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Image 3_1" src="./images/dice_shield1.jpg"/&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Image 3_2" src="./images/dice_shield2.jpg"/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Table&lt;/strong&gt; &lt;br/&gt;
For lounging in the garden during the nice sunny whether (summer lockdown, not winter lockdown). Lots of old bike wheels knocking about and random bits of wood. I made the legs by cutting a bike wheel rim into thirds and bolting them together. The centre piece is bit of old bike seat tube cut down. The surface has a few coats of outdoor varnish on it.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center;"&gt;&lt;/th&gt;
&lt;th style="text-align: center;"&gt;&lt;/th&gt;
&lt;th style="text-align: center;"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Image 4_1" src="./images/table1.jpg"/&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Image 4_2" src="./images/table2.jpg"/&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Image 4_3" src="./images/table3.jpg"/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Card wallet&lt;/strong&gt; &lt;br/&gt;
For carrying my cards. Two bits of metal with some sewn elastic to hold them together and allow the cards to be pushed out. Simple but quite effective. The metal is reassuringly heavy! I also made an emergency pound coin holder. The left two most images are the prototype I made out of plastic to see what it was carrying it around before committing to making one out of metal. &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center;"&gt;&lt;/th&gt;
&lt;th style="text-align: center;"&gt;&lt;/th&gt;
&lt;th style="text-align: center;"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Image 5_1" src="./images/wallet1.jpg"/&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Image 5_2" src="./images/wallet2.jpg"/&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Image 5_3" src="./images/wallet3.jpg"/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;</content><category term="Making"></category><category term="Making"></category></entry><entry><title>STEM Activity 2: Codenames</title><link href="/A%20STEM%20based%20take%20on%20the%20board%20game%20Codenames.html" rel="alternate"></link><published>2021-01-05T10:20:00+00:00</published><updated>2021-01-05T10:20:00+00:00</updated><author><name>jpowcode</name></author><id>tag:None,2021-01-05:/A STEM based take on the board game Codenames.html</id><summary type="html">&lt;p&gt;Practising STEM based vocabulary using the the poppular board game Codenames&lt;/p&gt;</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;I run a board games club in the school I work at. Playing board games is an excellent way for pupils to develop skills such as 
risk management, negotiation, numeracy, reading and comprehension, creativity, logical analysis etc, the list goes on. One of my personal
favorite games is &lt;a href="https://boardgamegeek.com/boardgame/178900/codenames"&gt;CodeNames&lt;/a&gt;. A card game for 4–8 players (but can be played with as many as you like) designed by &lt;a href="https://en.wikipedia.org/wiki/Vladim%C3%ADr_Chv%C3%A1til"&gt;Vlaada Chvátil&lt;/a&gt; and published by &lt;a href="https://czechgames.com/"&gt;Czech Games Edition&lt;/a&gt;. Two teams compete
 by each having a "spymaster" give one-word clues that can point to multiple words on the board. The other players on the team attempt to guess 
their team's words while avoiding the words of the other team. In a variant with 2–3 players, one spymaster gives clues to the other player or players.". During the Coronavirus Pandemic I started playig this with friends online over a Video Chat using the website &lt;a href="https://www.horsepaste.com/"&gt;HorsePaste&lt;/a&gt;.  It occurred to me that if I could use subject based vocabulary then this would be a great game to play with pupils in a STEM club. The Horsepaste website allows you to import your own words. I've put together a spreadsheet of the key words from some STEM subjects to make it easier to filter and find the words I want. You can find this &lt;a href="https://drive.google.com/drive/folders/1fcmNMGNbKsg3SXGi-VGip_DzgDsN8Snz?usp=sharing"&gt;here&lt;/a&gt;.  You can see an example in the picture below of what it looks like with subject specific key words. Follow these steps to get it to work:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Click on the custom words box.&lt;/li&gt;
&lt;li&gt;Change the name it gives you to the left of the GO button to something else.&lt;/li&gt;
&lt;li&gt;Deselect the current set of words, probably defaults to English.&lt;/li&gt;
&lt;li&gt;Copy and paste the words from the spreadsheet and add any more you want. They need to be comma separated.&lt;/li&gt;
&lt;li&gt;Remove the comma from the last word in the list.&lt;/li&gt;
&lt;li&gt;Click GO&lt;/li&gt;
&lt;li&gt;Read the rules to Codenames &lt;a href="https://drive.google.com/drive/u/3/folders/1fcmNMGNbKsg3SXGi-VGip_DzgDsN8Snz"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="HorsePaste" src="./images/horsepaste.png"/&gt;&lt;/p&gt;
&lt;p&gt;Please let me know in the comments below if you give it a go.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><category term="STEM Activities"></category><category term="Python"></category></entry><entry><title>Home Made Power Supplies</title><link href="/A%20few%20of%20my%20home%20made%20power%20supplies..html" rel="alternate"></link><published>2021-01-05T10:20:00+00:00</published><updated>2021-01-05T10:20:00+00:00</updated><author><name>jpowcode</name></author><id>tag:None,2021-01-05:/A few of my home made power supplies..html</id><summary type="html">&lt;p&gt;Several power supplies I've constructed over the years for various reasons.&lt;/p&gt;</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;I realised that over the years I had constructed quite a few different power supplies for various different purposes. I though I'd gather them all together in this post with some pictures.&lt;/p&gt;
&lt;p&gt;This is one I made for powering projects that required a lot of current. It uses an old server power supply with the 3v, 5v and 12v lines broken out. A simple plyword box. The handle is made from an old coping saw that had broken that I had in my bits box proving that you should never throw anything out.  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center;"&gt;&lt;/th&gt;
&lt;th style="text-align: center;"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Image 1_1" src="./images/pow_sup1_1.jpg"/&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Image 1_2" src="./images/pow_sup1_2.jpg"/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This one is a portable variable supply. The idea being I can plug in any old laptop charger or a lithium battery and have a variable supply. It uses a cheap ebay buck converter. It also has fixed 3v, 5v and 12v outputs. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Image 5_1" src="./images/pow_sup4_1.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;This one is an miniaturised version of the previous one using a slightly better ebay module and a more compact perspex "sandwich" case. &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center;"&gt;&lt;/th&gt;
&lt;th style="text-align: center;"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Image 2_1" src="./images/pow_sup2_1.jpg"/&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Image 2_2" src="./images/pow_sup2_2.jpg"/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;I build this one as I was fed up of the multitude of devices I always seemed to have hanging about charging at various places in the house. It contains an old PC power supply which has plenty of current to charge many devices simultaneously. I've de-soldered some USB sockets from some old PC motherboards and used them to plug the various USB cables into. It has several USB micro, a USB C and a few USB mini cables. Adding more cables is easy as there are spare USB slots on the back. &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center;"&gt;&lt;/th&gt;
&lt;th style="text-align: center;"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Image 3_1" src="./images/pow_sup3_1.jpg"/&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Image 3_2" src="./images/pow_sup3_2.jpg"/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This one has already been documented in a previous &lt;a href="https://jpowcode.github.io/power-supply-build.html"&gt;post&lt;/a&gt;. It's an old NAS box with an old server power supply and a variable voltage/current ebay module. It gives 0-45v at 2 amps.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center;"&gt;&lt;/th&gt;
&lt;th style="text-align: center;"&gt;&lt;/th&gt;
&lt;th style="text-align: center;"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Image 4_1" src="./images/power1.jpg"/&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Image 4_2" src="./images/power5.jpg"/&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Image 4_3" src="./images/power3.jpg"/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This is one I have sat on my desk. It's an old PC power supply with the 3v, 5v and 12v broken out on the front. It also powers all the DC devices on my desk such as soldering extractor, lights, small monitor, ethernet switch, saving me having a multitude of AC adapters plugged in.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Image 6_1" src="./images/pow_sup5_1.jpg"/&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><category term="Electronics"></category><category term="Tools"></category><category term="Electronics"></category></entry><entry><title>STEM Activity 1: Tensegrity Structures</title><link href="/A%20simple%20build%20for%20STEM%20club.html" rel="alternate"></link><published>2021-01-05T10:20:00+00:00</published><updated>2021-01-05T10:20:00+00:00</updated><author><name>jpowcode</name></author><id>tag:None,2021-01-05:/A simple build for STEM club.html</id><summary type="html">&lt;p&gt;Building an interesting sculpture out of scrap wood making use of the concept of tension.&lt;/p&gt;</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;In this series of posts I'm going to start writing up some of the activities I've done with the STEM (Science, Technology, Engineering and Maths) club that I run in the school I teach at. &lt;/p&gt;
&lt;p&gt;I'm always on the lookout for things to physically build with the club. I like getting them to construct things; I feel the younger generations are not so well versed in practical skills as I was at their age. I also like to use up some of the scraps that I produce from woodworking projects at home. 
Whilst browsing Youtube I came across the idea of &lt;a href="http://www.scholarpedia.org/article/Tensegrity"&gt;tensegrity&lt;/a&gt;. In basic terms it's a design principle making use of tension in wires or strings to replace some of the struts in a structure. It's probably easiest to get a concept of it by searching Google Images. There are lots of pictures of furniture that people have made using the concept. I followed &lt;a href="https://www.youtube.com/watch?v=ZwkCMWrHvyE"&gt;this&lt;/a&gt; procedure for creating one, but instead of the lollipop sticks I used some scrap wood and chopped it into equally sized planks on the table saw. The cord is scraps of cotton from the sewing box. You can see the result below. If you are friendly with your technology department then ask them to chop a load of scraps of wood for you. It's a few minutes work with a table saw and a mitre saw. Your art department should have glue-guns you can borrow and the textiles department should be able to provide you with scraps of cotton. I think to improve it I would drill holes through the centers of the corners of the triangles and attache the cord there.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Image 1_1" src="./images/tensegrity1.jpg"/&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><category term="STEM Activities"></category><category term="Making"></category></entry><entry><title>Computing in School: The Little Man Computer</title><link href="/Some%20programmes%20written%20for%20the%20Little%20Man%20Computer.html" rel="alternate"></link><published>2021-01-05T10:20:00+00:00</published><updated>2021-01-05T10:20:00+00:00</updated><author><name>jpowcode</name></author><id>tag:None,2021-01-05:/Some programmes written for the Little Man Computer.html</id><summary type="html">&lt;p&gt;Some programmes written for the Little Man Computer&lt;/p&gt;</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;Basic assembly code programming is part of the A-level Computing syllabus in the UK. For many programmers the thought of writing in assembly code is extremly tedious. However, the pupils seem to actually quite like it. They like breaking the problems down into their absolute basic components. The excellent &lt;a href="https://peterhigginson.co.uk/LMC/"&gt;Little Man Computer&lt;/a&gt; designed by &lt;a href="https://en.wikipedia.org/wiki/Stuart_Madnick"&gt;Stuart Madnick&lt;/a&gt;  models a basic &lt;a href="https://www.bbc.co.uk/bitesize/guides/zbfny4j/revision/3"&gt;Von Neumann Arctitechture&lt;/a&gt; in a web browser. It has an instruction set of only &lt;a href="http://www.yorku.ca/sychen/research/LMC/LMCInstructions.html"&gt;9 commands&lt;/a&gt; so is easy to get started on. I've included some examples of programmes below. They can also be found on my &lt;a href="https://github.com/jpowellstm/LMC_Programmes"&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;two numbers&lt;/strong&gt; &lt;br/&gt;
Write a program that will prompt for 2 numbers, subtract the first from the second and output the answer, then subtract the second from the first and output the answer.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;INP
STA 90
INP
SUB 90
OUT
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;one to ten up&lt;/strong&gt; &lt;br/&gt;
Write a program to output the numbers 1 to 10 in ascending order.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LDA one
STA count
OUT

loopstart LDA count
          ADD one
          OUT
          STA count
          SUB ten
          BRP loopend
          BRA loopstart
loopend HLT

one     DAT 1
ten     DAT 10
count   DAT
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;one to ten down&lt;/strong&gt; &lt;br/&gt;
Write a program to output the numbers 1 to 10 in descending order.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LDA ten
STA count
OUT

loopstart LDA count
          SUB one
          BRZ loopend
          OUT
          STA count
          BRA loopstart
loopend HLT

one     DAT 1
ten     DAT 10
count   DAT
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;count in twos&lt;/strong&gt; &lt;br/&gt;
Write a program to input a number then count up to that number in steps of 2, outputting the sequence.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;INP
STA input

loopstart LDA count
          ADD two 
          OUT
          STA count
          SUB input
          BRP loopend 
          BRA loopstart
loopend HLT

one     DAT 1
two     DAT 2
input   DAT
count   DAT
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;multiply two numbers&lt;/strong&gt; &lt;br/&gt;
Write a program that will input two numbers and multiply them.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;INP
STA input1
INP
STA input2

loopstart LDA output
          ADD input2
          STA output
          LDA count
          ADD one
          STA count
          SUB input1
          BRP loopend 
          BRA loopstart

loopend LDA output
        OUT
        HLT

input1  DAT
input2  DAT
count   DAT
output  DAT 0
one     DAT 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;multiply two numbers extended&lt;/strong&gt; &lt;br/&gt;
Extend the program above that it will let the user repeatedly input and multiply pairs of numbers, only stopping if a zero is entered.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;start LDA zero
      STA output
      STA count
      INP
      BRZ end
      STA input1
      INP
      BRZ end
      STA input2

loopstart LDA output
          ADD input2
          STA output
          LDA count
          ADD one
          STA count
          SUB input1
          BRP loopend 
         BRA loopstart

loopend LDA output
        OUT
        BRA start

end HLT

input1  DAT
input2  DAT
count   DAT
output  DAT 
one     DAT 1
zero    DAT 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;convert integer to binary&lt;/strong&gt; &lt;br/&gt;
Take as input a positive whole number and output the binary equivalent&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;start INP
    STA 99

loopstart SUB one
          BRZ loopend
          ADD one
          BRZ loopend
          SUB two
          STA 99
          LDA count
          ADD one
          STA count
          LDA 99
          BRA loopstart

loopend  LDA 99
         OUT
         LDA count
         BRZ end

         STA 99
         LDA reset
         STA count
         LDA 99
         BRA loopstart

end HLT

two     DAT 2
one     DAT 1
count   DAT 0
reset   DAT 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;fibonacci&lt;/strong&gt; &lt;br/&gt;
Take as input the number of terms in the sequence to calculate after 1,1. Output the terms in the sequence 1,1,2,3,5,8,13...   &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;start INP
      STA count
      LDA one
      STA 98
      STA 97
      OUT     
      OUT

loopstart LAD 97
          ADD 98
          STA 99
          OUT
          LDA 98
          STA 97
          LDA 99
          STA 98
          LDA count
          SUB one
          STA count
          BRZ loopend
          BRA loopstart

loopend HLT

one DAT 1
count DAT 0
&lt;/code&gt;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;</content><category term="Computing in School"></category><category term="Assembly"></category></entry><entry><title>Building a CPU from the Ground up Part 8 - The Programme Counter</title><link href="/CPU%20Architecture%20-%20The%20Programme%20Counter.html" rel="alternate"></link><published>2020-05-24T10:20:00+01:00</published><updated>2020-05-24T10:20:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2020-05-24:/CPU Architecture - The Programme Counter.html</id><summary type="html">&lt;p&gt;Building a CPU from the ground up Part 8 - the programme counter&lt;/p&gt;</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;The programme counter (PC)is a complex beast. In its simplest mode 'increment', (when I is set to 1) it is just a 4 bit counter and allows the CPU to step through the 16 instructions stored in the ROM. However, if the CPU is to have any branch functions to allow loops in the code then the PC needs to be able to jump to any 4 bit number. To do this it has a load mode. When L is set to 1 the PC reads an address off the address bus and sets its value to this. The ROM will consequently then jump to this address on its next instruction. &lt;/p&gt;
&lt;iframe allowfullscreen="" height="400px" id="projectPreview" mozallowfullscreen="" scrolling="no" src="https://circuitverse.org/simulator/embed/91982" webkitallowfullscreen="" width="600px"&gt;&lt;/iframe&gt;&lt;/body&gt;&lt;/html&gt;</content><category term="Electronics"></category><category term="Electronics"></category><category term="Logic"></category></entry><entry><title>Building a CPU from the Ground up Part 7 - Binary Counters</title><link href="/CPU%20Architecture%20-%20Binary%20Counters.html" rel="alternate"></link><published>2020-05-23T10:20:00+01:00</published><updated>2020-05-23T10:20:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2020-05-23:/CPU Architecture - Binary Counters.html</id><summary type="html">&lt;p&gt;Building a CPU from the ground up part 7 - binary counters&lt;/p&gt;</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;To implement a Fetch, Decode, Execute cycle within the CPU I am going to need some binary counters. To implement these I’m going to need a JK flip flop. From this I will be able to implement a 2 BIT binary counter which I can then chain together to make a 4 BIT binary counter. These counters will be used within the control logic for the CPU.&lt;/p&gt;
&lt;iframe allowfullscreen="" height="400px" id="projectPreview" mozallowfullscreen="" scrolling="no" src="https://circuitverse.org/simulator/embed/91979" webkitallowfullscreen="" width="600px"&gt;&lt;/iframe&gt;&lt;/body&gt;&lt;/html&gt;</content><category term="Electronics"></category><category term="Electronics"></category><category term="Logic"></category></entry><entry><title>Building a CPU from the Ground up Part 6 - Memory</title><link href="/CPU%20Architecture%20-%20Memory.html" rel="alternate"></link><published>2020-05-22T10:20:00+01:00</published><updated>2020-05-22T10:20:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2020-05-22:/CPU Architecture - Memory.html</id><summary type="html">&lt;p&gt;Building a CPU from the ground up part 6 - memory&lt;/p&gt;</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;&lt;strong&gt;Registers&lt;/strong&gt;&lt;br/&gt;
These are simply made from 4 DFlipflops. There is a tri-state buffer added to the input and one to the output to allow the register to be set into either a read or a write mode. &lt;/p&gt;
&lt;p&gt;Memory is then built up as follows.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4 BIT Memory&lt;/strong&gt;&lt;br/&gt;
4 of the 1 bit DFlipFlops are strung together to make a 4 bit memory module. I will add an enable line to allow the module to “remember” data for longer than one clock cycle. When the enable line is set to 0 the outputs do not change. When the enable line is set to 1 the output will change to the current data on the next high clock.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;16 x 4 BIT Memory&lt;/strong&gt;&lt;br/&gt;
16 of the 4 BIT Memory modules are then strung together to make a memory module capable of being addressed by a 4 BIT address. 4 BITs = 16 memory locations, each of them 4 BITs in size. The input has a 1:16 demux to select which of 16 memory locations to use and the output has a 16:1 mux to select which of the memory locations to read.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RAM&lt;/strong&gt;&lt;br/&gt;
My 16x4BIT memory module essentially copies the circuitverse RAM module or at least the features of it I use. I’ve added a few extras to my RAM module. A read enable control to the to allow control over whether or not it writes to the the buffer. A clock input to it so writes and reads only occur on positive clock cycles. Also given the RAM both reads and writes to the same buffet I’ve added some additional Dflipflops on the inputs to prevent any conflicts of signals.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ROM&lt;/strong&gt;&lt;br/&gt;
The ROM is similar to the RAM. It differs in that you can easily change what it contains by typing in HEX codes. It also doesn’t need the input flipflops as it doesn’t read and write from the same places. The ROM will read from the Programme Counter and write to some specific registers.&lt;/p&gt;
&lt;iframe allowfullscreen="" height="400px" id="projectPreview" mozallowfullscreen="" scrolling="no" src="https://circuitverse.org/simulator/embed/91964" webkitallowfullscreen="" width="600px"&gt;&lt;/iframe&gt;&lt;/body&gt;&lt;/html&gt;</content><category term="Electronics"></category><category term="Electronics"></category><category term="Logic"></category></entry><entry><title>Building a CPU from the Ground up Part 5 - Sequential Logic</title><link href="/CPU%20Architecture%20-%20Sequential%20Logic.html" rel="alternate"></link><published>2020-05-18T10:20:00+01:00</published><updated>2020-05-18T10:20:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2020-05-18:/CPU Architecture - Sequential Logic.html</id><summary type="html">&lt;p&gt;Building a CPU from the ground up part 5 - sequential logic&lt;/p&gt;</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;Now the ALU is complete the next fundamental building block of a CPU is memory. This will take several forms: 
* Registers - small 4 bit chunks of memory that are used temporarily as buffers during the processor cycles. 
* ROM - read only memory, this will hold the programme code. More on the design of this in the next post.
* RAM - random access memory. This will be able to hold data more permanently than the registers during programme execution.&lt;/p&gt;
&lt;p&gt;Before any of this I will need a few building blocks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1 Bit D latch&lt;/strong&gt;&lt;br/&gt;
A latch simply remembers a state. For example, if I set the Data line the output will only be changed when the clock signal goes high. When the clock signal is low the output will not change regardless of how many times the input is changed. These latches will be the fundamental building blocks of registers and memory.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Flip flops&lt;/strong&gt;&lt;br/&gt;
I will also need two different types of flip flops. A D type and a JK Type. You can find more information about these [here] (https://docs.circuitverse.org/#/Sequential).  &lt;/p&gt;
&lt;iframe allowfullscreen="" height="400px" id="projectPreview" mozallowfullscreen="" scrolling="no" src="https://circuitverse.org/simulator/embed/88691" webkitallowfullscreen="" width="600px"&gt;&lt;/iframe&gt;&lt;/body&gt;&lt;/html&gt;</content><category term="Electronics"></category><category term="Electronics"></category><category term="Logic"></category></entry><entry><title>Building a CPU from the Ground up Part 4 - The Arithmetic Logic Unit</title><link href="/CPU%20Architecture%20-%20The%20Arithmetic%20Logic%20Unit.html" rel="alternate"></link><published>2020-05-17T10:20:00+01:00</published><updated>2020-05-17T10:20:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2020-05-17:/CPU Architecture - The Arithmetic Logic Unit.html</id><summary type="html">&lt;p&gt;Building a CPU from the ground up part 4 - the arithmetic logic unit&lt;/p&gt;</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;I’m going to recreate the ALU module that circuitverse has built in. Then according to my rules I will be able to use it in the main CPU build. The circuitverse ALU has two 4 bit inputs A and B, a 4 bit output Q and a 3 bit control line CTR. It performs the following functions on A and B depending on what CTR is set as  &lt;/p&gt;
&lt;style type="text/css"&gt;
.tg  {border-collapse:collapse;border-spacing:0;}
.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  overflow:hidden;padding:10px 5px;word-break:normal;}
.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}
.tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top}
&lt;/style&gt;
&lt;table class="tg"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class="tg-0pky"&gt;&lt;span style="font-weight:700;font-style:normal;text-decoration:none"&gt;CTR&lt;/span&gt;&lt;br/&gt;&lt;/th&gt;
&lt;th class="tg-0pky"&gt;&lt;span style="font-weight:bold"&gt;Function&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="tg-0pky"&gt;000&lt;/td&gt;
&lt;td class="tg-0pky"&gt;A&amp;amp;B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="tg-0pky"&gt;001&lt;/td&gt;
&lt;td class="tg-0pky"&gt;A|B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="tg-0pky"&gt;010&lt;/td&gt;
&lt;td class="tg-0pky"&gt;A+B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="tg-0pky"&gt;011&lt;/td&gt;
&lt;td class="tg-0pky"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="tg-0pky"&gt;100&lt;/td&gt;
&lt;td class="tg-0pky"&gt;A&amp;amp;B'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="tg-0pky"&gt;101&lt;/td&gt;
&lt;td class="tg-0pky"&gt;A|B'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="tg-0pky"&gt;110&lt;/td&gt;
&lt;td class="tg-0pky"&gt;A-B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="tg-0pky"&gt;111&lt;/td&gt;
&lt;td class="tg-0pky"&gt;A&amp;lt;B&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;A&amp;amp;B and A|B I already have. These are just the 4 bit AND and 4 bit OR modules. &lt;/p&gt;
&lt;p&gt;I’m going to use the modules for A&amp;amp;B and A|B I created to create the modules for A&amp;amp;B’ and A|B’. All I need is a 4 bit NOT gate on the input of B. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Binary adders and subtracters&lt;/strong&gt;&lt;br/&gt;
I’m not going to go into detail about the theory of binary adders here. There is plenty of that on the internet already. I’ve created a single bit binary adder and combined four of them to make a 4 bit binary adder. The adders all have a carry in bit Cin and a carry out bit Cout. The binary subtractor was constructed using the 2’s compliment method: invert one of the inputs, add them then add 1 by setting the carry in bit to 1. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Comparators&lt;/strong&gt;&lt;br/&gt;
The last module for the ALU is a comparator. Basically it outputs 1 if A&amp;lt;B and 0 otherwise. I’ve created a 1 bit comparator that has two outputs for less than and equality. When creating the 4 bit comparator I’ve used 4 1 bit comparators. Each of the 4 bits is compared and for each bit the more significant bits are checked for equality.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Putting it all together to construct the ALU&lt;/strong&gt;&lt;br/&gt;
The inputs to the ALU A and B get fed into all 7 function modules simultaneously. The 3 bit control line is fed into an 8:1 4 bit mux to select which of the functions is passed through to the output.&lt;/p&gt;
&lt;p&gt;&lt;iframe allowfullscreen="" height="400px" id="projectPreview" mozallowfullscreen="" scrolling="no" src="https://circuitverse.org/simulator/embed/88151" webkitallowfullscreen="" width="600px"&gt;&lt;/iframe&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><category term="Electronics"></category><category term="Electronics"></category><category term="Logic"></category></entry><entry><title>Building a CPU from the Ground up Part 3 - 4 BIT Logic</title><link href="/CPU%20Architecture%20-%204%20BIT%20Logic.html" rel="alternate"></link><published>2020-05-16T10:20:00+01:00</published><updated>2020-05-16T10:20:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2020-05-16:/CPU Architecture - 4 BIT Logic.html</id><summary type="html">&lt;p&gt;Building a CPU from the ground up part 3 - 4 bIT logic&lt;/p&gt;</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;Given I am constructing a 4 bit CPU all operations will be conducted on 4 bits of data, in which case I need fundamental gates that act on 4 bits. This is a simple matter of wedging multiple 1 bit gates together and using the circuit verse bit splitter tool to separate a 4 bit input into 4 separate 1 bit inputs and put them back again. Below are constructions for 4 bit versions of  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AND   &lt;/li&gt;
&lt;li&gt;OR   &lt;/li&gt;
&lt;li&gt;NOT   &lt;/li&gt;
&lt;li&gt;2:1 MUX   &lt;/li&gt;
&lt;li&gt;8:1 MUX   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Feel free to experiment with them below.   &lt;/p&gt;
&lt;iframe allowfullscreen="" height="400px" id="projectPreview" mozallowfullscreen="" scrolling="no" src="https://circuitverse.org/simulator/embed/88131" webkitallowfullscreen="" width="600px"&gt;&lt;/iframe&gt;&lt;/body&gt;&lt;/html&gt;</content><category term="Electronics"></category><category term="Electronics"></category><category term="Logic"></category></entry><entry><title>Explorations with a Rigol DS1054Z Oscilloscope Part 5 - Capacitor Discharge, Short Time Values.</title><link href="/Measuring%20Capacitor%20Discharge%20Fast%20with%20data.html" rel="alternate"></link><published>2020-05-15T10:20:00+01:00</published><updated>2020-05-15T10:20:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2020-05-15:/Measuring Capacitor Discharge Fast with data.html</id><summary type="html">&lt;p&gt;Using a Rigol scope to measure capacitor discharge.&lt;/p&gt;</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;In this tutorial we will look at the discharge rate of a capacitor using a Rigol 1054z digital oscilloscope. We are going to study a capacitor that takes a short time to discharge, in the order of a small fraction of a second. The article will mainly be concentrated on the use of the scope rather than providing a lesson in physics. We are going follow these 7 steps.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt; Select suitable values for a capacitor and resistor.&lt;br/&gt;
&lt;strong&gt;Step 2&lt;/strong&gt; Set up a circuit with a capacitor in series with a resistor to discharge through. Connect this to the scope and a power supply.&lt;br/&gt;
&lt;strong&gt;Step 3&lt;/strong&gt; Connect a signal generator to the capacitor. &lt;br/&gt;
&lt;strong&gt;Step 4&lt;/strong&gt; Set up the scope. &lt;br/&gt;
&lt;strong&gt;Step 5&lt;/strong&gt; Charge the capacitor.&lt;br/&gt;
&lt;strong&gt;Step 6&lt;/strong&gt; Observe the capacitor discharging on the scope.&lt;br/&gt;
&lt;strong&gt;Step 7&lt;/strong&gt; Compare theory with reality.     &lt;/p&gt;
&lt;p&gt;These steps are now broken down in detail.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt; &lt;br/&gt;
The time constant for a capacitor in parallel with a resistor is given by $\tau = RC$. This is the time in which the capacitor takes to get to approximately 37% of its initial voltage. $R$ is the value of the resistor in ohms. $C$ is the value of the capacitor in Farads. More information &lt;a href="https://en.wikipedia.org/wiki/RC_time_constant"&gt;here&lt;/a&gt;.  I've selected values of $C=10\mu F$ and $R=500\Omega$ giving us
$\tau = 500\times 10\times 10^{-6} = 0.005s$.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt; &lt;br/&gt;
1. Wire up a capacitor in series with a resistor. You can do this with crocodile clips and it should look something like the image below. Notice I've soldered the resistor to the capacitor to make it less of a mess of wires. Be careful not to short the terminals on the capacitor if using this method.   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt; &lt;br/&gt;
I will use a signal generator with a square wave function that will repeatedly charge and discharge the capacitor as it turns the voltage on and off. This will make it easier to capture a single cycle.  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Turn your power supply off (you can use a battery for this if you don’t have a power supply). Connect your power supply to the signal generator and set the power supply to enough to power the signal generator.&lt;/li&gt;
&lt;li&gt;Connect the output of the signal generator to the capacitor making sure the negative of the power supply is connected to the negative of the capacitor.   &lt;/li&gt;
&lt;li&gt;We now need to set the square wave frequency. The time for one cycle needs to be longer than the time it will take the capacitor to fully discharge. Given the time constant is 0.005s and this is how long it takes to get to 37% of the initial voltage lets pick a 0.005s or a frequency of about 20hz for the signal generator. We can always modify this later. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Resistor Capacitor setup image" src="./images/small-short_time_cap_circuit.jpg#small"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt; &lt;br/&gt;
I’ll be referring to the figures below when explaining this step&lt;br/&gt;
1. Turn scope on (figure 1 - 10).   &lt;br/&gt;
2. Connect a probe to channel 1 (figure 1 - 13) and set switch on the probe to 1X.   &lt;br/&gt;
3. Press the channel 1 button on the scope (figure 2 top left). Your screen should now look something like image 3 below. The menu on the right is the important part for now. To change the menu item you press the button next to it (figure 1 -12) twist the dial (figure 1 - 3, figure 3) and press the dial to select it. Make sure your values match those in the image.&lt;br/&gt;
&lt;img alt="Set up the channel on scope image" src="./images/small-chan1.png"/&gt;&lt;br/&gt;
4.  We are now going to set the vertical axis on the scope which measures voltage. At the very bottom left of the screen (figure 6 -12)  you should see a voltage value displayed next to the number 1. This shows the volts per division (the small squares on the screen). There are 8 divisions on the screen so if we set the volts per division to 500mV we should  have plenty of space to see the graph. You can do this by twisting the dial (figure 1 - 15, figure 2 bottom right).  &lt;br/&gt;
5. If you look at the top left of the screen (fig 6 - 4) you should see a time measurement which is the time per horizontal division on the screen. There are 12 horizontal divisions. If we set the number of seconds per division to 20ms this will give us an appropriately sized screen to observe the capacitor discharge. To do this turn the dial (figure 1 - 16, figure 4 bottom).  &lt;br/&gt;
6. If you look at the top of the screen to the right of the time division (figure 6 - 5) you should see a value with units MSa/s. This is the number of samples per second that the scope will capture. On its current setting the scope will take 2 Million samples per second. This is far too many for our purpose and will lead to a very noisy output. Observe the images below which show the a high sample rate left and a low sample rate right.   &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center;"&gt;&lt;/th&gt;
&lt;th style="text-align: center;"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="High sample rate image" src="./images/small-high_sample.png"/&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Low sample rate image" src="./images/small-low_sample.png"/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;To change the sample rate press the Acquire button (figure 1 - 4) your screen should look something like the image below. Notice that we can’t set the sample rate directly but we have to set the total number of samples. Using the buttons to the right of the menu and the dial (figure 1 - 3) set this to it’s lowest value.  &lt;br/&gt;
&lt;img alt="Scope acquire button image" src="./images/small-aquire.png"/&gt;&lt;br/&gt;
7. Because the capacitor is going to charge and discharge very quickly we are going to use the trigger function of the oscilloscope to capture a single charge and discharge cycle. Use the dial (figure 1 - 17, figure 5 dial). You should see the value of the trigger displayed on the top right of the screen (figure 6 - 11). Set the trigger to a few hundred mV.&lt;br/&gt;
8. To get rid of some noise you might want to turn down the intensity of the display. To do this press the channel button (figure 1 - 12) and turn the dial (figure 1 - 3). The images below show before and after intensity adjustments. &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center;"&gt;&lt;/th&gt;
&lt;th style="text-align: center;"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="High intensity image" src="./images/small-high_intensity.png"/&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Low intensity image" src="./images/small-low_intensity.png"/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt; &lt;br/&gt;
You now need to connect the scope probe to the resistor. Make sure the negative of the probe (the little wire with the crocodile clip attached) is attached to the end of the resistor that is connected to the negative of the capacitor. Clip the other end of the scope probe by pulling back on the plastic disk to reveal the the metal prong to the other end of the resistor.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt; &lt;br/&gt;
Press the run button on the scope (figure 1 - 7) and you should see a wave form. You may need to adjust the horizontal and vertical scales. Press the single button (figure 1 -8) and the scope should trigger on a single waveform. You can now adjust the controls to get a wave form to take up most of the screen.   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 6&lt;/strong&gt; &lt;br/&gt;
You are now going to use the cursor functionality to calculate the time constant for the capacitor, resistor circuit.&lt;br/&gt;
1. Press the cursor button (figure 1 - 4) and use the menu buttons (figure 1-12) to set the mode to manual. Your screen should look something like the image below.&lt;br/&gt;
&lt;img alt="Scope cursor button Image" src="./images/small-fast_cursor.png"/&gt;&lt;br/&gt;
2. You now have access to four cursors. Two in the X direction, AX and BX and two in the Y direction AY and BY. Press the dial (figure 1 - 3) to alternate between them and turn the dial to adjust them. You will need to press the second menu button down (figure 1-12) to alternate between x and y axes. You are trying to get the lower Y cursor to be 37% of the upper Y cursor. Then alter the X cursors to read off the time values. When you are done your screen should look something like the image below. &lt;br/&gt;
3. The difference between the time values can be read off the screen as BY - AY. Compare this with the time constant for the circuit which should be 5ms.  &lt;br/&gt;
&lt;img alt="Cursor calculation image" src="./images/small-fast_calculation.png"/&gt; &lt;/p&gt;
&lt;p&gt;Figure 1
&lt;img alt="Rigol controls image" src="./images/small-Rigolfigure1.png"/&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center;"&gt;Figure 2&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Figure 3&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Figure 4&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Figure 5&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Controls 2 image" src="./images/small-Rigolfigure2.png"/&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Controls 3 image" src="./images/small-Rigolfigure3.png"/&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Controls 4 image" src="./images/small-Rigolfigure4.png"/&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Controls 5 image" src="./images/small-Rigolfigure5.png"/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Figure 6
&lt;img alt="Rigol screen image" src="./images/small-Rigolfigure6.png"/&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><category term="Electronics"></category><category term="Electronics"></category><category term="Rigol"></category><category term="Oscilloscope"></category></entry><entry><title>Python for School Level Maths and Science</title><link href="/Python%20for%20school%20level%20maths.html" rel="alternate"></link><published>2020-05-12T10:20:00+01:00</published><updated>2020-05-12T10:20:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2020-05-12:/Python for school level maths.html</id><summary type="html">&lt;p&gt;Python tools and libraies for school level maths and science.&lt;/p&gt;</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;Python is developing as an invaluable tool for scientists and mathematician and has some really excellent tools available. I’ve put a few of these tools together in an ipython notebook. It is aimed at pupils studying A-level maths in the UK. It requires no programming experience to make some use out of it. It has examples on how to use python for the following things.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Symbolic algebraic manipulation&lt;/li&gt;
&lt;li&gt;Calculus&lt;/li&gt;
&lt;li&gt;Solving equations&lt;/li&gt;
&lt;li&gt;Using mathematical and scientific constants&lt;/li&gt;
&lt;li&gt;Vectors and matrices&lt;/li&gt;
&lt;li&gt;Complex numbers&lt;/li&gt;
&lt;li&gt;Hyperbolic functions&lt;/li&gt;
&lt;li&gt;Units&lt;/li&gt;
&lt;li&gt;Prefixes&lt;/li&gt;
&lt;li&gt;Error bounds&lt;/li&gt;
&lt;li&gt;Basic data processing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This document is not intended to be comprehensive, but more an introduction to the possibilities that some programming experience can give you. &lt;/p&gt;
&lt;p&gt;The easiest way to run the document is in your webbrowser by using a Google Colab Notebook. Follow these steps&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First install the colab notebook app. In google drive I do this by clicking the "new - more - connect more apps" and then searching for "colab"&lt;/li&gt;
&lt;li&gt;Go to this &lt;a href="https://drive.google.com/drive/folders/14G9E5jHA3GY8uqlakuUK2JoWhQue0rAy?usp=sharing"&gt;link&lt;/a&gt;.
You should be able to right click on the document “Python for mathematicians and scientists” and select “open with” and there should be an option for "colab notebook".&lt;/li&gt;
&lt;li&gt;Everything is then explained in the document.&lt;/li&gt;
&lt;li&gt;If you want to edit the document you will need to make a copy of it to your own Google Drive.
Any comments or suggestions, please use the comments below.&lt;/li&gt;
&lt;li&gt;Alternatively you can get a copy of the document from my &lt;a href="https://github.com/jpowcode/python_school_level_maths"&gt;Github&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;/body&gt;&lt;/html&gt;</content><category term="Computing in School"></category><category term="Python"></category></entry><entry><title>Building a CPU from the Ground up Part 2 - Multiplexers and Demultilexers</title><link href="/CPU%20Architecture%20-%20Multiplexers%20and%20Demultilexers%20(muxes%20and%20demuxes).html" rel="alternate"></link><published>2020-05-06T10:20:00+01:00</published><updated>2020-05-06T10:20:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2020-05-06:/CPU Architecture - Multiplexers and Demultilexers (muxes and demuxes).html</id><summary type="html">&lt;p&gt;Building a CPU from the ground up part 1 - multiplexors and demultiplexerse (muxes and demuxes)&lt;/p&gt;</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;h3&gt;Multiplexors&lt;/h3&gt;
&lt;p&gt;A multiplexer basically selects one of multiple inputs to be fed to a single output. For example, if there are two modules connected to an output display a multiplexer will select which one is displayed. In the 2:1 mux (for short) below when S is set to 0 Input 1 passes through to the output, when S is set to 1, Input 2 passes through to the output. The 4:1 works in the same way but it has two selectors which are set using binary 00, 01, 10, 11 to allow inputs from 1 to 4 to pass through to the output Q. When building the 4:1 mux I have used the circuitverse 2:1 mux modules and when building the 8:1 mux I’ve used the 4:1 and 2:1 muxes. &lt;/p&gt;
&lt;h3&gt;Demultiplexors&lt;/h3&gt;
&lt;p&gt;A demultiplexor basically does the reverse of a multiplexor. It takes one input and using select lines passes it through to one of a selection of multiple outputs. Again I’ve used the circuitverse module for the 1:2 demux when creating the 1:4 demux and so on for the 1:8 demux and 1:16 demux. Feel free to experiment with them below.&lt;/p&gt;
&lt;iframe allowfullscreen="" height="400px" id="projectPreview" mozallowfullscreen="" scrolling="no" src="https://circuitverse.org/simulator/embed/86347" webkitallowfullscreen="" width="600px"&gt;&lt;/iframe&gt;&lt;/body&gt;&lt;/html&gt;</content><category term="Electronics"></category><category term="Electronics"></category><category term="Logic"></category></entry><entry><title>Building a CPU from the Ground up Part 1 - Introduction and Fundamental Gates</title><link href="/CPU%20Architecture%20-%20fundamental%20gates.html" rel="alternate"></link><published>2020-05-06T10:20:00+01:00</published><updated>2020-05-06T10:20:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2020-05-06:/CPU Architecture - fundamental gates.html</id><summary type="html">&lt;p&gt;Building a CPU from the ground up Part 1 - introduction and fundamental gates&lt;/p&gt;</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;I’ve been reading a bit about retro computers recently and wondered how easy it would be to design and build one from scratch. To aid me in this endeavour I thought I would try to simulate one in one of the many online logic simulation tools. My tool of choice is &lt;a href="https://circuitverse.org/"&gt;circuitverse&lt;/a&gt; It has a nice functional interface and has some fairly sophisticated features. I’m going to set myself some rules for the build:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rule 1&lt;/strong&gt;: everything must be built from a universal logic gate, nor or nand.&lt;br/&gt;
&lt;strong&gt;Rule 2&lt;/strong&gt;: once I’ve built a module I will then allow myself to use the circuitverse equivalent in other modules, for example once I’ve built an AND gate I will then use the AND gate module from circuitverse.  &lt;/p&gt;
&lt;p&gt;There are some CPU designs already on circuitverse, but what I'm interested in doing here is documenting the construction from the basics to a working CPU.  &lt;/p&gt;
&lt;p&gt;I’m not going to go into loads of detail on the theory of the design. There are stacks of resources out on the interwebs which you can search for if you want to find out more.  &lt;/p&gt;
&lt;h3&gt;Design Parameters&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I’m going to start with a NOR gate. Most designs I’ve seen seem to use a NAND gate, so let’s be different. It only really matters for the first stage anyway, after that I will mainly be using circuitverse modules.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I’m going to construct a 4 bit CPU. 8 bits seemed a bit too many to make it practical to construct all the component parts. What can be done with a 4 bit CPU I'm not sure yet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I aim to finish with a arithmetic logic unit, separate RAM and ROM, memory registers and control logic.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Notation&lt;/h3&gt;
&lt;p&gt;I will use the following conventions when labelling designs.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I for single bit inputs.   &lt;/li&gt;
&lt;li&gt;Q for outputs.  &lt;/li&gt;
&lt;li&gt;A and B for 4 bit inputs.  &lt;/li&gt;
&lt;li&gt;D for data lines.  &lt;/li&gt;
&lt;li&gt;E for enable lines, i.e. to turn modules on or off.  &lt;/li&gt;
&lt;li&gt;S for select lines.  &lt;/li&gt;
&lt;li&gt;CLK for the clock signal.  &lt;/li&gt;
&lt;li&gt;Multiples will be indicated with subscripts.  &lt;/li&gt;
&lt;li&gt;A prime ‘ will be used to denote NOT so Q’ is NOT(Q).  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Basic fundamental gates&lt;/h3&gt;
&lt;p&gt;To start with I’m going to need the following fundamental logic gates: AND, OR, NAND, NOT, XOR, XNOR. I first created a NOT gate as it quite useful in creating the AND and OR gates, which in turn get used for the NAND and NOR and so on. You can see all the fundamental gates in the window below. The window is interactive so feel free to change the inputs and observe the output.&lt;/p&gt;
&lt;h3&gt;Multiple input fundamental gates&lt;/h3&gt;
&lt;p&gt;I am also going to need several multiple input gates, for example an AND gate with 4 inputs. Circuitverse has nice modules for these, but I need to create them from what I’ve already got. It is fairly straightforward to chain together 2 AND gates to make a 3 input AND gate for example. Below you can see the constructions for the multiple input gates I’ve used. After creating the 4 input AND I’ve then used the circuitverse version of this in the construction of the 5 input AND as per rule 2.&lt;/p&gt;
&lt;iframe allowfullscreen="" height="400px" id="projectPreview" mozallowfullscreen="" scrolling="no" src="https://circuitverse.org/simulator/embed/86237" webkitallowfullscreen="" width="600px"&gt;&lt;/iframe&gt;&lt;/body&gt;&lt;/html&gt;</content><category term="Electronics"></category><category term="Electronics"></category><category term="Logic"></category></entry><entry><title>Explorations with a Rigol DS1054Z Oscilloscope Part 4 - Speed of Sound</title><link href="/Speed%20of%20sound.html" rel="alternate"></link><published>2020-05-06T10:20:00+01:00</published><updated>2020-05-06T10:20:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2020-05-06:/Speed of sound.html</id><summary type="html">&lt;p&gt;Basic Functions of the Rogol 1054Z scope&lt;/p&gt;</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;The challenge is to measure the speed of sound in air using an oscilloscope. This is a typical A-level Physics experiment. I found this quite a tricky one to get right from a technical perspective. Possibly due to my equipment, maybe my technique. If you have any suggestions for how to improve please use the comments below. The procedure is as follows:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: Plug a speaker into a signal generator and set it to something in the few thousand hz range.&lt;br/&gt;
&lt;strong&gt;Step 2&lt;/strong&gt;: Plug the signal generator into one of the scope channels.&lt;br/&gt;
&lt;strong&gt;Step 3&lt;/strong&gt;: Plug a microphone into the scope and set it in line with the speaker about a meter away.&lt;br/&gt;
&lt;strong&gt;Step 4&lt;/strong&gt;: Set up the scope to capture the waveform of both the signal generator and the microphone.&lt;br/&gt;
&lt;strong&gt;Step 5&lt;/strong&gt;: Move the speaker or microphone back and for until both waves are in phase.&lt;br/&gt;
&lt;strong&gt;Step 6&lt;/strong&gt;: Move the microphone and speaker apart until they are in phase again. Measure this distance.&lt;br/&gt;
&lt;strong&gt;Step 7&lt;/strong&gt;: Compare theory with reality.  &lt;/p&gt;
&lt;p&gt;More details now follow:   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: &lt;br/&gt;
This is fairly straight forward. See the image below for my cheapo Ebay signal generator setup. It's not the best bit of kit: the signal is a bit weak and not very clean, but it will illustrate the process. I recommend using a decent quality signal generator if you can get access to one. You should also notice that I've kept the wires short and put 50 ohm resistor in series with the signal generator. Some Google searches recommended these adjustments and I seemed to get a better signal so I stuck with it. You should hear a sound that will probably be fairly annoying. The sound from my setup is a bit quiet so any outside noises affect the signal. A better signal generator should improve this.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Signal generator and speaker setup" src="./images/small-speaker.jpg#small"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: &lt;br/&gt;
Again fairly straight forward, just take one of the scopes probes, flick the switch on the probe to 1x,  and connect the ground (crocodile clip on short wire) to one terminal of the speaker and the probe tip to the other end of the speaker. You can see this in the image above.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: &lt;br/&gt;
This is where it all started to get complicated (at least it did for me). I tried several microphones and could not get a reading on the scope. It looks like the voltage level is too low and noise levels too high to see the waveform adequately. After doing some internet research I discovered that not all microphones are created equally. It seems that an active microphone that contains some amplification circuitry is required to get this experiment to work well or at all really. (If anyone has suggestions to the contrary then please comment below). As a hack that gets this working with no extra spending I discovered that the humble mobile phone contains everything required. All you need is an old set of headphones you don’t mind cutting the headphones off. After cutting the headphones off and exposing the wires  connect the ground of the scope probe and the probe tip to each of the exposed wires. Connect this cable to your phone.  &lt;/p&gt;
&lt;p&gt;I’m using an android phone with an app called &lt;a href="https://play.google.com/store/apps/details?id=net.vkrun.microphone_amplifier&amp;amp;hl=en_GB"&gt;microphone amplifier&lt;/a&gt;. Set the audio gain to about 16 (you can experiment with this later) turn the speaker on and hit the on button in the middle. Make a noise and you should see a wave form appear on the mobile phone screen. See example image below.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mobile phone amplifier screen" src="./images/android_amp.png#small"/&gt; &lt;br/&gt;
However, for good experimental results I recommend a decent quality active microphone.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt; &lt;br/&gt;
You should now have the signal generator outputting a sound on the speaker, the scope connected to the speaker on channel 1 and the scope connected to the mobile phone on channel 2. The phone should have a waveform on the screen when you make a noise. &lt;/p&gt;
&lt;p&gt;Now go to the scope controls. I Will use the figures at the bottom of this post to reference the controls. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make sure channel 1 is turned on and for now channel 2 is turned off by pressing the buttons next to the channel numbers (figure 1 - 12).  &lt;/li&gt;
&lt;li&gt;Make sure the settings are the same as in the image below. To change the menu item you press the button next to it (figure 1 -12) twist the dial (figure 1 - 3, figure 3) and press the dial to select it. Make sure your values match those in the image.
&lt;img alt="Channel 1 setup image" src="./images/small-speed_sound_1.png"/&gt;&lt;/li&gt;
&lt;li&gt;Press the Auto button (figure 1 - 6 ) You should now see the output from the signal generator, which should be a nice steady sine wave. &lt;/li&gt;
&lt;li&gt;My signal generator was not giving me a very clean waveform, especially when it was connected to a speaker. (Depending on your equipment you may be able to omit this step). I setup the scope to average the waveforms. You can do this by pressing the Aquire button (figure 1 - 4) and setting up the like the image below. You can experiment with the number of averages. &lt;/li&gt;
&lt;li&gt;You can get the scope to measure this frequency of this waveform by pressing the button on the left of the screen (figure 1 - 1). You should see this measurement displayed at the bottom of the screen and it should correspond closely with the frequency you set on the signal generator. 
&lt;img alt="Channel 1 setup image" src="./images/small-speed_sound_2.png"/&gt;&lt;/li&gt;
&lt;li&gt;Now we need to setup channel 2. Press the button to turn on channel 2 (figure 1 - 12). Turn the switch on the probe to 1X and setup the right hand menu like the image below.&lt;br/&gt;
&lt;img alt="Channel 1 setup image" src="./images/small-speed_sound_3.png"/&gt;&lt;br/&gt;
Pay special attention to make sure the channel is set to AC coupling. You will probably need to set the vertical voltage range by turning the dial (figure 1 - 15, figure 2 - bottom). You will probably also need to set up averaging like the previous step. You should now see both traces like the image above.   &lt;/li&gt;
&lt;li&gt;We now need to adjust the position of the waveforms in the vertical direction so that the bottom of one waveform just touches the top of the other waveform. You can do this by selecting the channel you want by pressing the button next to the channel number (figure 1 - 12) then turning the dial (figure 1 - 15, figure 2 - top). &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt; &lt;br/&gt;
Move the microphone and or speaker away from each other until the trough of one waveform touches the peak of the other waveform. Your screen should look something like the image below. Record the position of the microphone and speaker.
&lt;img alt="Channel 1 setup image" src="./images/small-speed_sound_4.png"/&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 6&lt;/strong&gt; &lt;br/&gt;
Move the microphone and or speaker away from each other until and watch the screen, you should be able to match the trough of one wave to the next peak of the other wave. Record the positions of the microphone and speaker again. The difference between the position in the previous step to the position in this step should be one wavelength.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 7&lt;/strong&gt; &lt;br/&gt;
You can now calculate the speed of sound by multiplying the frequency by the wavelength. &lt;/p&gt;
&lt;p&gt;Figure 1
&lt;img alt="Rigol controls image" src="./images/small-Rigolfigure1.png"/&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center;"&gt;Figure 2&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Figure 3&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Figure 4&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Figure 5&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Controls 2 image" src="./images/small-Rigolfigure2.png"/&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Controls 3 image" src="./images/small-Rigolfigure3.png"/&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Controls 4 image" src="./images/small-Rigolfigure4.png"/&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Controls 5 image" src="./images/small-Rigolfigure5.png"/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Figure 6
&lt;img alt="Rigol screen image" src="./images/small-Rigolfigure6.png"/&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><category term="Electronics"></category><category term="Electronics"></category><category term="Rigol"></category><category term="Oscilloscope"></category></entry><entry><title>Explorations with a Rigol DS1054Z Oscilloscope Part 3- Using an Android Signal Generator</title><link href="/Android%20signal%20generator.html" rel="alternate"></link><published>2020-04-25T10:20:00+01:00</published><updated>2020-04-25T10:20:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2020-04-25:/Android signal generator.html</id><summary type="html">&lt;p&gt;Using an Android signal generator with the Rigol 1054Z scope&lt;/p&gt;</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;Function/signal generators can be quite expensive, but there are some alternatives that can provide some interesting learning experiences. In my first post I talked about a cheap ebay function generator available for a few pounds. &lt;/p&gt;
&lt;p&gt;An alternative is to use a mobile phone app.  I have an Android phone and I used an app called &lt;a href="https://play.google.com/store/apps/details?id=com.keuwl.functiongenerator&amp;amp;hl=en_GB"&gt;Function Generator&lt;/a&gt; by Keuwsolf. I butchered a headphone cable and connected the scope probe to it. Follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cut the headphones off and expose the wires. &lt;/li&gt;
&lt;li&gt;Mark which cable is the left and which is the right headphone.  &lt;/li&gt;
&lt;li&gt;Pick either the left or the right headphone and connect the ground (crocodile clip on the probe) to one wire and the probe to the other wire.   &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The app is pretty easy to use and can provide a various different signals to explore on the scope. The main stumbling block is to make sure the output is set correctly. For example the sliders tell you which of the left of the right outputs each channel is on. The buttons left and right turn on the left and/or right outputs and the out button turns the output on or off. So if you have channel 1 setup and want to output only this on the left output your buttons should be set like this.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Android screen shot image" src="./images/small-func_gen_screenshot.png"/&gt;&lt;/p&gt;
&lt;p&gt;You can use this app to do all of the same exercises as in the first post.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><category term="Electronics"></category><category term="Electronics"></category><category term="Rigol"></category><category term="Oscilloscope"></category></entry><entry><title>Explorations with a Rigol DS1054Z Oscilloscope Part 2 - Capacitor Discharge, Long Time Values</title><link href="/Measuring%20Capacitor%20Discharge.html" rel="alternate"></link><published>2020-04-23T10:20:00+01:00</published><updated>2020-04-23T10:20:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2020-04-23:/Measuring Capacitor Discharge.html</id><summary type="html">&lt;p&gt;Using a Rigol scope to measure capacitor discharge.&lt;/p&gt;</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;In this tutorial we will look at the discharge rate of a capacitor using a Rigol 1054z digital oscilloscope. We are going to study a capacitor that takes a long time to discharge, in the order of 10’s of seconds. The article will mainly be concentrated on the use of the scope rather than providing a lesson in physics. We are going follow these 6 steps.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt; Select suitable values for a capacitor and resistor.&lt;br/&gt;
&lt;strong&gt;Step 2&lt;/strong&gt; Set up a circuit with a capacitor in parallel with a resistor to discharge through. Connect this to the scope and a power supply.&lt;br/&gt;
&lt;strong&gt;Step 3&lt;/strong&gt; Set up the scope. &lt;br/&gt;
&lt;strong&gt;Step 4&lt;/strong&gt; Charge the capacitor.&lt;br/&gt;
&lt;strong&gt;Step 5&lt;/strong&gt; Observe the capacitor discharging on the scope.&lt;br/&gt;
&lt;strong&gt;Step 6&lt;/strong&gt; Compare theory with reality.     &lt;/p&gt;
&lt;p&gt;These steps are now broken down in detail.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt; &lt;br/&gt;
The time constant for a capacitor in parallel with a resistor is given by $\tau = RC$. This is the time in which the capacitor takes to get to approximately 37% of its initial voltage. $R$ is the value of the resistor in ohms. $C$ is the value of the capacitor in Farads. More information &lt;a href="https://en.wikipedia.org/wiki/RC_time_constant"&gt;here&lt;/a&gt; . Ideally we’d like to see the value of $\tau$ to be about 10 seconds to give us enough time to observe this on the scope. Selecting values of $C=1000\mu F$ and $R=10k$ gives us
$\tau = 10\times 10^{3}\times 1000\times 10^{-6} = 10s$.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt; &lt;br/&gt;
1. Wire up a capacitor in parallel with a resistor. You can do this with crocodile clips and it should look something like the image below. Be careful not to short the terminals on the capacitor if using this method. &lt;br/&gt;
2. Turn your power supply off (you can use a battery for this if you don’t have a power supply). Connect your power supply to the capacitor making sure the negative of the power supply is connected to the negative of the capacitor. A setting of about 5 Volts on the power supply is sufficient. When you turn the power supply on it will charge the capacitor. A few seconds is fine to fully charge the capacitor. When you turn the power supply off the capacitor will discharge through the resistor and this is what we will be measuring.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Resistor Capacitor setup image" src="./images/small-res_cap.jpg#small"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt; &lt;br/&gt;
I’ll be referring to the figures below when explaining this step&lt;br/&gt;
1. Turn scope on (figure 1 - 10).   &lt;br/&gt;
2. Connect a probe to channel 1 (figure 1 - 13) and set switch on the probe to 1X.   &lt;br/&gt;
3. Press the channel 1 button on the scope (figure 2 top left). Your screen should now look something like image 3 below. The menu on the right is the important part for now. To change the menu item you press the button next to it (figure 1 -12) twist the dial (figure 1 - 3, figure 3) and press the dial to select it. Make sure your values match those in the image.&lt;br/&gt;
&lt;img alt="Set up the channel on scope image" src="./images/small-chan1.png"/&gt;&lt;br/&gt;
4.  We are now going to set the vertical axis on the scope which measures voltage. At the very bottom left of the screen (figure 6 -12)  you should see a voltage value displayed next to the number 1. This shows the volts per division (the small squares on the screen). We are going to charge the capacitor to 5v. There are 8 divisions on the screen so if we set the volts per division to 1v we should  have plenty of space to see the graph. You can do this by twisting the dial (figure 1 - 15, figure 2 bottom right).  &lt;br/&gt;
5. If you look at the top left of the screen (fig 6 - 4) you should see a time measurement which is the time per horizontal division on the screen. There are 12 horizontal divisions. If we set the number of seconds per division to 5s this will give a minute to observe the capacitor discharge. To do this turn the dial (figure 1 - 16, figure 4 bottom).  &lt;br/&gt;
6. If you look at the top of the screen to the right of the time division (figure 6 - 5) you should see a value with units MSa/s. This is the number of samples per second that the scope will capture. On its current setting the scope will take 2 Million samples per second. This is far too many for our purpose and will lead to a very noisy output. Observe the images below which show the a high sample rate left and a low sample rate right. &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center;"&gt;Image 1&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Image 2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="High sample rate image" src="./images/small-high_sample.png"/&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Low sample rate image" src="./images/small-low_sample.png"/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;To change the sample rate press the Acquire button (figure 1 - 4) your screen should look something like the image below. Notice that we can’t set the sample rate directly but we have to set the total number of samples. Using the buttons to the right of the menu and the dial (figure 1 - 3) set this to it’s lowest value.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Scope acquire button image" src="./images/small-aquire.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt; &lt;br/&gt;
1. You now need to connect the scope probe to the resistor. Make sure the negative of the probe (the little wire with the crocodile clip attached) is attached to the end of the resistor that is connected to the negative of the capacitor. Clip the other end of the scope probe by pulling back on the plastic disk to reveal the the metal prong to the other end of the resistor.&lt;br/&gt;
2. Now turn your power supply on briefly, a few seconds should do. To observe the voltage value more directly you can also connect a multimeter to the same place as the scope probe. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt; &lt;br/&gt;
At first you won’t see anything on the scope screen. This is perfectly normal, it could take a few tens of seconds before you see anything. When the scope has collected enough data you will begin to see the trace. Just before the trace reaches the right hand edge of the screen press the stop button (figure 1 -7). If you don’t do this you will loose the data for the first part of the trace.   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 6&lt;/strong&gt; &lt;br/&gt;
You are now going to use the cursor functionality to calculate the time constant for the capacitor, resistor circuit.&lt;br/&gt;
1. Press the cursor button (figure 1 - 4) and use the menu buttons (figure 1-12) to set the mode to manual. Your screen should look something like the image below.&lt;br/&gt;
&lt;img alt="Scope cursor button Image" src="./images/small-cursor.png"/&gt;&lt;br/&gt;
2. You now have access to four cursors. Two in the X direction, AX and BX and two in the Y direction AY and BY. Press the dial (figure 1 - 3) to alternate between them and turn the dial to adjust them. You will need to press the second menu button down (figure 1-12) to alternate between x and y axes. You are trying to get the lower Y cursor to be 37% of the upper Y cursor. Then alter the X cursors to read off the time values. When you are done your screen should look something like the image below. &lt;br/&gt;
3. The difference between the time values can be read off the screen as BY - AY. Compare this with the time constant for the circuit which should be 10s.&lt;br/&gt;
&lt;img alt="Cursor calculation image" src="./images/small-calculation.png"/&gt; &lt;/p&gt;
&lt;p&gt;Other tutorials in the series look at a fast discharge capacitor, resistor circuit which requires the use of a signal generator and also how to download the data from the scope for use in an spreadsheet application. This requires the scope to be network connected.&lt;/p&gt;
&lt;p&gt;Figure 1
&lt;img alt="Rigol controls image" src="./images/small-Rigolfigure1.png"/&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center;"&gt;Figure 2&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Figure 3&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Figure 4&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Figure 5&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Controls 2 image" src="./images/small-Rigolfigure2.png"/&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Controls 3 image" src="./images/small-Rigolfigure3.png"/&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Controls 4 image" src="./images/small-Rigolfigure4.png"/&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Controls 5 image" src="./images/small-Rigolfigure5.png"/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Figure 6
&lt;img alt="Rigol screen image" src="./images/small-Rigolfigure6.png"/&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><category term="Electronics"></category><category term="Electronics"></category><category term="Rigol"></category><category term="Oscilloscope"></category></entry><entry><title>Explorations with a Rigol DS1054Z Oscilloscope Part 1- Basic Functions</title><link href="/Basic%20functions.html" rel="alternate"></link><published>2020-04-22T10:20:00+01:00</published><updated>2020-04-22T10:20:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2020-04-22:/Basic functions.html</id><summary type="html">&lt;p&gt;Basic Functions of the Rogol 1054Z scope&lt;/p&gt;</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;I recently acquired a Rigol DS1054Z oscilloscope. On researching the internet 
for tutorials I was disappointed, by the apparat lack of them. There are lots 
of tutorials on other scopes and generic tutorials but not much specific to the
Rigol. So decided I'd  better write some myself. &lt;/p&gt;
&lt;p&gt;I'm planning a series of blog posts as I find out the
things I can do with this scope. Lets make a start.&lt;/p&gt;
&lt;p&gt;I'll be using these reference images to describe where controls are and where things are on the screen.&lt;/p&gt;
&lt;p&gt;Figure 1
&lt;img alt="Rigol controls image" src="./images/small-Rigolfigure1.png"/&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center;"&gt;Figure 2&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Figure 3&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Figure 4&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Figure 5&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Controls 2 image" src="./images/small-Rigolfigure2.png"/&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Controls 3 image" src="./images/small-Rigolfigure3.png"/&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Controls 4 image" src="./images/small-Rigolfigure4.png"/&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;img alt="Controls 5 image" src="./images/small-Rigolfigure5.png"/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Figure 6
&lt;img alt="Rigol screen image" src="./images/small-Rigolfigure6.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Using the Test signal&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First off I'm going to test the scope works by using the inbuilt test
signal. The scope outputs a basic square wave function on the metal
terminals at the bottom right of the front panel (fig 1 - 18). Follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Connect the probe to channel 1.&lt;/li&gt;
&lt;li&gt;Make sure the switch on the probe is set to 1x.&lt;/li&gt;
&lt;li&gt;Connect the black ground clip of the probe to the bottom metal
   connector of the test signal (Figure 1 - 18).&lt;/li&gt;
&lt;li&gt;The probe comes with a plastic clip to allow it to stay connected to things. Insert the test clip onto the end of the probe and attach it to the
   top metal connector of the test signal.&lt;/li&gt;
&lt;li&gt;Press the Auto button (Figure 1 - 6). You should see a square wave pattern on the screen like the image below.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Square wave image" src="./images/small-rigol_blog1_test_sig.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Using a signal generator&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;There isn’t a lot more we can do with the scope until we can provide it with some different signals. A signal generator is the perfect job for this, but they can be quite expensive (although if you have this scope maybe you also have a signal generator). However, there are some cheap alternatives available from ebay that can provide some interesting learning experiences. I won’t put a link here as they are likely to change, but they look a bit like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sig gen image" src="./images/small-sig-gen.jpg"/&gt;{width=50%}&lt;/p&gt;
&lt;p&gt;They are not going to be the greatest bit of kit in the world (as we will see later on), but if you are just learning then they are great for the money. Alternatively, you can use a mobile phone app which will be described in the next post in this series. Now we will learn about some of the scopes features by connecting it to a signal generator. I will be using the ebay cheapo here. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: connect signal generator to scope&lt;br/&gt;
1. Connect it up to a power supply or a battery. &lt;br/&gt;
2. Feed some wires into the output terminals.&lt;br/&gt;
3. Connect the scope to these, the negative of the scope probe is the little wire with the crocodile clip attached.&lt;br/&gt;
4. Set the switch on the scope to 1X.&lt;br/&gt;
5. Set a frequency in the mid range of the signal generator. It doesn’t matter for now.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: find trace on scope&lt;br/&gt;
1. The easiest way to see the signal on the scope is to press the Auto button (figure 1 - 6). You should now see a trace on the scope. There will be more on manually setting the window parameters in later posts. For now the Auto button will work just fine.&lt;br/&gt;
2. The scope has several measurement functions accessed through buttons on the left of the screen (figure 1 - 1). Press the frequency button and you should see this value displayed on the bottom of the screen which should correspond to the value you set on the signal generator. See the image below. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Sine wave image" src="./images/small-sine_wave.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: explore limits of the signal generator&lt;br/&gt;
1. Set the signal generator to its lowest setting.   &lt;br/&gt;
2. Press the Auto button on the scope (figure 1 - 6).&lt;br/&gt;
3. You will probably find that the Auto setting struggles to find the wave form at low such low frequencies. Try turning the horizontal scale dial (figure 1-16, figure 4 bottom) in small increments until you see the waveform. You might also need to play with the vertical settings (figure 1- 15, figure 2). The wave form takes a while to update at low frequencies. More on manually setting the window in future posts.&lt;br/&gt;
4. Now change the setting to a square wave and set it to the highest possible frequency.&lt;br/&gt;
5. Press the Auto button (figure 1 - 6). You should a wave form like the upper image below.
6. Press the measurement button on the left (figure 1-1) for rise time and also width. Ideally for a square wave the rise time should as small a fraction of the width as possible. The signal generator is really only estimating a square wave by adding together sine waves. At high frequencies it can’t do this very well. If you look at the lower image below at the bottom of the screen you can see that the rise time is more than a quarter of the width for this waveform.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Dodgy square image" src="./images/small-dodgy_square.png"/&gt;
&lt;img alt="Rise time image" src="./images/small-rise_time.png"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;: moving the trace on the screen&lt;br/&gt;
1. Set the signal generator to any reasonable setting.&lt;br/&gt;
2. Press the Auto button so you can see the trace.&lt;br/&gt;
3. Sometimes we would like to zoom in horizontally to a trace. We can do this by turning the dial (figure 1 - 16, figure 4 bottom).&lt;br/&gt;
4. We might also want to move the trace left to right, for example to fit it with another trace. We can do this by tuning the dial (figure 1 - 16, figure 4 top ).&lt;br/&gt;
5. If we want to move the trace in the vertical direction we can do so by twisting dial (figure 1 - 15, figure 2 top).&lt;br/&gt;
6. We can also change the vertical scale by turning the dial (figure 1 -15, figure 4 bottom).&lt;br/&gt;
7. If you look at the bottom of the screen (figure 6 - 12) you should see the number of volts per division. There are divisions vertically on the screen so multiply this number by 8 to get the full difference from bottom to top of the screen. &lt;br/&gt;
8. If you look at the top of the screen (figure 6 - 5) you will see the time division. There are 12 divisions horizontally so multiply this number by 12 to get the full difference in time between the left and right of the screen.  &lt;/p&gt;
&lt;p&gt;In following posts we will look at a capacitor discharging and also calculate the speed of sound. If you have any other suggestions for things you’d like to see then use the comments below.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</content><category term="Electronics"></category><category term="Electronics"></category><category term="Rigol"></category><category term="Oscilloscope"></category></entry><entry><title>Non Transitive Dice</title><link href="/non-transitive-dice.html" rel="alternate"></link><published>2020-04-20T22:24:00+01:00</published><updated>2020-04-20T22:24:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2020-04-20:/non-transitive-dice.html</id><summary type="html">&lt;p class="first last"&gt;Making a set of special dice&lt;/p&gt;
</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;A friend of mine wanted to use some special dice called non transitive dice
with his maths class at school to help with the teaching of probability.
As et of three dice are considered to be non transitive if the probability
that the first dice rolls higher than the second is more than half, the probability
that the second rolls more than the third is more than half but the probability
that the third rolls more than the first is not more than half. There is a
more detailed explanation &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Nontransitive_dice"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;He couldn't find any at a reasonable enough price to enable him to buy
enough for a class of 30 pupils to experiment with so he asked me if
could make some. I decided to give it a go.&lt;/p&gt;
&lt;p&gt;First problem: how to make small cubes with rounded edges with enough
accuracy that they roll well and are not biased.&lt;/p&gt;
&lt;p&gt;After bit of experimenting with cutting them out of wood with a table
saw and sanding the edges I decided this was neither going to be easy
or accurate. I toyed with the idea of laser cutting or using a CNC machine,
but really I wanted a solution that was not going to take a huge amount of time.
eBay to the rescue: I bought some blank dice from
China. A bag of 20 odd for not much money. First problem solved.&lt;/p&gt;
&lt;p&gt;Second problem: how to mark the dice with the numbers accurately enough that
they look professional.&lt;/p&gt;
&lt;p&gt;I tried marking out dots like on a traditional dice but again, getting accuracy was
difficult. Any slight inaccuracy was very noticeable. Then I tried hand
writing the numbers. This gave a much more natural look. Second problem
solved.&lt;/p&gt;
&lt;p&gt;Third problem: Just writing on the dice with permanent marker tended to rub
off over time. To solve this I first wrote on the dice with a marker, then
went over the marker with a small engraving tool in a Dremel. This took
the shiny surface off the dice. I finished by going over these again with
the permanent marker.&lt;/p&gt;
&lt;p&gt;Here is the result:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external image-reference" href="/images/nt_dice.jpg"&gt;&lt;img alt="alternate text" class="align-middle" src="images/nt_dice.jpg" style="width: 400px;"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content><category term="Making"></category><category term="Making"></category></entry><entry><title>Glimpses</title><link href="/glimpses.html" rel="alternate"></link><published>2017-11-27T22:31:00+00:00</published><updated>2017-11-27T22:31:00+00:00</updated><author><name>jpowcode</name></author><id>tag:None,2017-11-27:/glimpses.html</id><summary type="html">&lt;p class="first last"&gt;A test of your vision!&lt;/p&gt;
</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;Years ago I remember seeing a presentation in which a small game was displayed.
The game involved flashing a pattern of dots on the screen for a brief instance,
a fraction of a second, or a glimpse. The aim was to describe exactly the pattern
you had just seen. For example a 5x7 array of dots might be displayed, but
surprisingly is it remarkable difficult to know whether you saw 5x6, 5x7 or 5x8.
This has something to do with the brains ability to see how many of something it
is seeing without having to count. When you look at three items you know there are
three without having to count 'one', 'two', 'three', but when there are seven items
it's not so easy. Play the game below to see what I mean.&lt;/p&gt;
&lt;div class="but_nav"&gt; &lt;nav&gt; &lt;button onclick="GlimpseLevel(levels[current_level])" type="button"&gt;Glimpse&lt;/button&gt; &lt;button onclick="DrawLevel(levels[current_level])" type="button"&gt;Show&lt;/button&gt; &lt;button onclick="Next()" type="button"&gt;Next&lt;/button&gt; &lt;button onclick="Previous()" type="button"&gt;Previous&lt;/button&gt; &lt;/nav&gt; &lt;/div&gt; &lt;canvas height="600" id="c" width="600"&gt;&lt;/canvas&gt; &lt;script type="text/javascript"&gt; var canvas = document.querySelector("#c"); var context = canvas.getContext("2d"); var current_level = 0;  &lt;/script&gt;&lt;p&gt;The game has been created with a little help from the html canvas object. First
within the body section of the html we create a navigation bar with some buttons
each button will call a function defined within the javascript file. The GlimpseLevel
and DrawLevel functions take as input the data required for each level in the
form of coordinates. Then we set up the canvas object allowing us to draw to
the screen and a current_level variable to keep track of which level number we are
currently on.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/cf21c8d2547fa245bf062d175a9c2618.js?file=glimpses.html"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;&lt;div class="but_nav"&gt;
  &lt;nav&gt;
    &lt;button onclick="GlimpseLevel(levels[current_level])" type="button"&gt;Glimpse&lt;/button&gt;
    &lt;button onclick="DrawLevel(levels[current_level])" type="button"&gt;Show&lt;/button&gt;
    &lt;button onclick="Next()" type="button"&gt;Next&lt;/button&gt;
    &lt;button onclick="Previous()" type="button"&gt;Previous&lt;/button&gt;
  &lt;/nav&gt;
&lt;/div&gt;
&lt;canvas height="600" id="c" width="600"&gt;&lt;/canvas&gt;

&lt;script type="text/javascript"&gt;
  var canvas = document.querySelector("#c");
  var context = canvas.getContext("2d");
  var current_level = 0;
&lt;/script&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;Each level is defined as a set of coordinates in the form [x, y, r,] representing
the x and y coordinates relative to the center of the canvas and r, the radius
of each circle.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/cf21c8d2547fa245bf062d175a9c2618.js?file=glimpses_coord.js"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;var bs = 30;

var level0 = [
  [-100, -100, bs],
  [0, -100, bs],
  [100, -100, bs],

  [-100, 0, bs],
  [0, 0, bs],
  [100, 0, bs],

  [-100, 100, bs],
  [0, 100, bs],
  [100, 100, bs],
  ];&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;The main functionality of the game is controlled by some javascript.
First define an array to hold the information for all the levels. Then define
some functions as follows:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;clearLevel - simply resets the canvas to be empty&lt;/li&gt;
&lt;li&gt;Next - increments the current_level variable by one&lt;/li&gt;
&lt;li&gt;Previous - decrements the current_level variable by one&lt;/li&gt;
&lt;li&gt;DrawCircle - takes a coordinate pair as input and draws a circle to the canvas relative to the center.&lt;/li&gt;
&lt;li&gt;DrawLevel - calls DrawCircle for all the coordinates in the current level .&lt;/li&gt;
&lt;li&gt;GlimpseLevel - calls DrawLevel, but after a fixed time period clears the canvas.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/cf21c8d2547fa245bf062d175a9c2618.js?file=glimpses.js"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;var levels = [level0, level1, level2, level3, level4];

function Next() {
  clearLevel();
  if (current_level &amp;lt; levels.length - 1) {
    current_level = current_level + 1;
  }
}

function Previous() {
  clearLevel();
  if (current_level &amp;gt; 0) {
    current_level = current_level - 1;
  }
 }

function DrawCircle(point) {
  var centerX = point[0] + canvas.width / 2;
  var centerY = point[1] + canvas.height / 2;
  var radius = point[2];
  context.beginPath();
  context.arc(centerX, centerY, radius, 0, 2.0 * Math.PI, false);
  context.fillStyle = "blue";
  context.fill();
  context.stroke();
}

function DrawLevel(levelArray) {
  var arrayLength = levelArray.length;
  for (var i = 0; i &amp;lt; arrayLength; i++) {
    DrawCircle(levelArray[i]);
  }
}

function clearLevel() {
  context.clearRect(0, 0, canvas.width, canvas.height);
}

function GlimpseLevel(levelArray) {
  DrawLevel(levelArray);
  setTimeout(clearLevel, 50);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;And lastly we have a little bit of style, mainly to position everything neatly.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/cf21c8d2547fa245bf062d175a9c2618.js?file=glimpses.css"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;but_nav {
  height: 40px;
  padding: 5px;
  margin-left: auto;
  margin-right: auto;
  width: 80%;
}

#c {
  left: 10%;
  right: 10%;
  height: 400;
  width: 400;
}

button {
  background-color: yellow;
  text-align: center;
  border-radius: 8px;
  width: 120px;
  font-family: Arial;
  font-size: 24px;
  font-weight: bold;
}

button:hover {
    background-color: red;
    color: white;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;</content><category term="Programming"></category><category term="Javascript"></category><category term="Programming"></category></entry><entry><title>Surfs Up</title><link href="/surfs-up.html" rel="alternate"></link><published>2017-11-12T22:24:00+00:00</published><updated>2017-11-12T22:24:00+00:00</updated><author><name>jpowcode</name></author><id>tag:None,2017-11-12:/surfs-up.html</id><summary type="html">&lt;p class="first last"&gt;Scraping the web to find information on surf conditions&lt;/p&gt;
</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;I've just started learning how to surf. Using the website
&lt;a class="reference external" href="http://magicseaweed.com"&gt;Magic Seaweed&lt;/a&gt;
to look at conditions of the waves is vital to having a good time. My
local beach break varies in conditions from pan flat to monster killer
waves with ripping tidal flows. Now I'm too lazy to look at the website
every day so I've written a script that lives on my server and scrapes
information from &lt;a class="reference external" href="http://magicseaweed.com"&gt;Magic Seaweed&lt;/a&gt; and also
&lt;a class="reference external" href="https://www.tidetimes.org.uk"&gt;tidetimes.org&lt;/a&gt; For tidal information.
If a few conditions are met that make the surf ideal for me then the
script sends me an email. Here is a walk through of the code&lt;/p&gt;
&lt;p&gt;First the required imports.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.python-requests.org/en/master/"&gt;requests&lt;/a&gt; deals with making http requests to websites and returning the information in a useable format.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.crummy.com/software/BeautifulSoup/"&gt;beautiful soup&lt;/a&gt; deals with scraping the html on a page and searching for tags.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/2/library/datetime.html"&gt;datetime&lt;/a&gt; and &lt;a class="reference external" href="https://docs.python.org/2/library/time.html"&gt;time&lt;/a&gt; for finding the time and date!&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/2/library/smtplib.html"&gt;smtplib&lt;/a&gt; for sending an email.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/18c0d6a70139c568dbbad159c42f87d4.js?file=surfs_up_imports"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;import requests
import bs4
import time
import datetime
import smtplib&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;Now define the urls for magic seaweed and tidetimes.org splitting them into a
root address and a sub address in case changes are needed in future.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/18c0d6a70139c568dbbad159c42f87d4.js?file=surfs_up_urls"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;msw_root_url = 'http://magicseaweed.com'
msw_index_url = msw_root_url + '/Tynemouth-Longsands-Surf-Report/26/'

tt_root_url = 'https://www.tidetimes.org.uk'
tt_index_url = tt_root_url + '/river-tyne-north-shields-tide-times'&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;The email_alert function uses a Google api to send an email from an address
I keep especially for automated alerts. This method avoids having to set up
something like &lt;a class="reference external" href="https://linux.die.net/man/8/sendmail.sendmail"&gt;sendmail&lt;/a&gt;
on my server. More details can be found in this
&lt;a class="reference external" href="https://jpowcode.github.io/send-email-without-a-server.html"&gt;post&lt;/a&gt;&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/18c0d6a70139c568dbbad159c42f87d4.js?file=surfs_up_email"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;def email_alert(message, address):
        fromaddr = 'email_address_here'
        username = 'username_here'
        password = 'password_here'
        server = smtplib.SMTP('smtp.gmail.com:587')
        server.starttls()
        server.login(username, password)
        server.sendmail(fromaddr, address, message)
        server.quit()&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;A small function that takes a url as input, gives it to requests to get the
page and feeds this to beautiful soup to parse. This is then returned from the
function.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/18c0d6a70139c568dbbad159c42f87d4.js?file=surfs_up_get_page"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;def get_page(url):
    response = requests.get(url, verify=False)
    soup = bs4.BeautifulSoup(response.text, 'html.parser')
    return soup&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;During the week I can only surf during the evenings so the next two functions
are needed.&lt;/p&gt;
&lt;p&gt;A small function to find what day it is tomorrow.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/18c0d6a70139c568dbbad159c42f87d4.js?file=surfs_up_get_day"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;def get_day_tomorrow():
    tomorrow = datetime.date.today() + datetime.timedelta(days=1)
    return tomorrow.strftime("%A")&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;A small function that returns true if it its input is a weekday.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/18c0d6a70139c568dbbad159c42f87d4.js?file=surfs_up_weekday"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;def is_weekday(day):
    weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']
    if day in weekdays:
        return True
    return False&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;I now had to inspect the html of the websites to find the particular tags that
contained the information I needed. For example, the time for low tide
is found between the ".tag &amp;gt; span" tags.&lt;/p&gt;
&lt;p&gt;This function returns the low tide times from the tidetimes.org website.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/18c0d6a70139c568dbbad159c42f87d4.js?file=surfs_up_tide"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;def get_low_tide(soup):
    elems = soup.select('.tac &amp;gt; span')
    low1 = elems[0].getText().split(':')[0]
    low2 = elems[2].getText().split(':')[0]
    return int(low1), int(low2)&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;This function returns the wind speed at 3 hourly intervals throughout the day
from magic seaweed.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/18c0d6a70139c568dbbad159c42f87d4.js?file=surfs_up_wind"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;def get_wind(soup):
    elems = soup.select('span.msw-fc-wg')
    nums = [str(elems[i].getText()) for i in range(len(elems)-1)]
    nums_tomorrow = nums[8:16]
    nums_wind = [float(item.split('mph')[0].strip()) for item in nums_tomorrow]
    return nums_wind&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;This function returns the size of the waves from magic seaweed.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/18c0d6a70139c568dbbad159c42f87d4.js?file=surfs_up_waves"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;def get_waves(soup):
    elems = soup.select('span.h4.nomargin')
    nums = [str(elems[i].getText()) for i in range(len(elems)-1)]
    nums_tomorrow = nums[16:32]
    
    nums_height = [float(item.split('ft')[0].strip())
                   for item in nums_tomorrow[::2]]

    nums_space = [float(item.split('s')[0].strip())
                  for item in nums_tomorrow[1:][::2]]

    return nums_height, nums_space&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;Now call the functions defined above to find the information we need.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/18c0d6a70139c568dbbad159c42f87d4.js?file=surfs_up_info"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;msw_html_text = get_page(msw_index_url)
tt_html_text = get_page(tt_index_url)

tomorrow = get_day_tomorrow()
wave_heights = get_waves(msw_html_text)[0]
wave_periods = get_waves(msw_html_text)[1]
low_tide = get_low_tide(tt_html_text)
wind = get_wind(msw_html_text)&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;If it's a weekday look to see if low tide is around 11-1. This means
the tide will be ideal by the time I get there. The check if the waves
are between 2-4 feet and the wind is less than 15 mph. If all these
conditions are true then return true. If it's not a weekday then the surf conditions could be good at any
time during the day and we have to check these conditions separately.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/18c0d6a70139c568dbbad159c42f87d4.js?file=surfs_up_if"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;if is_weekday(tomorrow):
    good_tide = low_tide[0] in [11, 12, 1] or low_tide[1] in [11, 12, 1]
    good_waves = 2 &amp;lt;= wave_heights[5] &amp;lt;= 4
    good_wind = wind[5] &amp;lt;= 15
    good_surf = good_waves and good_wind and good_tide

else:
    if low_tide[0] in [3, 4, 5] or low_tide[1] in [3, 4, 5]:
        good_waves = 2 &amp;lt;= wave_heights[3] &amp;lt;= 4
        good_wind = wind[3] &amp;lt;= 15
        good_surf = good_waves and good_wind

    if low_tide[0] in [6, 7, 8] or low_tide[1] in [6, 7, 8]:
        good_waves = 2 &amp;lt;= wave_heights[4] &amp;lt;= 4
        good_wind = wind[4] &amp;lt;= 15
        good_surf = good_waves and good_wind

    if low_tide[0] in [9, 10, 11] or low_tide[1] in [9, 10, 11]:
        good_waves = 2 &amp;lt;= wave_heights[5] &amp;lt;= 4
        good_wind = wind[5] &amp;lt;= 15
        good_surf = good_waves and good_wind

    if low_tide[0] in [12, 1, 2] or low_tide[1] in [12, 1, 2]:
        good_waves = 2 &amp;lt;= wave_heights[6] &amp;lt;= 4
        good_wind = wind[6] &amp;lt;= 15
        good_surf = good_waves and good_wind&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;Send the email message.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/18c0d6a70139c568dbbad159c42f87d4.js?file=surfs_up_message"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;emails = ['address_to_send_to_here']
if good_surf:
    message = 'surfs up!'
    email_alert(message, emails)

else:
    message = 'no surf today'
    email_alert(message, emails)
&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;</content><category term="Python"></category><category term="Python"></category><category term="Programming"></category></entry><entry><title>Comment Stripper</title><link href="/comment-stripper.html" rel="alternate"></link><published>2017-11-12T21:48:00+00:00</published><updated>2017-11-12T21:48:00+00:00</updated><author><name>jpowcode</name></author><id>tag:None,2017-11-12:/comment-stripper.html</id><summary type="html">&lt;p class="first last"&gt;A python programme to remove comments from some code.&lt;/p&gt;
</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;When writing code I like to make sure it is commented properly for future me.
I also like to include features such as doc strings. The problem I find is
that when working on this code the comments take up a lot of space and make it
difficult to see large portions of actual code that is not a comment on the
screen. I've written a program that will extract the comments from a file and
write a new file without the comments. This program acts as a watcher that
continually waits for a change to made to the file with comments and writes to
the comment-less file. Now this may be a feature that is available in some
IDEs, but I use &lt;a class="reference external" href="https://atom.io/"&gt;ATOM&lt;/a&gt; and I couldn't find anything that
would do this for me.
The way I set up ATOM is with two windows, one on the left with the file
including comments (which I make edits in) and one on the right which contains
the comment less code and is updated as I work. Comment stripper currently
supports python, c, haskell, javascript, html, clojure and perl. It can be used
to convert a file to one without comments using this example command on a test c
programme.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;commentStripper.py&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;test.c&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;test_out.c
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;it can also be used in watch mode where the programme output is continually
updated by running the following example command on a test python programme.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;commentStripper.py&lt;span class="w"&gt; &lt;/span&gt;-w&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;test.py&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;test_out.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code is on my &lt;a class="reference external" href="https://github.com/jpowcode/comment_stripper"&gt;github&lt;/a&gt; page
and an explanation follows.&lt;/p&gt;
&lt;p&gt;First make the necessary imports. optparse for dealing with command line
options, time for delays, os for file management, and re for regular expressions.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/2b273c2a11851a674e478b59a3521339.js?file=comment_stripper_imports"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;from optparse import OptionParser
import time
import os
import re

&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;The find_file_type function takes a static as input splits it into its
name and its extension and checks the extension against a dictionary of extensions
it knows how to deal with.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/2b273c2a11851a674e478b59a3521339.js?file=comment_stripper_find_file"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;def find_file_type(infile):
    file_type = infile.split('.')[1]
    extensions = {'py': 'python', 'pyc': 'python',
                  'c': 'c', 'cpp': 'c++', 'cxx': 'c++', 'cXX': 'c++',
                  'lhs': 'haskell', 'hs': 'haskell',
                  'js': 'js',
                  'html': 'html',
                  'rc': 'rust',
                  'clj': 'clojure', 'cljs': 'clojure', 'cljc': 'clojure',
                  'edn': 'clojure',
                  'pl': 'perl'}
    return extensions[file_type]&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;The check_time function checks to see if it has been more than five seconds
since a file was modified using the os.stat function.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/2b273c2a11851a674e478b59a3521339.js?file=comment_stripper_time"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;def check_time(filename):
    current_time = time.time()
    file_time = os.stat(filename).st_mtime
    if current_time - file_time &amp;lt; 5:
        return True
    else:
        return False&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;The gen_strip function does all the hard work. It reads through the file line
by line looking for comment characters and strings. It takes as input
filename and output filename and regular expressions for the start and end
of single line comments and multi-line comments. These are defined in the
individual functions for each programming language.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/2b273c2a11851a674e478b59a3521339.js?file=comment_stripper_gen_strip"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;def gen_strip(infile, outfile,
              sing_line_com, multi_line_com_start,
              multi_line_com_end, comment_no_text,
              end_line_com, end_line_com_id):

    f_in = open(infile, 'r')
    f_out = open(outfile, 'w')
    long_com = False

    for line in f_in:
        com = False

        if sing_line_com.match(line):
            com = True

        elif end_line_com.match(line):
            com = True
            f_out.write(line.split(end_line_com_id)[0])
            f_out.write('\n')

        else:
            if multi_line_com_start is not None:
                if comment_no_text.match(line):
                    if long_com is False:
                        long_com = True

                    else:
                        long_com = False
                        com = True

                if multi_line_com_start.match(line) and long_com is False:
                    long_com = True

                if multi_line_com_end.match(line) and long_com is True:
                    long_com = False
                    com = True

        if not (long_com or com):
            f_out.write(line)

    f_in.close()
    f_out.close()&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;For example, the strip_python function contains the regular expressions
that define the single and multi line comments and calls the gen__strip
function with these.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/2b273c2a11851a674e478b59a3521339.js?file=comment_stripper_python"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;def strip_python(infile, outfile):
    sing_line_com = re.compile('^#(.*)|^"""(.*)"""$')
    multi_line_com_start = re.compile('^"""(.+)')
    multi_line_com_end = re.compile('(.+)"""$')
    comment_no_text = re.compile('^"""$')
    end_line_com = re.compile('^(.+)#(.*)')
    end_line_com_id = '#'

    gen_strip(infile, outfile,
              sing_line_com, multi_line_com_start,
              multi_line_com_end, comment_no_text,
              end_line_com, end_line_com_id)&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;The if statements just make sure the correct function is called depending on the
programming language that needs to be stripped.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/2b273c2a11851a674e478b59a3521339.js?file=comment_stripper_iffs"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;def strip_files(infile, outfile):
    file_type = find_file_type(infile)

    if file_type == 'python':
        strip_python(infile, outfile)

    if file_type == 'c':
        strip_c(infile, outfile)&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;The main function uses optparser to read the options from the command line. The
-i option specifies input files to be stripped. The -o option specifies
the corresponding output filenames.&lt;/p&gt;
&lt;p&gt;If -w is specified then the programme goes into an infinite loop and updates
the files every 5 seconds, otherwise they are just stripped of comments and
an output written.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/2b273c2a11851a674e478b59a3521339.js?file=comment_stripper_main"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;if __name__ == '__main__':
    parser = OptionParser()
    parser.add_option("-i", "--in", action="store", type="string",
                      dest="infile",
                      help="""specify a comma separated list of files to strip
                      from comments, no spaces between names""")

    parser.add_option("-o", "--out", action="store", type="string",
                      dest="outfile",
					  help="""specify a comma separatd list of output file,
                      no spaces between names""")

    parser.add_option("-w", "--watch", action="store_true", dest="watch",
					  help="sets the programme into realtime watching mode")

    (options, args) = parser.parse_args()
    infiles = options.infile.split(',')
    outfiles = options.outfile.split(',')

    if options.watch:
        while True:
            time.sleep(5)
            for i in range(len(infiles)):
                if check_time(infiles[i]):

                    strip_files(infiles[i], outfiles[i])

    else:
        for i in range(len(infiles)):
            strip_files(infiles[i], outfiles[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;</content><category term="Python"></category><category term="Python"></category><category term="Programming"></category></entry><entry><title>TI Nspire Repair</title><link href="/ti-nspire-repair.html" rel="alternate"></link><published>2017-11-05T22:08:00+00:00</published><updated>2017-11-05T22:08:00+00:00</updated><author><name>jpowcode</name></author><id>tag:None,2017-11-05:/ti-nspire-repair.html</id><summary type="html">&lt;p class="first last"&gt;Repair of a Texas Instruments Nspire that was starting up but freezing.&lt;/p&gt;
</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;A Texas Instruments Nspire I had developed an fault where it would turn on, but
after a minuite or two it would freeze up. The screen would stay on, but the
calculator would become completely un responsive. My initial thought was a dodgy
capacitor. I took it apart and tested them with an ESR meter and they all looked
fine. The calculator was making a curious humming noise whilst it was glitching
which was somewhat puzzling. After a closer visual inspection I noticed that
the battery compartment makes contact with the main pcb by some springy metal clips
that rely on pressure to stay connected. One of these had worn down the copper
coating on the pcb and was no longer making a good contact (you can see this in
the bottom right of the left most image below).  The simple fix was
to bend it slightly to the side so it made contact with a fresh part of the pcb
trace which is plenty wide enough to accomodate this. After reassembly it works
just fine. I can only surmise that the contact between the metal spring and the
pcb was not good enough to provide enough current for the calculator to fully
work and as for the curious humming noise?&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="33%"/&gt;
&lt;col width="33%"/&gt;
&lt;col width="33%"/&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external image-reference" href="/images/calc3.jpg"&gt;&lt;img alt="im3" class="aligncenter wp-image-200" src="/images/calc3.jpg"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external image-reference" href="/images/calc4.jpg"&gt;&lt;img alt="im4" class="aligncenter wp-image-198" src="/images/calc4.jpg"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external image-reference" href="/images/calc5.jpg"&gt;&lt;img alt="im5" class="aligncenter wp-image-202" src="/images/calc5.jpg"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/body&gt;&lt;/html&gt;</content><category term="Repair"></category><category term="Repair"></category><category term="Electronics"></category></entry><entry><title>Mobile Raspberry Pi</title><link href="/mobile_pi.html" rel="alternate"></link><published>2017-10-31T22:36:00+00:00</published><updated>2017-10-31T22:36:00+00:00</updated><author><name>jpowcode</name></author><id>tag:None,2017-10-31:/mobile_pi.html</id><summary type="html">&lt;p class="first last"&gt;Setting up a Raspberry Pi to allow remote access using a phone or tablet.&lt;/p&gt;
</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;Does this sound at all familiar? You get a Raspberry as a christmas or birthday
present, set it up on the familly TV or computer monitor with a power pack
connected and a keyboard and mouse. You do some stuff on it that you're proud of
and  want to take it into school to show your mates. Unfortunately, the school
computer monitors do not have an accessible hdmi port and the keyboards cannot
be unplugged in because they have been cable tied in and there is no free power
socket. The ICT technitiatians also frown when you start to pull cables out of
machines. You could take your laptop in to connect to it, but this is going to
draw to much attention and anyway isn't the point supposed to be that a Pi is a
portable coding machine? So how can a Pi be made portable. Well one solution
would be to buy a portable screen, but this is bit pricy. Here
is my cheaper solution using stuff you probably already have.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Setup a wifi hotspot on your mobile phone with a secure password.&lt;/li&gt;
&lt;li&gt;Install whatever version of the Pi operating system you want, but I reccomend Jessie Lite as you wont be using a graphical user interface.&lt;/li&gt;
&lt;/ol&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Precofigure the Raspberry Pi  with details of your phones wifi hotspot password. Instructions &lt;a class="reference external" href="https://www.raspberrypi.org/documentation/configuration/wireless/wireless-cli.md"&gt;here&lt;/a&gt; The Pi will connect to it as soon as it is turned on.&lt;/li&gt;
&lt;li&gt;Power by a portable usb charging pack.&lt;/li&gt;
&lt;li&gt;Connect to the Pi using ssh via an app on your phone called &lt;a class="reference external" href="https://juicessh.com/"&gt;juicessh&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Use a small bluetooth keyboard that connects to the phone to alllow for faster typing.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This gives you access to a terminal on the Pi. Ok it's not a full desktop
environment, but for programming you can manage with this. To get multiple
terminal shells use the &lt;a class="reference external" href="https://kb.iu.edu/d/acuy"&gt;screen&lt;/a&gt; programme.
Using this you can have a text editor
open in one terminal, debug code in another and run code in a third. All of
these can be moved between with some easy to learn keyboard shortcuts.&lt;/p&gt;
&lt;p&gt;The result of this is the Pi can stay in your bag or pocket and all you need on
the table is your phone and bluetooth keyboard. Or if you really want to be
descrete, despense with the keyboard. You can code to your hearts content in
the smallest of spaces and no one will have a clue what you are doing!&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content><category term="Computing in School"></category><category term="Raspberry Pi"></category></entry><entry><title>Http to Mqtt Bridge</title><link href="/http_to_mqtt.html" rel="alternate"></link><published>2017-10-31T22:33:00+00:00</published><updated>2017-10-31T22:33:00+00:00</updated><author><name>jpowcode</name></author><id>tag:None,2017-10-31:/http_to_mqtt.html</id><summary type="html">&lt;p class="first last"&gt;A Flask app that passes http requests to an mqtt broker.&lt;/p&gt;
</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;I am working on a home automation project that will control various aspects of
my house from heating and lighting to music playing and security. The backend of
this consists of a server running on a Raspberry Pi. It is my intention for this
server to be a hub to broker messages between the various different methods of
communication and the protcols that sit on top of them. For example, I may wish
to turn my heating up from an app on my mobile phone. This is a breakdown of the
steps required to make that happen&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The mobile phone app sends an http request to the server&lt;/li&gt;
&lt;li&gt;The server receives the http request and translates it into an mqtt message on the request temperature change channel&lt;/li&gt;
&lt;li&gt;A programme concerned with heating control is subscribed to the request temperature change channel  and receives the message.&lt;/li&gt;
&lt;li&gt;The heating control programme is also subscribed to the current temperature channel which is being pushed out by sensors in each room.&lt;/li&gt;
&lt;li&gt;A calculation is made by the programme and a message sent out on the set temperature channel.&lt;/li&gt;
&lt;li&gt;A programme to translate mqtt messages into a protocol suitable for rf communication intercepts the message and sends it out over a 433mhz network.&lt;/li&gt;
&lt;li&gt;The radiator thermostat receives the rf communication and sets the temperature accordingly.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It is the third step that I will describe in this post. Very simply this is a
small Python programme using the &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; library
that sits in its own process
listening for particular http requests. When it gets one it strips out the
relevent information and publishes it over an MQTT channel using the
&lt;a class="reference external" href="https://pypi.python.org/pypi/paho-mqtt/0.9"&gt;paho&lt;/a&gt;. A more detailed
description can be found under the code below.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/6e0db7263d5350a95e6c13deb271bec7.js"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;from flask import Flask, request
import paho.mqtt.client as mq

ip = '127.0.0.1' 
port = 1883 

app = Flask(__name__)

@app.route('/mqtt', methods=['GET'])
def get_id():    
    
  topic = request.args.get('topic')    
  message = request.args.get('message')    
  mqtt = mq.Client("restMQTT")    
  mqtt.connect(ip, port, 15)    
  mqtt.publish(topic, message)    
  
if __name__ == '__main__':    
  app.run(debug=True)&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;We first import the required libraries for Flask and mqtt. Then define the
ip address and port for the mqtt server. In this
case it is just running on the localhost. We then start the Flask app and
define a route which will call the function get_id when we visit the web
address at /mqtt. We pull out the topic and message from the http request, set
up an mqtt client and then publish the message.&lt;/p&gt;
&lt;p&gt;We can test it all works using the mosquitto broker and its command line tools&lt;/p&gt;
&lt;p&gt;First install it by following these
&lt;a class="reference external" href="https://howtoprogram.xyz/2016/10/15/install-mosquitto-mqtt-broker-ubuntu-16-04-lts-xenial-xerus/"&gt;instructions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now start the mosquitto mqtt server&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mosquitto
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Subscribe to a the channel 'test'&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mosquitto_sub&lt;span class="w"&gt; &lt;/span&gt;-h&lt;span class="w"&gt; &lt;/span&gt;localhost&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;mqtt_test
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Send an http request by typing this into a web browser&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
http://127.0.0.1:5000/mqtt?topic=mqtt_test&amp;amp;message=hello_world
&lt;/pre&gt;
&lt;p&gt;The message 'hello_world' should appear in the terminal&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content><category term="Python"></category><category term="Home automation"></category><category term="MQTT"></category><category term="Programming"></category></entry><entry><title>Pelican</title><link href="/Static%20site%20generator%20with%20pelican.html" rel="alternate"></link><published>2017-10-31T22:25:00+00:00</published><updated>2017-10-31T22:25:00+00:00</updated><author><name>jpowcode</name></author><id>tag:None,2017-10-31:/Static site generator with pelican.html</id><summary type="html">&lt;p class="first last"&gt;Blog update, now using Pelican static site generator.&lt;/p&gt;
</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;I got fed up with &lt;a class="reference external" href="https://wordpress.com/"&gt;Wordpress&lt;/a&gt; . I know it has it's
uses and is a great blogging platform, but my minimal server just couldn't cope.
I spent a long time trying, but despite my best efforts at configuring Apache and
MySQL I just couldn't get the database to stop crashing. For a simple static blog
I figured I didn't really need Wordpress anyway. I'm fairly comfortable with
Python so I decided to look for a solution that utilised it. Three options looked
attractive: &lt;a class="reference external" href="https://getnikola.com/"&gt;Nikola&lt;/a&gt; , &lt;a class="reference external" href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;
and &lt;a class="reference external" href="http://lucumr.pocoo.org/2015/12/21/introducing-lektor/"&gt;Lektor&lt;/a&gt;.
I started with Nikola and very quickly ran into some installation problems.
Not a good sign so I tried Pelican. A very different experience, it installed
quickly with minimum fuss and got a good looking site up and running. I've also
decided to host the blog on Github which was not too difficult a process
and is described in the Pelican tutorials. So now I get free hosting as well.
For comments I'm using &lt;a class="reference external" href="https://disqus.com/"&gt;Disqus&lt;/a&gt; which takes the pressure
off me having to deal with spam. All in all I'm very happy with Pelican and would
recommend it for a simple blog.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content><category term="Python"></category><category term="Python"></category><category term="Pelican"></category></entry><entry><title>Plickers Import</title><link href="/plickers-import.html" rel="alternate"></link><published>2017-10-30T21:16:00+00:00</published><updated>2017-10-30T21:16:00+00:00</updated><author><name>jpowcode</name></author><id>tag:None,2017-10-30:/plickers-import.html</id><summary type="html">&lt;p class="first last"&gt;A python script to import questions into the Plickers app.&lt;/p&gt;
</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.plickers.com"&gt;Plickers&lt;/a&gt; is a website designed for obtaining feedback from pupils in a classroom environment. The basic process is as follows&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The teacher sets up multiple choice questions (typically with 4 answers) on the Plickers website to gauge whether or not pupils understand a certain concept.&lt;/li&gt;
&lt;li&gt;The teacher sets up a mobile device with the plickers app.&lt;/li&gt;
&lt;li&gt;Pupils are all given an individual QR code like thing in the shape of a square  which they can hold up in any one of four orientations to answer the question presented to them on a classroom projector.&lt;/li&gt;
&lt;li&gt;The teacher then scans the room with the camera on the mobile device. The app recognises in which orientation each pupil is holding their QR code like thing and stores the data.&lt;/li&gt;
&lt;li&gt;The teacher can then use this information to plan their next teaching steps. For example they could chose to change the seating in the next lesson to put pupils who understand together with those that don't.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One of the main drawbacks that this website has is that it can't import questions from an outside source or export questions to an outside source. This makes it nigh on impossible for teams of teachers to share questions. To help with this I have written a Python script that can read questions from a CSV file and simulate the necessary mouse clicks to import them into the website. This allows teachers to collaborate by sharing their CSV files and importing each other's into their own Plickers accounts. To run the script you will need to follow these steps. The steps are written for a Ubuntu style operating system. If you are running Windows first follow the extra steps below and then return to this poiint.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Download the repository from my GitHub page &lt;a class="reference external" href="https://github.com/jpowcode/plickers_import"&gt;here&lt;/a&gt;. For windows users use the directory C:\cycwin64\home\"user_name"\plickers_import&lt;/li&gt;
&lt;li&gt;Setup a virtual environment for Python, activate it and install dependencies&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/0b96a440de7a3ba0d05ca4755756344a.js?file=plickers"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;virtualenv plickers_import
cd plickers_import
source bin/activate
pip install selenium&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;Put your Plickers username and password into the first two lines of the file login-details.txt Please make sure your password is not the same as for any other websites you use as it will be stored here in plain text which is not very secure.&lt;/li&gt;
&lt;li&gt;Write you questions into the CSV file in the example format given in the downloaded file.&lt;ul&gt;
&lt;li&gt;Column A is the text for the question.&lt;/li&gt;
&lt;li&gt;Column B should be an M for a multiple choice question and T for a True/False question&lt;/li&gt;
&lt;li&gt;Column C contains the correct answer A, B, C or D for multiple choice or T or F for a True/False question&lt;/li&gt;
&lt;li&gt;Columns D, E, F and G contain the answers for the questions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Run the script&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;plickers_import.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Extra steps for windows users&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1. Dowload and install &lt;a class="reference external" href="https://www.cygwin.com/"&gt;Cygwin&lt;/a&gt; During the install
proceedure make sure to click on the word 'Default' next to Python. See the
image below.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external image-reference" href="/images/small-plickers.jpg"&gt;&lt;img alt="small-plickers" class="aligncenter wp-image-203" src="/images/small-plickers.jpg" style="width: 240px; height: 135px;"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Download and install &lt;a class="reference external" href="https://www.mozilla.org/en-US/firefox/new"&gt;Firefox&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Download &lt;a class="reference external" href="https://github.com/mozilla/geckodriver/releases"&gt;Gecko Drivers&lt;/a&gt; , unzip the file and put it in C:\cycwin64\home\"user_name"\plickers_import\Scripts&lt;/li&gt;
&lt;li&gt;Start Cygwin and run these commands&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/0b96a440de7a3ba0d05ca4755756344a.js?file=cygwin"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;easy_install pip
easy_install virtualenv&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;Now follow the steps above&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Explanation of the code&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First make the relevent imports. We will be using the Python &lt;a class="reference external" href="https://pypi.python.org/pypi/selenium"&gt;selenium&lt;/a&gt;
libaray that can simulate mouse clicks on a webpage.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/d821333d511cba8ec5b12410a3fd3b5d.js?file=plickers_import"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;import time
import csv
from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.common.exceptions import TimeoutException&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;Next we initialise a driver instance to the Firefox browser. We add the  WebDriverWait function as an attribute to the driver so it can
be accessed more easily. This function is used to make the driver wait a
certain amount of time (here 5 seconds) for an event to occur.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/d821333d511cba8ec5b12410a3fd3b5d.js?file=plickers_init"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;def init_driver():
  driver = webdriver.Firefox()    
  driver.wait = WebDriverWait(driver, 5)    
  return driver&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;The lookup function takes two arguments: a driver instance and a query lookup (a string).
It finds the sign in link on that page and clicks it.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/d821333d511cba8ec5b12410a3fd3b5d.js?file=plickers_lookup"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;def lookup(driver, query):
    driver.get(query)
    try:
        link = driver.find_element_by_link_text('Sign in')
        link.click()

    except TimeoutException:
        print("Can't find sign in link")&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;The login function takes the driver as an input. Reads login details from a file
and enters login details into the fields in the webpage.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/d821333d511cba8ec5b12410a3fd3b5d.js?file=plickers_login"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;def login(driver):
    try:
        with open('login_details.txt', 'r') as file:
            login_name = file.readline()
            password = file.readline()

    except IOError:
        print('login_details.txt file not found')

    try:
        username = driver.find_element_by_name("email")
        username.send_keys(login_name)

        username = driver.find_element_by_name("password")
        username.send_keys(password)

        button = driver.find_element_by_class_name("btn")
        button.click()

    except TimeoutException:
        print('enter login failed')&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;The click_new_question function looks for an element in the html of the
page with a class name 'btn', if it finds one it clicks it.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/d821333d511cba8ec5b12410a3fd3b5d.js?file=plickers_question"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;def click_new_question():
    try:
        button = driver.find_element_by_class_name("btn")
        button.click()

    except TimeoutException:
        print("new question button failed")
&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;The add_tf_question function conssits mainly of css locations for the
various aspects of the question dialogue. I found these by using the
developer tools in my browser and ispect the element I was interested in.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/d821333d511cba8ec5b12410a3fd3b5d.js?file=plickers_add_tf"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;def add_tf_question(driver, question):
    click_new_question()
    time.sleep(1)

    radio_button_css = ".modal-body &amp;gt; pl-question-editor:nth-child(1) \
    &amp;gt; div:nth-child(1) &amp;gt; div:nth-child(3) &amp;gt; div:nth-child(1) \
    &amp;gt; div:nth-child(1) &amp;gt; div:nth-child(1) &amp;gt; div:nth-child(1) \
    &amp;gt; div:nth-child(1) &amp;gt; div:nth-child(1) &amp;gt; span:nth-child(2) \
    &amp;gt; div:nth-child(1)"

    check_box_1_css = ".modal-body &amp;gt; pl-question-editor:nth-child(1) \
    &amp;gt; div:nth-child(1) &amp;gt; div:nth-child(3) &amp;gt; div:nth-child(1) \
    &amp;gt; div:nth-child(1) &amp;gt; div:nth-child(1) &amp;gt; div:nth-child(1) \
    &amp;gt; div:nth-child(3) &amp;gt; div:nth-child(3) &amp;gt; div:nth-child(1)"

    check_box_2_css = ".modal-body &amp;gt; pl-question-editor:nth-child(1) \
    &amp;gt; div:nth-child(1) &amp;gt; div:nth-child(3) &amp;gt; div:nth-child(1) \
    &amp;gt; div:nth-child(1) &amp;gt; div:nth-child(1) &amp;gt; div:nth-child(1) \
    &amp;gt; div:nth-child(4) &amp;gt; div:nth-child(3) &amp;gt; div:nth-child(1)"

    save_button_css = ".modal-body &amp;gt; pl-question-editor:nth-child(1) \
    &amp;gt; div:nth-child(1) &amp;gt; div:nth-child(3) &amp;gt; div:nth-child(1) \
    &amp;gt; div:nth-child(1) &amp;gt; div:nth-child(2) &amp;gt; div:nth-child(2) \
    &amp;gt; div:nth-child(3)"

    if question[2] == 'T':
        box_to_tick = check_box_1_css
    elif question[2] == 'F':
        box_to_tick = check_box_2_css

    try:
        radio_button = driver.find_element_by_css_selector(radio_button_css)
        radio_button.click()

        text = driver.find_element_by_css_selector(".ng-touched")
        text.send_keys(question[0])

        check_box = driver.find_element_by_css_selector(box_to_tick)
        check_box.click()

        save_button = driver.find_element_by_css_selector(save_button_css)
        save_button.click()

    except TimeoutException:
        print("failed to add question")&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;We call the functions in the main section of the programme. The time.sleep()
calls are there to ensure that the webpage has enough time to render
before the programme carries on with the next function.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/d821333d511cba8ec5b12410a3fd3b5d.js?file=plickers_main"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;if __name__ == "__main__":
    driver = init_driver()
    lookup(driver, "https://www.plickers.com/")
    time.sleep(2)
    login(driver)
    time.sleep(10)

    with open('test_questions.csv') as file:
        reader = csv.reader(file, delimiter=',')
        for sample_question in reader:
            if sample_question[1] == 'M':
                add_multi_question(driver, sample_question)
                time.sleep(1)
            elif sample_question[1] == 'T':
                add_tf_question(driver, sample_question)

    time.sleep(20)
    driver.quit()
&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;</content><category term="Python"></category><category term="Plickers"></category><category term="Python"></category><category term="Selenium"></category><category term="Programming"></category></entry><entry><title>Robotic Arm Using Bioloid AX-12 Servos: Part 3</title><link href="/robot-turntable.html" rel="alternate"></link><published>2016-10-19T21:53:00+01:00</published><updated>2016-10-19T21:53:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2016-10-19:/robot-turntable.html</id><summary type="html">&lt;p class="first last"&gt;Adding a turntable to my dynamixel robotic arm.&lt;/p&gt;
</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;I finally got around to putting my robot arm on a turntable. In a stroke of luck
I found what looked to be perfect in a parts bin for stepper motors at my local
&lt;a class="reference external" href="http://www.makerspace.org.uk"&gt;Makerspace&lt;/a&gt; It looks like a large gear on top of a
bearing and included a toothed belt and accompanying toothed pulley. The servo
shaft needed to be packed out with some copper tube to make it the right diameter
for the pulley. I've then mounted it upside down on some wooden blocks to get it
at the same level as the turnable gear. It seems to work rather well! Check out
the photos below and let me know what you think.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="33%"/&gt;
&lt;col width="33%"/&gt;
&lt;col width="33%"/&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external image-reference" href="/images/turn1.jpg"&gt;&lt;img alt="im1" class="aligncenter wp-image-201" src="/images/turn1.jpg"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external image-reference" href="/images/turn2.jpg"&gt;&lt;img alt="im2" class="aligncenter wp-image-197" src="/images/turn2.jpg"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external image-reference" href="/images/turn3.jpg"&gt;&lt;img alt="im3" class="aligncenter wp-image-200" src="/images/turn3.jpg"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external image-reference" href="/images/turn4.jpg"&gt;&lt;img alt="im4" class="aligncenter wp-image-198" src="/images/turn4.jpg"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external image-reference" href="/images/turn5.jpg"&gt;&lt;img alt="im5" class="aligncenter wp-image-202" src="/images/turn5.jpg"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external image-reference" href="/images/turn6.jpg"&gt;&lt;img alt="im6" class="aligncenter wp-image-200" src="/images/turn6.jpg"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external image-reference" href="/images/turn7.jpg"&gt;&lt;img alt="im7" class="aligncenter wp-image-198" src="/images/turn7.jpg"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external image-reference" href="/images/turn9.jpg"&gt;&lt;img alt="im9" class="aligncenter wp-image-202" src="/images/turn9.jpg"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external image-reference" href="/images/turn8.jpg"&gt;&lt;img alt="im8" class="aligncenter wp-image-202" src="/images/turn8.jpg"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/body&gt;&lt;/html&gt;</content><category term="Robotics"></category><category term="Robotics"></category><category term="Electronics"></category></entry><entry><title>Send Email Without a Server</title><link href="/send-email-without-a-server.html" rel="alternate"></link><published>2016-10-19T21:43:00+01:00</published><updated>2016-10-19T21:43:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2016-10-19:/send-email-without-a-server.html</id><summary type="html">&lt;p class="first last"&gt;Use the Gmail API to send emails without needing to run a server.&lt;/p&gt;
</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;Sending email alerts from a Python programme can be incredibly useful. For example,
a home security system could email you when an intruder is detected. One way to
do this would be to set up an email server, but it is possible to do this using a
web based service. Gmail provides an &lt;a class="reference external" href="https://developers.google.com/gmail/imap/imap-smtp"&gt;API&lt;/a&gt;
to allow you to use a python script to instruct an email account you have to send
an email. I have a separate Gmail acount registed to use for alerting from scripts
and that's all I use it for. It will send an email to another account I have which i
look at one my phone. The code below contains a function that takes as input a
message and a list of email accounts to send the message to. It is descibed in these
steps:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;import the &lt;a class="reference external" href="https://docs.python.org/2/library/smtplib.html"&gt;smtplib&lt;/a&gt; library which can be used to send email using the Simple Mail Transfer Protocol.&lt;/li&gt;
&lt;li&gt;Define variables for the email address to send from and the username and password for this account&lt;/li&gt;
&lt;li&gt;link to the Gmail smtp api and assign this to the server variable&lt;/li&gt;
&lt;li&gt;Login to the api&lt;/li&gt;
&lt;li&gt;loop over all the email addreses in the list and send the message to each of them.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/6b5570cd4fa89420361fd62943ef32ee.js"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;import smtplib

def email_alert(message, addresses):        
	fromaddr = 'email address to send from'        
	username = 'username of email to send from'        
	password = 'password of email to send from'
	
	server = smtplib.SMTP('smtp.gmail.com:587')        
	server.starttls()        
	server.login(username, password)        
	
	for address in addresses:            
		server.sendmail(fromaddr, address, message)        
	server.quit()&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;</content><category term="Python"></category><category term="Python"></category><category term="Home Automation"></category><category term="IoT"></category><category term="Programming"></category></entry><entry><title>Power Supply Build</title><link href="/power-supply-build.html" rel="alternate"></link><published>2016-10-19T21:19:00+01:00</published><updated>2016-10-19T21:19:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2016-10-19:/power-supply-build.html</id><summary type="html">&lt;p class="first last"&gt;Building a variable voltage and current limited powersupply using and old server power supply
power supply.&lt;/p&gt;
</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;My local &lt;a class="reference external" href="http://www.makerspace.org.uk"&gt;Makerspace&lt;/a&gt; has some shelves called
Hack or Die Anything on these shelves
must be taken for a project or within a few weeks it willed be binned. I found a
rather nice Network Attached Storage device made by Netgear which obviously didn't
work or wouldn't have been sat on the shelves! However, the case was extruded
aluminium and rather nice. Sat right next to it was a 50V server power supply
that looked almost the right size to slot inside the case. And with slight hacksaw
modifications it did. Ebay provided the rest in the form of a programmable dc-dc
converter with a display for current and voltage. The result is a 0-50V variable
power supply with programmable settings, voltage and current displays.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="33%"/&gt;
&lt;col width="33%"/&gt;
&lt;col width="33%"/&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="im1" class="aligncenter wp-image-201" src="/images/power1.jpg"/&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="im2" class="aligncenter wp-image-197" src="/images/power2.jpg"/&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="im3" class="aligncenter wp-image-200" src="/images/power3.jpg"/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td colspan="3"&gt;&lt;img alt="im4" class="aligncenter wp-image-198" src="/images/power4.jpg"/&gt; &lt;img alt="im5" class="aligncenter wp-image-202" src="/images/power5.jpg"/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/body&gt;&lt;/html&gt;</content><category term="Electronics"></category><category term="Electronics"></category></entry><entry><title>Making a Scikit Learn Classifier</title><link href="/making-a-scikit-learn-classifier.html" rel="alternate"></link><published>2016-10-18T22:08:00+01:00</published><updated>2016-10-18T22:08:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2016-10-18:/making-a-scikit-learn-classifier.html</id><summary type="html">&lt;p class="first last"&gt;Writing a custom made classifier for Scikit Learn using Kaggle's Titanic dataset as an example.&lt;/p&gt;
</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;Sklearn has many built in classifiers that can be imported and used. In this post
I will describe how to make your own classifier that is compatible with all the
other sklearn modules such as cross validation. &lt;a class="reference external" href="https://www.kaggle.com/"&gt;Kaggle&lt;/a&gt;
provides a dataset
based on the Titanic sinking. It includes a list of all the passengers that
were onboard along with information about: whether or not they survived; age;
sex; cabin class and a few other things. I am going to build a very basic
classifier here that just asks: is the passenger male or female, if they are
female then predict they survived, if they are male predict they perished. This
classifier can predict with about 75% accuarcy.&lt;/p&gt;
&lt;p&gt;Import the relevant python modules. Pandas to handle the data as a dataframe;
crossvalidation from sklearn to allow splitting of the data into a training set
and a test set; preprocessing from sklearn for some basic munging functions;
&lt;a class="reference external" href="http://scikit-learn.org/stable/modules/generated/sklearn.base.ClassifierMixin.html"&gt;ClassifierMixin&lt;/a&gt;
and &lt;a class="reference external" href="http://scikit-learn.org/stable/modules/generated/sklearn.base.BaseEstimator.html"&gt;BaseEstimator&lt;/a&gt;
are the sklearn base classes that give us the
required structure for our estimator.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/62a8c0f5762ea165af3b.js?file=sklearnclassifier.py"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;import pandas as pd
from sklearn import cross_validation
from sklearn import preprocessing
from sklearn.base import ClassifierMixin, BaseEstimator&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;Import the data set (it will need to be in your working directory) and convert
it to a Pandas data set and drop some of the columns that won't be required.
The first row of the summary variable will hold the mean values for each feature.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/62a8c0f5762ea165af3b.js?file=read.py"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;TDat = pd.read_csv('trainData.csv', header=0)
TDat_proc = TDat.drop(['Name', 'PassengerId', 'Ticket', 'Cabin', 'Embarked', 'Fare', 'Age'], axis=1)
summary = TDat_proc.describe()&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;Now define some processing functions. &lt;a class="reference external" href="http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.MinMaxScaler.html"&gt;MinMaxScalar&lt;/a&gt;
scales each feature into a
given range. &lt;a class="reference external" href="http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.LabelEncoder.html"&gt;LabelEncoder&lt;/a&gt;
is used to transform the categorical data of the sex
column into numerical data.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/62a8c0f5762ea165af3b.js?file=preproc.py"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;min_max_scaler = preprocessing.MinMaxScaler()
catToNum = preprocessing.LabelEncoder()
TDat_proc.Sex = catToNum.fit_transform(TDat_proc.Sex)&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;Define a class that inherits from the BaseEstimator and ClassifierMixin classes.
It must contain two functions: fit and predict. Predict simply returns a list of
1's or 0's for each element on the data set. It returns a 1 if the element is a
female or a 0 if they are a male.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/62a8c0f5762ea165af3b.js?file=classifier.py"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;class Classifier(BaseEstimator, ClassifierMixin):
    def fit(self, data, classes):
        pass
    
    def predict(self, data):
        return [1 if data[i][1] == 0 else 0 for i in range(len(data))]&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;Turn the dataframe into a numpy array and split it into the features [Sex] and
the target [Survived]&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/62a8c0f5762ea165af3b.js?file=data.py"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;data = TDat_proc.values
train_features = data[:, 1:]
train_target = data[:, 0]&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;Define an instance of the class and call it using the cross validation function.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/62a8c0f5762ea165af3b.js?file=scores.py"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;clfSX = Classifier()
scores = cross_validation.cross_val_score(clfSX, train_features, train_target, cv=10)
print 'Sex based classifier'
print scores.mean(), scores.std() &lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;This is obviously a very basic classifier. The aim of this post was to get
across the concept of building your own classifier. More details can be found
&lt;a class="reference external" href="http://scikit.ml/api/base.html"&gt;here&lt;/a&gt; with information about how to use training
data with the fit method.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content><category term="Data Science"></category><category term="Python"></category><category term="Machine Learning"></category><category term="Programming"></category></entry><entry><title>Qbot Micro Tips</title><link href="/Qbot%20micro%20tips.html" rel="alternate"></link><published>2016-10-18T21:27:00+01:00</published><updated>2016-10-18T21:27:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2016-10-18:/Qbot micro tips.html</id><summary type="html">&lt;p class="first last"&gt;Some tips for using the Hobbying Qbot Micro&lt;/p&gt;
</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;I own a &lt;a class="reference external" href="http://www.hobbyking.com/hobbyking/store/__29595__Q_BOT_Micro_Quadcopter_w_2_4gHz_RF_Module_Spektrum_JR_Futaba_compatible_.html"&gt;Qbot Micro&lt;/a&gt;
Quadcopter from HobbyKing which I bought because it came with a
tx module that would allow me to fly it with my &lt;a class="reference external" href="http://www.hobbyking.co.uk/hobbyking/store/__51442__Turnigy_9XR_PRO_Radio_Transmitter_Mode_2_without_module_.html"&gt;Turnigy 9XR transmitter&lt;/a&gt;
. This is
in contrast to something like a &lt;a class="reference external" href="http://www.hubsan.com/product/index413.html"&gt;Hubsan&lt;/a&gt;
which comes with it's own transmitter.
There is nothing wrong with using this it's just nicer to use my own. Anyway,
there are a few points that might help people out there to fly the Qbot a bit more
successfully. Firstly, it has an acrobatic mode which causes it to do a flip when
the controls are pushed 100% in any direction. I found it pretty unflyable with this
mode turned on with my limited skills. It should be possible to turn this off, but
I can't figure out how. Instead I've altered the mixer on my Transmitter so that
the maximum values on the Aileron, Elevator and Rudder are set to 90%. This stops
the Qbot doing flips and makes it easier to fly. Secondly, I discovered that spare
parts are not so easy to buy from the UK warehouse. They seem to only be stocked
in the international warehouse and I can't be bothered with the hassle of that.
However, Hubsan spares are easy and cheap to come by on Ebay. The propellers and
motors are compatible and I've used a few replacements now with no issues.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content><category term="Other"></category><category term="Quadcopters"></category></entry><entry><title>Issue with Python Package Folium</title><link href="/Issue%20with%20Python%20package%20Folium.html" rel="alternate"></link><published>2016-10-17T21:41:00+01:00</published><updated>2016-10-17T21:41:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2016-10-17:/Issue with Python package Folium.html</id><summary type="html">&lt;p class="first last"&gt;A problem with Chrome rendering Folium maps.&lt;/p&gt;
</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;&lt;a class="reference external" href="https://pypi.python.org/pypi/folium"&gt;Folium&lt;/a&gt; is a Python package used to
create data visualisations of spatial data.
I've noticed an issue with the way Google Chrome renders the Folium maps.
The resolution is not always consistent for two indentical base maps that have
slightly different points ploted on them. For example, the two maps below were
created using exactly the same setings. The only difference being that the data
points plotted are different. You can see that Chrome has given each map a
different initial zoom and the text size can even be different on the two maps.
However rendering in Firefox causes no such problems. I've no idea why this is,
but in case you run into issues, try a different browser and see whether that
fixes it.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="56%"/&gt;
&lt;col width="44%"/&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external image-reference" href="/images/small-folium1.jpg"&gt;&lt;img alt="alternate text" class="align-middle" src="images/small-folium1.jpg" style="width: 400px;"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external image-reference" href="/images/small-folium2.jpg"&gt;&lt;img alt="alternate text" class="align-middle" src="images/small-folium2.jpg" style="width: 400px;"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/body&gt;&lt;/html&gt;</content><category term="Python"></category><category term="Python"></category></entry><entry><title>Review of 858D Hot Air Rework Station</title><link href="/review-of-858d-hot-air-rework-station.html" rel="alternate"></link><published>2015-11-14T12:37:00+00:00</published><updated>2015-11-14T12:37:00+00:00</updated><author><name>jpowcode</name></author><id>tag:None,2015-11-14:/review-of-858d-hot-air-rework-station.html</id><summary type="html">&lt;p class="first last"&gt;A review and look inside a cheap chinese hot air gun.&lt;/p&gt;
</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;A hot air rework station was something I'd wanted for a while, but not
something I wanted to pay hundreds of pounds for initially until I'd
seen how much use they got. I picked up one of these cheap Chinese
models from Ebay after seeing it reviewed on the &lt;a class="reference external" href="https://www.youtube.com/watch?v=vva2t21sOAs"&gt;EEV
Blog.&lt;/a&gt; There are lots of
different ones on Ebay with various different logos, but they all look
like exactly the same model. I was a bit concerned by some of the
comments on the EEV forum about them not being wired safely, but given
how cheap they were I'd thought I'd take the risk and take it apart
before using it to check he wiring myself. On inspection it looks to be
ok. The mains is wired ok and the earth is all connected up as it should
be. The circuit board is all trough-hole component and looks like it
hasn't had that much care with wonky heat-sinks and transistors and
blobs of glue squirted in abundance around the cable entry point.
 Having said that the solder joints are ok, there's heat shrink around
the switch contacts and the cables are neatly tied together. All in all
for the money I'm pleased. I'll see how it works in practice and report
back.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="56%"/&gt;
&lt;col width="44%"/&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external image-reference" href="/images/small-2015-11-14_10.36.06.jpg"&gt;&lt;img alt="small-2015-11-14-10.36.06" class="aligncenter wp-image-203" src="/images/small-2015-11-14_10.36.06.jpg" style="width: 480px; height: 270px;"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external image-reference" href="/images/2015-11-14_10.52.00.jpg"&gt;&lt;img alt="2015-11-14 10.52.00" class="aligncenter wp-image-196" src="/images/2015-11-14_10.52.00.jpg" style="width: 480px; height: 270px;"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external image-reference" href="/images/2015-11-14_10.42.20.jpg"&gt;&lt;img alt="2015-11-14 10.42.20" class="aligncenter wp-image-194" src="/images/2015-11-14_10.42.20.jpg" style="width: 350px; height: 620px;"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external image-reference" href="/images/2015-11-14_10.35.50.jpg"&gt;&lt;img alt="2015-11-14 10.35.50" class="aligncenter wp-image-193" src="/images/2015-11-14_10.35.50.jpg" style="width: 350px; height: 620px;"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I've now used this a few times to desolder some surface mount chips and
it worked pretty well. The only small gripe I have is how long it takes
to cool down when replaced on the stand. This wouldn't be a problem
apart from the fact that it does this with the fan still running and my
desk is quite close to the curtains. Bit of a fire risk maybe? It turns
it off when it's sufficiently cool.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content><category term="Electronics"></category><category term="Review"></category><category term="Electronics"></category></entry><entry><title>Review of Xytronic LF-1700 Soldering Iron</title><link href="/review-of-xytronic-lf-1700-soldering-iron.html" rel="alternate"></link><published>2015-11-14T12:21:00+00:00</published><updated>2015-11-14T12:21:00+00:00</updated><author><name>jpowcode</name></author><id>tag:None,2015-11-14:/review-of-xytronic-lf-1700-soldering-iron.html</id><summary type="html">&lt;p class="first last"&gt;A good quality high powered soldering iron from Xytronic.&lt;/p&gt;
</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;I have a few surface mount projects I'd like to work on as decided it
was time to replace my ageing 18W fixed temperature soldering iron with
decent temperature controlled soldering station. After doing a bit of
research my first impressions were just how expensive these things were.
A Weller would have been nice, but the price was off putting. In the end
I plumped for this &lt;a class="reference external" href="http://www.xytronic.com/"&gt;Xytronic&lt;/a&gt; model from
&lt;a class="reference external" href="http://www.rapidonline.com/"&gt;Rapid electronics&lt;/a&gt;. First impressions
are pretty good. It's very solidly built, with both the stand and the
base unit feeling like they will last a long time. The iron itself feels
quite nice to hold, the bits are easy to change and the connection to
the base unit feels quite reliable. My first job was to solder a few
banana plugs onto some power cables. This is a job that my old 18w iron
just could not cope with. The heat wicked away so fast through the mass
of the banana plug that it just would not heat enough to let the solder
stick. The Xytronic however with it's 100w of power has no such
difficulty. I changed the bit to a nice wide chisel tip to allow the
heat to transfer and it worked like a dream.  Next up will be having a
go at some surface mount components.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="33%"/&gt;
&lt;col width="33%"/&gt;
&lt;col width="33%"/&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="small-2015-11-14-11.04.34" class="aligncenter wp-image-201" src="/images/small-2015-11-14_11.04.34.jpg" style="width: 500px; height: 280px;"/&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="2015-11-14-11.05.23" class="aligncenter wp-image-197" src="/images/2015-11-14_11.05.23.jpg" style="width: 500px; height: 280px;"/&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="small-2015-11-14-11.04.14" class="aligncenter wp-image-200" src="/images/small-2015-11-14_11.04.14.jpg" style="width: 500px; height: 280px;"/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external image-reference" href="/images/2015-11-14_11.05.49.jpg"&gt;&lt;img alt="2015-11-14-11.05.49" class="aligncenter wp-image-198" src="/images/2015-11-14_11.05.49.jpg" style="width: 270px; height: 485px;"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external image-reference" href="/images/small-2015-11-14_11.04.54.jpg"&gt;&lt;img alt="small-2015-11-14-11.04.54" class="aligncenter wp-image-202" src="/images/small-2015-11-14_11.04.54.jpg" style="width: 270px; height: 485px;"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I'v now used this to solder a few surface mount components including
some fairly small package sizes. It performed really well. It heats up
and changes temperature in virtually no time at all so soldering
different components that need different temperature is not a problem.
There's loads of power so heat transfer is rapid. A very good purchase.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content><category term="Electronics"></category><category term="Review"></category></entry><entry><title>Hitachi Hard Disk Recorder Repair</title><link href="/hitachi-hard-disk-recorder-repair.html" rel="alternate"></link><published>2015-10-30T22:38:00+00:00</published><updated>2015-10-30T22:38:00+00:00</updated><author><name>jpowcode</name></author><id>tag:None,2015-10-30:/hitachi-hard-disk-recorder-repair.html</id><summary type="html">&lt;p class="first last"&gt;A simple repair of a hard disk recorder.&lt;/p&gt;
</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;I've been watching the &lt;a class="reference external" href="https://www.youtube.com/user/EEVblog"&gt;EEV
Blog&lt;/a&gt; videos by David Jones
recently and was inspired by some of his repairs to give it a go myself.
I found an old hard disk recorder, a Hitachi HDR080 that I'd stuffed
away in a dark corner of my spare room. It had completely died a few
years ago. There was no power getting to either the hard disk or the
front control panel.  I suspected a power supply failure a first
inspection revealed an electrolytic capacitor with a domed top. You can
see the offending capacitor in the photo below left. I found a spare and
replaced it. It's the big black on the left of the centre photo below.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="33%"/&gt;
&lt;col width="33%"/&gt;
&lt;col width="33%"/&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external image-reference" href="/images/2015-10-30_16.06.45.jpg"&gt;&lt;img alt="2015-10-30 16.06.45" class="aligncenter wp-image-185" src="/images/2015-10-30_16.06.45.jpg" style="width: 385px; height: 217px;"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external image-reference" href="/images/2015-10-30_16.05.35.jpg"&gt;&lt;img alt="2015-10-30 16.05.35" class="aligncenter wp-image-188" src="/images/2015-10-30_16.05.35.jpg" style="width: 379px; height: 214px;"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external image-reference" href="/images/2015-10-30_16.05.49.jpg"&gt;&lt;img alt="2015-10-30 16.05.49" class="aligncenter wp-image-186" src="/images/2015-10-30_16.05.49.jpg" style="width: 386px; height: 217px;"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This did the trick and the recorder powered up. Unfortunately it failed
to properly tune in all the channels. Playback was fine but recording a
new channel gave it problems. A bit of an internet search revealed that
in 2012 my local TV transmitter had it's analogue signal turned off.
Even though my recorder has a digital tuner this causes problems for
some reason. I did try searching for a firmware update, but to no avail.
According to some forums Hitachi did offer to upgrade the software if
you sent your unit back, but that was more than 3 years ago so I think I
will call this one a done. A successful repair, but unfortunately
scuppered by things out of my control :-x&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content><category term="Repair"></category><category term="Electronics"></category><category term="Repair"></category></entry><entry><title>Arduino Tips Number 3: Scheduling Tasks</title><link href="/arduino-tips-number-3-scheduling-tasks.html" rel="alternate"></link><published>2015-10-20T22:10:00+01:00</published><updated>2015-10-20T22:10:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2015-10-20:/arduino-tips-number-3-scheduling-tasks.html</id><summary type="html">&lt;p class="first last"&gt;Using a library to time events on a set interval.&lt;/p&gt;
</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;Often an Arduino sketch needs to do things at regular time intervals.
For example, my home automation system has data collection boards that
record temperature, humidity, light and motion. This can be done using
the built in delay function, but everything halts whilst you wait for a
delay or
the &lt;a class="reference external" href="https://www.arduino.cc/en/Reference/Millis"&gt;millis &lt;/a&gt;function.
This all gets a bit complicated, but there is an easier and much more
convenient way by using the &lt;a class="reference external" href="http://playground.arduino.cc/Code/Timer"&gt;timer
library&lt;/a&gt;. This simple bit of
code demonstrates how it works in my home automation system. We start by
importing the library and setting up timer variable. In the setup
function we call the timer.every function with arguments 2000 (in
milliseconds) and findTemp. This will call my function findTemp
(defiened later in the code), which contains all of the gubbins to read
my temperature sensors. This will be called every two seconds. In the
loop function we call the timer.update function which will repeatedly
check the time to determine if a timer.every needs to be called.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/64b818bece119f62e0f4.js"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;#include "Timer.h"
Timer timer;

void setup()
  {
  timer.every(2000, findTemp);
  }
  
void loop()
  {
  timer.update();
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;In my home automation code I define several different timer.every
functions to call different functions for example to read smoke
detectors, light sensors, motion sensors and humidity sensors. They are
all timed at different intervals for different uses.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content><category term="Electronics"></category><category term="Arduino"></category><category term="Home Automation"></category><category term="Robotics"></category><category term="IoT"></category><category term="C"></category></entry><entry><title>Arduino Tips Number 2: Moving Averages</title><link href="/arduino-tips-number-2-moving-averages.html" rel="alternate"></link><published>2015-10-19T21:13:00+01:00</published><updated>2015-10-19T21:13:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2015-10-19:/arduino-tips-number-2-moving-averages.html</id><summary type="html">&lt;p class="first last"&gt;Calculate moving averages easily for smoothing sensor data.&lt;/p&gt;
</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;Sometimes when you collect data it can be quite noisy and you need to
smooth it out. A &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Moving_average"&gt;moving
average&lt;/a&gt; is perfect for
this. There is a good library that makes this easy called
&lt;a class="reference external" href="https://github.com/asheeshr/Microsmooth"&gt;microsmooth&lt;/a&gt;. If you have
the latest version of the Arduino IDE installed it is easy enough to
install this. Select the Sketch/include library/manage libraries option
form the menu and search for microsmooth.  I've written a small
programme to below to demonstrate it's use. This programme will read a
value from a light sensor connected to analogue pin A0 once every half a
second and write both the unsmoothed and the smoothed value to the
Serial port.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/04cd40554b76955271ab.js"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;#include &lt;microsmooth.h&gt;

uint16_t *l_ptr;
const int lightPin =  A0;

void setup()
  {
  l_ptr = ms_init(SMA);
  
  Serial.begin(9600);
  Serial.println("StartSerial");
  }
  
void loop()
  {
  int lightSensor  = analogRead(lightPin);
  int lightSmooth = sma_filter(lightSensor, l_ptr);
  Serial.print(lightSensor);
  Serial.println(lightSmooth);
  delay(500);
  }&lt;/microsmooth.h&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;The code works as follows:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;before the setup function we import the library and then setup a
pointer to accept the smoothed value and an integer to hold the value
of the analogue pin to be read (this just aids in readability of the
code later on).&lt;/li&gt;
&lt;li&gt;in the setup function we initialise the pointer using an function
from the microsmooth library and setup the serial port.&lt;/li&gt;
&lt;li&gt;in the main loop we read the value of the light sensor (or any other
sensor) pass this value in to the microsmooth sma function, which is
a simple moving average, and print both the unsmoothed and the
smoothed values to the serial port.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are other types of smoothing available in the library&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content><category term="Electronics"></category><category term="Arduino"></category><category term="Home Automation"></category><category term="Robotics"></category><category term="Electronics"></category><category term="C"></category></entry><entry><title>Search Documentation from your IDE</title><link href="/search-documentation-from-your-ide.html" rel="alternate"></link><published>2015-10-15T21:13:00+01:00</published><updated>2015-10-15T21:13:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2015-10-15:/search-documentation-from-your-ide.html</id><summary type="html">&lt;p class="first last"&gt;Using Zeal for documentation searching from Atom.&lt;/p&gt;
</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;I stumbled across &lt;a class="reference external" href="https://zealdocs.org/"&gt;Zeal&lt;/a&gt; in a magazine. It's a
GUI for displaying the documentation for various different programming
languages and tools all in one place. There are also plugins for various
different IDE and text editors. I use the Atom browser and installed
&lt;a class="reference external" href="https://atom.io/packages/atom-zeal"&gt;atom-zeal&lt;/a&gt;. Now all I have to do
is put the cursor over a word in my code, press ctrl-h and up pops zeal
with the relevant documentation.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content><category term="Other"></category><category term="Atom IDE"></category><category term="Linux"></category></entry><entry><title>Pyboard Basics</title><link href="/pyboard-basics.html" rel="alternate"></link><published>2015-10-13T21:27:00+01:00</published><updated>2015-10-13T21:27:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2015-10-13:/pyboard-basics.html</id><summary type="html">&lt;p class="first last"&gt;Running Micro Python on a microcontroller.&lt;/p&gt;
</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;There seems to be a new and different micro controller development board
being released every week at the moment. There also seems to be a trend
towards supporting different languages. I just got myself a
&lt;a class="reference external" href="https://micropython.org/"&gt;Pyboard&lt;/a&gt; to play with. The clue is in the
name with this one: it come preloaded with a restricted version of
Python called MicroPython. IT took me a while to get set up with using
this on Ubuntu so I thought I'd give a brief description here. First we
are going to need a need a command line tool called minicom which can be
installed with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;minicom
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Plug your Pyboard into the USB port and run minicom with this command:&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;minicom&lt;span class="w"&gt; &lt;/span&gt;-D&lt;span class="w"&gt; &lt;/span&gt;/dev/ttyACM0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now hit ctrl-a, this will instruct minicom to accept commands, followed
by ctrl-c which will send a keyboard interrupt tot the pyboard and you
should now see an interactive command prompt or REPL (read, evaluate,
print loop). Navigate to the PYBFLASH folder, open the main.py file with
your favourite editor, edit it and save it. Now return to the command
prompt with minicom running and hit ctrl-d this will perfom a soft
restart of the pyboard. When it restarts it will run the main.py file.
You should either see the output of your code at the command prompt or
more likely a runtime error. Correct it, hit ctrl-d and repeat. If
anything goes seriously wrong you will need to do a hard reset of the
Pyboard by pressing the reset button on the board itself. Before doing
this however, make sure you quit minicom by hitting ctrl-a, followed by
x (without the ctrl). I have found failing to do this can cause Ubuntu
to crash.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content><category term="Python"></category><category term="Internet of Things"></category><category term="Pyboard"></category><category term="Python"></category></entry><entry><title>More Python Decorators</title><link href="/more-python-decorators.html" rel="alternate"></link><published>2015-05-01T18:20:00+01:00</published><updated>2015-05-01T18:20:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2015-05-01:/more-python-decorators.html</id><summary type="html">&lt;p class="first last"&gt;Python decorators for errors and memoization&lt;/p&gt;
</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;I've read a few introductory books and articles about python now and
decided it was time to look for a more advanced book. I've started
reading &lt;a class="reference external" href="http://www.amazon.co.uk/Python-Experts-Voice-Open-Source/dp/1430227575"&gt;Pro
Python&lt;/a&gt; by
&lt;a class="reference external" href="http://martyalchin.com/"&gt;Marty Alchin&lt;/a&gt;. It goes into a lot more
depth about python. One of the chapters talks a lot about functions and
describes several more applications of decorators. Briefly as follows&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;A decorator that will suppress any error raised by using a try/except
block&lt;/li&gt;
&lt;li&gt;A memoization decorator that "remembers" arguments that a function
has been called with in the past and it's corresponding return
values. If the decorated function is called with the same arguments
again it simply returns the value stored in the cache instead of
performing the calculation again.&lt;/li&gt;
&lt;li&gt;A decorator that turns a function into a decorator function! I know,
bends your brain a bit doesn't it?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I thoroughly recommend reading this book if you want to learn more about
the decorators. If you know any other good uses for decorators please
let me know in the comments.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content><category term="Python"></category><category term="decorators"></category><category term="Python"></category></entry><entry><title>Timing a Linux Server to Suspend and Restart</title><link href="/timing-a-linux-server-to-suspend-and-restart.html" rel="alternate"></link><published>2015-04-22T21:42:00+01:00</published><updated>2015-04-22T21:42:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2015-04-22:/timing-a-linux-server-to-suspend-and-restart.html</id><summary type="html">&lt;p class="first last"&gt;Using rtc wake to enable a server to restart itself.&lt;/p&gt;
</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;I run a Ubuntu Linux sever at home for various tasks such as serving out
media, backing up files and acting as a personal cloud. I don't need it
on all the time, but I don't want to be bothered turning in on and off.
A simple fix for this is to make use of the commands rtcwake and
crontab. The steps for doing this are as follows:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;cron is a service that can be used to schedule events. To run it, in
a terminal type &lt;em&gt;sudo crontab -e&lt;/em&gt;. It is important to run this using
sudo as the rtcwake command needs to be run with root privileges. You
will have a crontab file for each user on your machine, but only the
one for root will work.&lt;/li&gt;
&lt;li&gt;Enter the following line at the bottom of the file:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;00&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;***&lt;span class="w"&gt; &lt;/span&gt;/usr/sbin/rtcwake&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;mem&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;64800&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are a few things to explain here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The first two digits represent the minutes past the hour, and the
second two are the hour that my command will run.&lt;/li&gt;
&lt;li&gt;The three stars are in place of day, week and month, so my command
will run every day at 23:00.&lt;/li&gt;
&lt;li&gt;It is import to include the full path to the rtcwake command. Check
with the command &lt;em&gt;which rtcwake&lt;/em&gt; that yours is in the same place.&lt;/li&gt;
&lt;li&gt;The -m mem part tells the rtcwake command to suspend everything and
save it to RAM. It is also possible to save to disk, but I didn't
have much success with this.&lt;/li&gt;
&lt;li&gt;the -s 64800 tells the rtcwake command to restart the machine after
64800 seconds or 18 hours which is 17:00.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So now my server will shut itself down at 11pm at night and restart at
5pm every afternoon.&lt;/p&gt;
&lt;p&gt;When I explained this to my wife she instantly asked what if you're
doing something with the server at 11pm will you loose it all. So there
is an interesting question: how could I write a script to check if
something important was happening and suspend the shutdown?&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content><category term="Linux"></category><category term="Linux"></category><category term="Server"></category><category term="Ubuntu"></category></entry><entry><title>Arduino Tips Number 1: Using an External IDE</title><link href="/arduino-tips-number-1-using-an-external-ide.html" rel="alternate"></link><published>2015-04-19T21:17:00+01:00</published><updated>2015-04-19T21:17:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2015-04-19:/arduino-tips-number-1-using-an-external-ide.html</id><summary type="html">&lt;p class="first last"&gt;Using an IDE other that the basic Arduino IDE for programming.&lt;/p&gt;
</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.arduino.cc/"&gt;Arduino&lt;/a&gt; is a great resource, but I'm not a
great fan of the Intergrated Development Environment (IDE) that it comes
with. It can however be configured to work with an external IDE. I'm
using the &lt;a class="reference external" href="https://atom.io/"&gt;Atom&lt;/a&gt; IDE which has a few packages that
can be installed to help with things like  code completion. To configure
this follow these steps&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;In the Arduino IDE click the &lt;em&gt;File&lt;/em&gt; menu followed by &lt;em&gt;Preferences&lt;/em&gt;.
Check the box that says "Use external editor" and click on &lt;em&gt;OK&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;In the Atom IDE click the &lt;em&gt;Edit&lt;/em&gt; menu followed by &lt;em&gt;Preferences&lt;/em&gt;.
Click on the &lt;em&gt;Install&lt;/em&gt; option and a search bar should appear. Type in
&lt;em&gt;Arduino&lt;/em&gt;. Hit the &lt;em&gt;Install&lt;/em&gt; button for the the package
"&lt;a class="reference external" href="https://atom.io/packages/language-arduino"&gt;language-arduino&lt;/a&gt;"&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My work flow for programming an Arduino now goes like this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Open a file in both the Atom and Arduino IDE's.&lt;/li&gt;
&lt;li&gt;Edit some code in Atom and save it.&lt;/li&gt;
&lt;li&gt;Alt-Tab to switch to the Arduino IDE.&lt;/li&gt;
&lt;li&gt;Either Ctrl-R to verify the code or Ctrl-U to download it to the chip&lt;/li&gt;
&lt;li&gt;Alt-Tab back to the Atom IDE and edit some more.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This give me the power and ease of using the same IDE for editing all my
code, but takes very little time and faff to set up.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update October 2017&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I've now discovered &lt;a class="reference external" href="http://platformio.org/"&gt;PlatformIO&lt;/a&gt; which integrates
very nicely with the &lt;a class="reference external" href="https://atom.io/"&gt;Atom Editor&lt;/a&gt; and allows programming
of many different microcontrollers directly from the editor.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content><category term="Electronics"></category><category term="Arduino"></category><category term="Programming"></category></entry><entry><title>Some Python Decorators</title><link href="/some-python-decorators.html" rel="alternate"></link><published>2015-03-01T17:13:00+00:00</published><updated>2015-03-01T17:13:00+00:00</updated><author><name>jpowcode</name></author><id>tag:None,2015-03-01:/some-python-decorators.html</id><summary type="html">&lt;p class="first last"&gt;Python decorators for counting, timing and logging.&lt;/p&gt;
</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;I've been learning how to use decorators in Python. As far I understand
it a decorator takes as input a function, does something with or to the
function and then returns the function. To test out this functionality
I've written five examples. First the following preamble is included at
the top of the file containing the decorator functions:&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/3b86f826d03c7852570b.js?file=preample.py"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;from functools import wraps
from datetime import datetime as dt
import logging
                    
logging.basicConfig(format='%(message)s',level=logging.NOTSET)&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;countit&lt;/strong&gt; - will print a line to the terminal every time the function
is called with the number of times it has been called.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/3b86f826d03c7852570b.js?file=countit.py"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;def countit(interceptedFunction):
	"""A decorator that intercepts a function and it's arguments *args 
	and **kwargs and logs the number of times the function has been 
	called to the terminal"""
	
	@wraps(interceptedFunction)
	def counter(*args, **kwargs):
		counter.called += 1
		functionName = interceptedFunction.func_name
		actualResult = interceptedFunction(*args, **kwargs)
		logging.debug('\n ######  Function: [{fnc}] =&amp;gt;  [{count}]  ######'
					.format(fnc=functionName, count=counter.called))
		return actualResult
	counter.called = 0
	return counter&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;timeit&lt;/strong&gt; - times how long a function takes to run and prints this to
the terminal.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/3b86f826d03c7852570b.js?file=timeit.py"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;def timeit(interceptedFunction):
	"""A decorator that intercepts a function and it's arguments *args 
	and **kwargs times the duration of thefunction and then returns it 
	and logs it to the terminal """
	
	@wraps(interceptedFunction)
	def timer(*args, **kwargs):
		functionName = interceptedFunction.func_name
		start = dt.now()
		actualResult = interceptedFunction(*args, **kwargs)
		stop = dt.now()
		executionTime = stop - start
		logging.debug('Function: [{fnc}] =&amp;gt; Took [{timed}]'
					.format(fnc=functionName, timed=executionTime))
		
		return actualResult
	
	return timer&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;logit&lt;/strong&gt; - prints to the the terminal the output that is returned from
a function.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/3b86f826d03c7852570b.js?file=logit.py"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;def logit(interceptedFunction):
	"""A decorator that intercepts a function and it's arguments *args 
	and **kwargs and logs what the function returns to the terminal
	as well as the input to the function"""
	
	@wraps(interceptedFunction)
	def logger(*args, **kwargs):
		functionName = interceptedFunction.func_name
		functionArguments = []
		
		if kwargs is not None:
			for arg in args:
				functionArguments.append(arg)
            
		actualResult = interceptedFunction(*args, **kwargs)
		logging.debug('Function: [{fnc}] =&amp;gt; Returns [{returned}] with input {inp}'
					.format(fnc=functionName, returned=actualResult, inp=functionArguments))
		return actualResult
	
	return logger&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;beforeit&lt;/strong&gt; - runs a function that is passed as an argument to the
decorator before each function call.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/3b86f826d03c7852570b.js?file=beforeit.py"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;def beforeit(inputFunc):
	"""A decorator that intercepts a function and it's arguments *args 
	and **kwargs and calls another function (inputFunc) first """
	functionName = inputFunc.func_name
	def beforeFunc(interceptedFunction):		
		@wraps(interceptedFunction)
		def before(*args, **kwargs):
			inputFunc()
			actualResult = interceptedFunction(*args, **kwargs)
			return actualResult					
		return before
	return beforeFunc&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;afterit&lt;/strong&gt; - runs a function that is passed as an argument to the
decorator after each function call.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/3b86f826d03c7852570b.js?file=afterit.py"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;def afterit(inputFunc):
	"""A decorator that intercepts a function and it's arguments *args 
	and **kwargs and calls another function (inputFunc) after """
	functionName = inputFunc.func_name
	def afterFunc(interceptedFunction):				
		@wraps(interceptedFunction)
		def after(*args, **kwargs):			
			actualResult = interceptedFunction(*args, **kwargs)
			inputFunc()
			return actualResult			
		return after
	return afterFunc&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;Each of these decorators can be used individually or as a group. For
example, this is a function that computes prime numbers in a rather
inefficient manner by calculating the factors of each number smaller
than it (a better method would be to use the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes"&gt;seive of
Eratosthenes&lt;/a&gt;).
It has been decorated with the first three functions above. It is then
called three times as follows:&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/3b86f826d03c7852570b.js?file=funcall.py"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;import time, random
from pythonDecorators import *

@logit
@timeit
@countit
def isprime(p):
	i=2
	while i&amp;lt;= p/2:
		if p%i==0:
			return False
		i=i+1
	return True
	
for num in (7919, 399941, 1042709):
	isprime(num)&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;The output produced is:&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/3b86f826d03c7852570b.js?file=output"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt; ######  Function: [isprime] =&amp;gt;  [1]  ######
Function: [isprime] =&amp;gt; Took [0:00:00.008360]
Function: [isprime] =&amp;gt; Returns [True] with input [7919]

 ######  Function: [isprime] =&amp;gt;  [2]  ######
Function: [isprime] =&amp;gt; Took [0:00:00.120358]
Function: [isprime] =&amp;gt; Returns [True] with input [399941]

 ######  Function: [isprime] =&amp;gt;  [3]  ######
Function: [isprime] =&amp;gt; Took [0:00:00.251844]
Function: [isprime] =&amp;gt; Returns [True] with input [1042709]
&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;So whenever I am writing a new python programme I can now import my
decorators file and I will have access to the timeit, countit and logit
beforit and afterit decorators to aid in debugging.&lt;/p&gt;
&lt;p&gt;If you can think of any other useful applications for decorators please
let me know in the comments.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content><category term="Python"></category><category term="Python"></category></entry><entry><title>Robotic Arm Using Bioloid AX-12A Servos: Part 2</title><link href="/robotic-arm-using-bioloid-ax-12a-servos-part-2.html" rel="alternate"></link><published>2015-01-31T12:24:00+00:00</published><updated>2015-01-31T12:24:00+00:00</updated><author><name>jpowcode</name></author><id>tag:None,2015-01-31:/robotic-arm-using-bioloid-ax-12a-servos-part-2.html</id><summary type="html">&lt;p class="first last"&gt;Calculating the position of a robotic arm using inverse kinematics&lt;/p&gt;
</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;In this post I will describe how I calculate the servo postions to place
the tip of the arm at some specified coordinates. For example, if the
arm needs to pick something up off the ground in a specific place there
will be several combinations of joint positions that will get the arm to
that place. I created a simple app
using &lt;a class="reference external" href="https://www.geogebra.org/"&gt;Geogebra&lt;/a&gt; to demonstrate and
test different joint positions. Moving the sliders changes the length of
the joint position and gabbing and moving a point will change the joint
angles. This will be useful for testing the code that controls the arm.
This app can also be viewed on
&lt;a class="reference external" href="http://tube.geogebra.org/student/m557391"&gt;Geogebratube&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Simulation of the degrees of freedom of a robotic arm." class="size-full wp-image-153" src="/images/robot_arm_geogebra.png" style="width: 800px; height: 500px;"/&gt;&lt;/p&gt;
&lt;p&gt;To calculate the joint positions I have adapted a programme created by
&lt;a class="reference external" href="https://studywolf.wordpress.com/2013/04/11/inverse-kinematics-of-3-link-arm-with-constrained-minimization-in-python/"&gt;studywolf&lt;/a&gt;
to work for a 4 degree of freedom arm. The programme takes as input the
current position of the arm and the desired position of the arm and uses
an optimisation algorithm from the
&lt;a class="reference external" href="http://docs.scipy.org/doc/scipy/reference/tutorial/optimize.html"&gt;scipy&lt;/a&gt;
library to find joint positions that require the smallest change
possible to reach the desired position. I've decommented the code,
broken it up and described it below. The original code is on studywolfs
&lt;a class="reference external" href="https://github.com/studywolf/blog/tree/master/InvKin"&gt;github page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We need to import math, numpy and scipy.optimise libraries. The init
method of the class checks whether any parameters have been passed and
creates any that are missing. The inputs are&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;q - an array holding the initial joint positions.&lt;/li&gt;
&lt;li&gt;q0 - an array holding the resiting joint positions&lt;/li&gt;
&lt;li&gt;L - an array holding the lengths of the joints.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Two arrays max_angles and min_angles are also created to provide
limits of movement on the arm's joint positions to prevent it from over
extending or moving to positions that are restricted by brackets.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/525dd84515f94aa834f8.js?file=initfunc.py"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;import math
import numpy as np
import scipy.optimize  

class Arm3Link:
    
    def __init__(self, q = None, q0 = None, L = None):       
		
        if q is None: 
	        q = [math.pi/4, math.pi/4, 0, 0]
	self.q = q
			
        if q0 is None: 
		q0 = np.array([math.pi/4, math.pi/4, 0, 0]) 
	self.q0 = q0
			
        if L is None: 
		L = np.array([1, 1, 1, 1]) 
	self.L = L
			
        self.max_angles = [math.pi, math.pi, math.pi, math.pi ]
        self.min_angles = [0, 0, -math.pi, -math.pi]&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;The get_xy method takes as input an array of joint positions and
calculates the (x,y) coordinates of the the end of the arm using some
trigonometry. Details on studywolf's blog.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/525dd84515f94aa834f8.js?file=getxyfunc.py"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;def get_xy(self, q=None):
		       
        if q is None: 
		q = self.q

        x = self.L[0]*np.cos(q[0]) + \
            self.L[1]*np.cos(q[0]+q[1]) + \
            self.L[2]*np.cos(q[0]+q[1]+q[2]) + \
            self.L[3]*np.cos(np.sum(q)) 
            

        y = self.L[0]*np.sin(q[0]) + \
            self.L[1]*np.sin(q[0]+q[1]) + \
	    self.L[2]*np.sin(q[0]+q[1]+q[2]) + \
            self.L[3]*np.sin(np.sum(q))

        return [x, y]&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;The inv_kin method is the one that does all the grunt work using the
scipy.optimise function.&lt;/p&gt;
&lt;p&gt;distance_to_default is the function that will be minimised. It is a
measure of how far all the joints will have to move. The weight array
puts heavier penalties on some joints moving that others.&lt;/p&gt;
&lt;p&gt;x_constraint calculates the distance in the x-direction from the
current position to a new position with given joint angles.
y_constraint does the same in the y direction.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/525dd84515f94aa834f8.js?file=invkinfunc.py"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;def inv_kin(self, xy):
        
        def distance_to_default(q, *args): 
            weight = [1, 1, 1.3, 1] 
            return np.sqrt(np.sum([(qi - q0i)**2 * wi for qi,q0i,wi in zip(q, self.q0, weight)]))

        def x_constraint(q, xy):          
            x = ( self.L[0]*np.cos(q[0]) + self.L[1]*np.cos(q[0]+q[1]) + 
                self.L[2]*np.cos(q[0]+q[1]+q[2]) + self.L[3]*np.cos(np.sum(q)) ) - xy[0]
            return x

        def y_constraint(q, xy): 
            y = ( self.L[0]*np.sin(q[0]) + self.L[1]*np.sin(q[0]+q[1]) + 
                self.L[2]*np.sin(q[0]+q[1]+q[2]) + self.L[3]*np.sin(np.sum(q)) ) - xy[1]
            return y

        return scipy.optimize.fmin_slsqp( func=distance_to_default, 
            x0=self.q, eqcons=[x_constraint, y_constraint], 
            args=(xy,), iprint=0) 
&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;To get all of this to work we create a function findJointPos that
creates an instance of the class and calls the inv_kin method. It
returns an array cotaining the optimal joint positions to place the arm
in this positon. For example if we call findJoinPos(2, 2) and we get the
angles [-0.33, 0.84, 0.56, 0.80] which are in radians. Converting these
to degrees gives approximately [-19, 48, 32, 46]. Using the Geogebra
demo above to set the angles we can see that the arm does indeed get to
the point (2,2).&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/525dd84515f94aa834f8.js?file=findjoitposfunc.py"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;def findJointPos(x, y):
   
    arm = Arm3Link()
    xy = [x, y]
    return arm.inv_kin(xy)
    
print findJointPos(2,2)&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;</content><category term="Robotics"></category><category term="Geogebra"></category><category term="Inverse Kinematics"></category><category term="Programming"></category><category term="Python"></category><category term="Robotics"></category></entry><entry><title>Linux Mint Graphics Driver Issue</title><link href="/linux-mint-graphics-driver-issue.html" rel="alternate"></link><published>2015-01-28T23:10:00+00:00</published><updated>2015-01-28T23:10:00+00:00</updated><author><name>jpowcode</name></author><id>tag:None,2015-01-28:/linux-mint-graphics-driver-issue.html</id><summary type="html">&lt;p class="first last"&gt;Some isues with graphics drivers on Linux Mint and a fix.&lt;/p&gt;
</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;I just installed Linux Mint 17 Cinamon on my PC. All went well until a
few minutes after rebooting the screen went all wierd! I don't really
know how else to describe it, funny squares all over the place. It seems
to be a driver issue with the Nvidia Cards possibly linked to having a
dual monitor setup. I'm running a GTX 660. A simple fix seems to be to
disconnect one monitor restart the machine and change drivers. I opened
the Driver Manager from the Administration menu and changed my driver to
nvidia-331. No problems since then.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content><category term="Linux"></category><category term="graphics driver"></category><category term="Linux"></category><category term="Mint"></category><category term="Ubuntu"></category></entry><entry><title>Robotic Arm using Bioloid AX-12A Servos: Part 1</title><link href="/robotic-arm-using-bioloid-ax-12a-servos.html" rel="alternate"></link><published>2015-01-24T20:20:00+00:00</published><updated>2015-01-24T20:20:00+00:00</updated><author><name>jpowcode</name></author><id>tag:None,2015-01-24:/robotic-arm-using-bioloid-ax-12a-servos.html</id><summary type="html">&lt;p class="first last"&gt;A robotic arm built from Dynamixel serially addressable servos.&lt;/p&gt;
</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;Building robots is a bit of a passion of mine; from roamers to arms and
walkers. I'm going to write about some of them starting with a
multi-part post about a robotic arm. In this post I will describe the
various bits and contruction of the arm.&lt;/p&gt;
&lt;p&gt;I'm using &lt;a class="reference external" href="http://www.trossenrobotics.com/dynamixel-ax-12-robot-actuator.aspx"&gt;Dynamixel&lt;/a&gt;
AX-12A servos. These are slightly different to your usual hobby servos
as are controlled via a serial bus rather than with PWM signals. This
makes them much easier to wire together as they can be daisy chained.
They can also feedback information about themselves to the controller
such as thier temperature, load and position. These servos can be
interfaced to a PC in several different ways. I will be using a
&lt;a class="reference external" href="http://www.trossenrobotics.com/robotis-bioloid-usb2dynamixel.aspx"&gt;USB2Dynamixel
controller&lt;/a&gt;
that interfaces from USB to a signal the Dynamixel servos can
understand.&lt;/p&gt;
&lt;p&gt;To construct the arm I am using plastic brackets from the &lt;a class="reference external" href="http://www.robotis.com/xe/bioloid_en"&gt;Robotis
Bioloid Construction Kit&lt;/a&gt;. This
provides lots of different brackets and attachments for connecting
servos together to form arms, hexapods and bipeds. I looked various
different arms available from
&lt;a class="reference external" href="http://www.crustcrawler.com/"&gt;Crustcrawler&lt;/a&gt; and
&lt;a class="reference external" href="http://www.lynxmotion.com/"&gt;LynxMotion&lt;/a&gt; and settled on a 9 servo
design, one to rotate the base, two for the main shoulder joint, three
more joints in the arm, one write rotate and two for the gripper.
Robotis provide various bits of software. &lt;a class="reference external" href="http://support.robotis.com/en/software/roboplus/roboplus_motion_main.htm"&gt;RoboPlus
Motion&lt;/a&gt;:
using this servos can be dynamically set to test positions. This is
useful for working out different servo settings for various positions
that the arm will need to be in. &lt;a class="reference external" href="http://support.robotis.com/en/software/roboplus/roboplus_task_main.htm"&gt;RoboPlus
Task&lt;/a&gt;:
a C like programming language. I will not be using this to control the
arm as it is limited in features. Instead I will be using a &lt;a class="reference external" href="https://github.com/iandanforth/pydynamixel"&gt;Python
library&lt;/a&gt; for control.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="52%"/&gt;
&lt;col width="48%"/&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Full arm in crouched position&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="Full arm in crouched position" class="size-medium wp-image-99" src="/images/robot_arm1.jpg" style="width: 300px; height: 169px;"/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Detail of the gripper&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="Detail of the gripper" class="size-medium wp-image-96" src="/images/robot_arm2.jpg" style="width: 300px; height: 169px;"/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Detail of the shoulder&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="Detail of the shoulder join" class="size-medium wp-image-97" src="/images/robot_arm3.jpg" style="width: 300px; height: 169px;"/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/body&gt;&lt;/html&gt;</content><category term="Robotics"></category><category term="Programming"></category><category term="Python"></category><category term="Robotics"></category></entry><entry><title>Android Apps for Programmers, Makers and Hackers</title><link href="/android-apps-for-programmers-makers-and-hackers.html" rel="alternate"></link><published>2015-01-17T20:38:00+00:00</published><updated>2015-01-17T20:38:00+00:00</updated><author><name>jpowcode</name></author><id>tag:None,2015-01-17:/android-apps-for-programmers-makers-and-hackers.html</id><summary type="html">&lt;p class="first last"&gt;A selection of useful apps for programmers and makers.&lt;/p&gt;
</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;A while ago I bought a new Android phone, a Motorola Moto-G. What's
the frst thing I did? Install loads of apps for programming and other stuff for general making and hacking. I'm going
to describe them here. I haven't used all of them yet so I'd be interest to know, if anyone is using them and what for?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;General Tools&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.estrongs.android.pop&amp;amp;hl=en_GB"&gt;ES File Explorer&lt;/a&gt;
View the file system on your phone/tablet.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.opticron.grapher&amp;amp;hl=en_GB"&gt;Grapher&lt;/a&gt;
Graph mathematical functions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Programming Tools&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.hipipal.qpyplus&amp;amp;hl=en_GB"&gt;Q Python&lt;/a&gt;
Write and run python scripts.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=org.pocketworkstation.pckeyboard&amp;amp;hl=en_GB"&gt;Hackers Keyboard&lt;/a&gt;
If you want to programme on Android it's often difficult to enter some
characters on the default  keyboard. The hackers keyboard gives you
all the keys you could ever need.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=jackpal.androidterm&amp;amp;hl=en_GB"&gt;Terminal Emulator&lt;/a&gt;
Android is based on Linux and contains a hidden command shell. This
app gives you access to it.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.oscd.manpages&amp;amp;hl=en_GB"&gt;*nix manpagees&lt;/a&gt;
Full listing of all the Linux command man pages.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.henrythompson.quoda&amp;amp;hl=en_GB"&gt;Quoda&lt;/a&gt;
and &lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.aor.droidedit&amp;amp;hl=en_GB"&gt;Droid
Edit&lt;/a&gt;
Fully featured text editors for writing code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Network Tools&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.overlook.android.fing&amp;amp;hl=en_GB"&gt;Fing&lt;/a&gt;
Scans the WiFi you are currently connected to and gives details on all
other devices connected to it include IP addresses
and MAC addressess. Very useful for setting up and testing your home
network.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.schimera.webdavnavlite&amp;amp;hl=en_GB"&gt;Webdavnav&lt;/a&gt;
If you have a webdav enabled server this gives you access to all the files on it.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.sonelli.juicessh&amp;amp;hl=en_GB"&gt;JuiceSSH&lt;/a&gt;
Sets up an ssh connection to another computer on your network. Use it
for server admin.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.realvnc.viewer.android&amp;amp;hl=en_GB"&gt;VNC Viewer&lt;/a&gt;
Give you a full graphical connection to another computer on your
network.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Arduino Tools&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.primavera.arduino.listener&amp;amp;hl=en_GB"&gt;Arduino UNO Communicator&lt;/a&gt;
Connects to your Arduino UNO board and allows it to send messages to
your phone.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=name.antonsmirnov.android.arduinodroid2&amp;amp;hl=en_GB"&gt;Arduino Droid&lt;/a&gt;
Full IDE and compile for the arduino. Programme an
&lt;a class="reference external" href="http://www.arduino.cc/"&gt;Arduino&lt;/a&gt; from a tablet or phone.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Design Tools&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.grabcad&amp;amp;hl=en_GB"&gt;Grab CAD&lt;/a&gt;and&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.thingiverse&amp;amp;hl=en_GB"&gt;Thingiverse&lt;/a&gt;
Apps that allow you to browse the libraries of
&lt;a class="reference external" href="http://www.thingiverse.com/"&gt;Thingiverse&lt;/a&gt; and
&lt;a class="reference external" href="http://grabcad.com/"&gt;Grabcad&lt;/a&gt;. These are libraries of downloadable
resources that can be 3D printed or lasercut.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.autodesk.autocadws&amp;amp;hl=en_GB"&gt;AutoCAD360&lt;/a&gt;
and
&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.autodesk.ADRViewer&amp;amp;hl=en_GB"&gt;AutoDesk360&lt;/a&gt;
View and edit autocad files.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.autodesk.fbd.activities&amp;amp;hl=en_GB"&gt;AutoDesk Force Effect&lt;/a&gt;
and Force &lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.autodesk.forceeffectmotion&amp;amp;hl=en_GB"&gt;Efffect Motion&lt;/a&gt;
Invent and design a working contraption! Experiment with forces and joints.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.autodesk.Fysc&amp;amp;hl=en_GB"&gt;Inventor Publisher&lt;/a&gt;
Veiw your inventor publisher files.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.sketchbookexpress&amp;amp;hl=en_GB"&gt;Sketchbook Mobile Express&lt;/a&gt;
Design and sketch.&lt;/p&gt;
&lt;p&gt;I Hope you find some of these useful. If there is anything else you think I might like please let me know.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content><category term="Other"></category><category term="Android"></category><category term="Arduino"></category><category term="CAD"></category><category term="Programming"></category><category term="Making"></category></entry><entry><title>BIG numbers in C</title><link href="/big-numbers-in-c.html" rel="alternate"></link><published>2015-01-13T22:25:00+00:00</published><updated>2015-01-13T22:25:00+00:00</updated><author><name>jpowcode</name></author><id>tag:None,2015-01-13:/big-numbers-in-c.html</id><summary type="html">&lt;p class="first last"&gt;Calculating with really big numbers in C using gmp.&lt;/p&gt;
</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;I enjoy learning about different programming languages. One of my
favourite resources for finding programming challenges is the &lt;a class="reference external" href="https://projecteuler.net/"&gt;Project
Euler&lt;/a&gt; website. There are almost 500
problems building up in difficulty. I have recently been learning to
programme in C after originally learning Python. I usually a sizable
chunk of time trying to work out how to do things in C that would be
trivial in Python. One huge difference is in the C's handling of BIG
integers. In Python there is no practical limit to the size of integers.
However, in C we are limited by the operating system to either
2&lt;sup&gt;32&lt;/sup&gt;-1 for 32 bit systems or 2&lt;sup&gt;64&lt;/sup&gt;-1 for 64 bit systems.
In many of the Project Euler problems we are required to find very big
numbers. The solution is to use the
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/GNU_Multiple_Precision_Arithmetic_Library"&gt;gmp&lt;/a&gt;
(Gnu multi-precision) library. Basically this library converts an
integer into a string of single digit numbers. It contains functions for
performing all the basic arithmetical operations on these strings. Here
is a step by step guide on how to get started. All commands will be
based on a Ubuntu operating system.&lt;/p&gt;
&lt;p&gt;First install the library, run this command in the terminal with this
command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;libgmp3-dev
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Copy this code into a file named big_numbers.c&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/c28fffbb1759b0f12e3d.js?file=big_numbers.c"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;gmp.h&gt;

int main(int argc, char *argv[]){
	mpz_t num1, num2, output;		//declare big number variables
	mpz_init(num1);		                //initialise bignumber variables
	mpz_init(num2);
	mpz_init(output);
	
	//set num1 to be the first command line argument in deciaml notation and num2 to be the second argument
	mpz_set_str(num1, argv[1], 10); 
	mpz_set_str(num2, argv[2], 10);
	
	//multiply num1 by num2 and save the output to output variable
	mpz_mul(output, num1, num2);
	
	//need special print function to display output variable as it is not a normal variable. 
	gmp_printf("%Zd\n", output);
	
	return 0;
}&lt;/gmp.h&gt;&lt;/stdio.h&gt;&lt;/stdlib.h&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;compile with this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gcc&lt;span class="w"&gt; &lt;/span&gt;big_numbers.c&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;big_numbers&lt;span class="w"&gt; &lt;/span&gt;-lgmp
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and run with this command to test multiplying some big numbers together&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./big_numbers&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;999999999999&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;999999999999&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The following links give some further information:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.cs.colorado.edu/~srirams/classes/doku.php/gmp_usage_tutorial"&gt;Sriram Sankaranarayanan's tutorial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://beej.us/blog/data/pi-chudnovsky-gmp/"&gt;Beej's Bit Bucket&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/822734/square-root-of-bignum-using-gmp"&gt;Stackoverflow discussion&lt;/a&gt;&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</content><category term="Programming"></category><category term="C"></category><category term="Programming"></category></entry><entry><title>Hello Blogging world!</title><link href="/hello-world.html" rel="alternate"></link><published>2015-01-10T18:07:00+00:00</published><updated>2015-01-10T18:07:00+00:00</updated><author><name>jpowcode</name></author><id>tag:None,2015-01-10:/hello-world.html</id><content type="html">&lt;p&gt;Welcome to my Blog about programming miscellanea. I will be writing
about whatever interests me in the world of programming, electronics and making
amonst other stuff.&lt;/p&gt;
</content><category term="Other"></category></entry></feed>