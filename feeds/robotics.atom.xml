<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>jpowcode - Robotics</title><link href="/" rel="alternate"></link><link href="/feeds/robotics.atom.xml" rel="self"></link><id>/</id><updated>2016-10-19T21:53:00+01:00</updated><entry><title>Robotic Arm Using Bioloid AX-12 Servos: Part 3</title><link href="/robot-turntable.html" rel="alternate"></link><published>2016-10-19T21:53:00+01:00</published><updated>2016-10-19T21:53:00+01:00</updated><author><name>jpowcode</name></author><id>tag:None,2016-10-19:/robot-turntable.html</id><summary type="html">&lt;p class="first last"&gt;Adding a turntable to my dynamixel robotic arm.&lt;/p&gt;
</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;I finally got around to putting my robot arm on a turntable. In a stroke of luck
I found what looked to be perfect in a parts bin for stepper motors at my local
&lt;a class="reference external" href="http://www.makerspace.org.uk"&gt;Makerspace&lt;/a&gt; It looks like a large gear on top of a
bearing and included a toothed belt and accompanying toothed pulley. The servo
shaft needed to be packed out with some copper tube to make it the right diameter
for the pulley. I've then mounted it upside down on some wooden blocks to get it
at the same level as the turnable gear. It seems to work rather well! Check out
the photos below and let me know what you think.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="33%"/&gt;
&lt;col width="33%"/&gt;
&lt;col width="33%"/&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external image-reference" href="/images/turn1.jpg"&gt;&lt;img alt="im1" class="aligncenter wp-image-201" src="/images/turn1.jpg"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external image-reference" href="/images/turn2.jpg"&gt;&lt;img alt="im2" class="aligncenter wp-image-197" src="/images/turn2.jpg"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external image-reference" href="/images/turn3.jpg"&gt;&lt;img alt="im3" class="aligncenter wp-image-200" src="/images/turn3.jpg"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external image-reference" href="/images/turn4.jpg"&gt;&lt;img alt="im4" class="aligncenter wp-image-198" src="/images/turn4.jpg"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external image-reference" href="/images/turn5.jpg"&gt;&lt;img alt="im5" class="aligncenter wp-image-202" src="/images/turn5.jpg"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external image-reference" href="/images/turn6.jpg"&gt;&lt;img alt="im6" class="aligncenter wp-image-200" src="/images/turn6.jpg"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external image-reference" href="/images/turn7.jpg"&gt;&lt;img alt="im7" class="aligncenter wp-image-198" src="/images/turn7.jpg"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external image-reference" href="/images/turn9.jpg"&gt;&lt;img alt="im9" class="aligncenter wp-image-202" src="/images/turn9.jpg"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external image-reference" href="/images/turn8.jpg"&gt;&lt;img alt="im8" class="aligncenter wp-image-202" src="/images/turn8.jpg"/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/body&gt;&lt;/html&gt;</content><category term="Robotics"></category><category term="Robotics"></category><category term="Electronics"></category></entry><entry><title>Robotic Arm Using Bioloid AX-12A Servos: Part 2</title><link href="/robotic-arm-using-bioloid-ax-12a-servos-part-2.html" rel="alternate"></link><published>2015-01-31T12:24:00+00:00</published><updated>2015-01-31T12:24:00+00:00</updated><author><name>jpowcode</name></author><id>tag:None,2015-01-31:/robotic-arm-using-bioloid-ax-12a-servos-part-2.html</id><summary type="html">&lt;p class="first last"&gt;Calculating the position of a robotic arm using inverse kinematics&lt;/p&gt;
</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;In this post I will describe how I calculate the servo postions to place
the tip of the arm at some specified coordinates. For example, if the
arm needs to pick something up off the ground in a specific place there
will be several combinations of joint positions that will get the arm to
that place. I created a simple app
usingÂ &lt;a class="reference external" href="https://www.geogebra.org/"&gt;Geogebra&lt;/a&gt; to demonstrate and
test different joint positions. Moving the sliders changes the length of
the joint position and gabbing and moving a point will change the joint
angles. This will be useful for testing the code that controls the arm.
This app can also be viewed on
&lt;a class="reference external" href="http://tube.geogebra.org/student/m557391"&gt;Geogebratube&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Simulation of the degrees of freedom of a robotic arm." class="size-full wp-image-153" src="/images/robot_arm_geogebra.png" style="width: 800px; height: 500px;"/&gt;&lt;/p&gt;
&lt;p&gt;To calculate the joint positions I have adapted a programme created by
&lt;a class="reference external" href="https://studywolf.wordpress.com/2013/04/11/inverse-kinematics-of-3-link-arm-with-constrained-minimization-in-python/"&gt;studywolf&lt;/a&gt;
to work for a 4 degree of freedom arm. The programme takes as input the
current position of the arm and the desired position of the arm and uses
an optimisation algorithm from the
&lt;a class="reference external" href="http://docs.scipy.org/doc/scipy/reference/tutorial/optimize.html"&gt;scipy&lt;/a&gt;
library to find joint positions that require the smallest change
possible to reach the desired position. I've decommented the code,
broken it up and described it below. The original code is on studywolfs
&lt;a class="reference external" href="https://github.com/studywolf/blog/tree/master/InvKin"&gt;github page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We need to import math, numpy and scipy.optimise libraries. The init
method of the class checks whether any parameters have been passed and
creates any that are missing. The inputs are&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;q - an array holding the initial joint positions.&lt;/li&gt;
&lt;li&gt;q0 - an array holding the resiting joint positions&lt;/li&gt;
&lt;li&gt;L - an array holding the lengths of the joints.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Two arrays max_angles and min_angles are also created to provide
limits of movement on the arm's joint positions to prevent it from over
extending or moving to positions that are restricted by brackets.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/525dd84515f94aa834f8.js?file=initfunc.py"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;import math
import numpy as np
import scipy.optimize  

class Arm3Link:
    
    def __init__(self, q = None, q0 = None, L = None):       
		
        if q is None: 
	        q = [math.pi/4, math.pi/4, 0, 0]
	self.q = q
			
        if q0 is None: 
		q0 = np.array([math.pi/4, math.pi/4, 0, 0]) 
	self.q0 = q0
			
        if L is None: 
		L = np.array([1, 1, 1, 1]) 
	self.L = L
			
        self.max_angles = [math.pi, math.pi, math.pi, math.pi ]
        self.min_angles = [0, 0, -math.pi, -math.pi]&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;The get_xy method takes as input an array of joint positions and
calculates the (x,y) coordinates of the the end of the arm using some
trigonometry. Details on studywolf's blog.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/525dd84515f94aa834f8.js?file=getxyfunc.py"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;def get_xy(self, q=None):
		       
        if q is None: 
		q = self.q

        x = self.L[0]*np.cos(q[0]) + \
            self.L[1]*np.cos(q[0]+q[1]) + \
            self.L[2]*np.cos(q[0]+q[1]+q[2]) + \
            self.L[3]*np.cos(np.sum(q)) 
            

        y = self.L[0]*np.sin(q[0]) + \
            self.L[1]*np.sin(q[0]+q[1]) + \
	    self.L[2]*np.sin(q[0]+q[1]+q[2]) + \
            self.L[3]*np.sin(np.sum(q))

        return [x, y]&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;The inv_kin method is the one that does all the grunt work using the
scipy.optimise function.&lt;/p&gt;
&lt;p&gt;distance_to_default is the function that will be minimised. It is a
measure of how far all the joints will have to move. The weight array
puts heavier penalties on some joints moving that others.&lt;/p&gt;
&lt;p&gt;x_constraint calculates the distance in the x-direction from the
current position to a new position with given joint angles.
y_constraint does the same in the y direction.&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/525dd84515f94aa834f8.js?file=invkinfunc.py"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;def inv_kin(self, xy):
        
        def distance_to_default(q, *args): 
            weight = [1, 1, 1.3, 1] 
            return np.sqrt(np.sum([(qi - q0i)**2 * wi for qi,q0i,wi in zip(q, self.q0, weight)]))

        def x_constraint(q, xy):          
            x = ( self.L[0]*np.cos(q[0]) + self.L[1]*np.cos(q[0]+q[1]) + 
                self.L[2]*np.cos(q[0]+q[1]+q[2]) + self.L[3]*np.cos(np.sum(q)) ) - xy[0]
            return x

        def y_constraint(q, xy): 
            y = ( self.L[0]*np.sin(q[0]) + self.L[1]*np.sin(q[0]+q[1]) + 
                self.L[2]*np.sin(q[0]+q[1]+q[2]) + self.L[3]*np.sin(np.sum(q)) ) - xy[1]
            return y

        return scipy.optimize.fmin_slsqp( func=distance_to_default, 
            x0=self.q, eqcons=[x_constraint, y_constraint], 
            args=(xy,), iprint=0) 
&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;To get all of this to work we create a function findJointPos that
creates an instance of the class and calls the inv_kin method. It
returns an array cotaining the optimal joint positions to place the arm
in this positon. For example if we call findJoinPos(2, 2) and we get the
angles [-0.33, 0.84, 0.56, 0.80] which are in radians. Converting these
to degrees gives approximately [-19, 48, 32, 46]. Using the Geogebra
demo above to set the angles we can see that the arm does indeed get to
the point (2,2).&lt;/p&gt;
&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/525dd84515f94aa834f8.js?file=findjoitposfunc.py"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;&lt;code&gt;def findJointPos(x, y):
   
    arm = Arm3Link()
    xy = [x, y]
    return arm.inv_kin(xy)
    
print findJointPos(2,2)&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;</content><category term="Robotics"></category><category term="Geogebra"></category><category term="Inverse Kinematics"></category><category term="Programming"></category><category term="Python"></category><category term="Robotics"></category></entry><entry><title>Robotic Arm using Bioloid AX-12A Servos: Part 1</title><link href="/robotic-arm-using-bioloid-ax-12a-servos.html" rel="alternate"></link><published>2015-01-24T20:20:00+00:00</published><updated>2015-01-24T20:20:00+00:00</updated><author><name>jpowcode</name></author><id>tag:None,2015-01-24:/robotic-arm-using-bioloid-ax-12a-servos.html</id><summary type="html">&lt;p class="first last"&gt;A robotic arm built from Dynamixel serially addressable servos.&lt;/p&gt;
</summary><content type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;Building robots is a bit of a passion of mine; from roamers to arms and
walkers. I'm going to write about some of them starting with a
multi-part post about a robotic arm. In this post I will describe the
various bits and contruction of the arm.&lt;/p&gt;
&lt;p&gt;I'm using &lt;a class="reference external" href="http://www.trossenrobotics.com/dynamixel-ax-12-robot-actuator.aspx"&gt;Dynamixel&lt;/a&gt;
AX-12A servos. These are slightly different to your usual hobby servos
as are controlled via a serial bus rather than with PWM signals. This
makes them much easier to wire together as they can be daisy chained.
They can also feedback information about themselves to the controller
such as thier temperature, load and position. These servos can be
interfaced to a PC in several different ways. I will be using a
&lt;a class="reference external" href="http://www.trossenrobotics.com/robotis-bioloid-usb2dynamixel.aspx"&gt;USB2Dynamixel
controller&lt;/a&gt;
that interfaces from USB to a signal the Dynamixel servos can
understand.&lt;/p&gt;
&lt;p&gt;To construct the arm I am using plastic brackets from the &lt;a class="reference external" href="http://www.robotis.com/xe/bioloid_en"&gt;Robotis
Bioloid Construction Kit&lt;/a&gt;. This
provides lots of different brackets and attachments for connecting
servos together to form arms, hexapods and bipeds. I looked various
different arms available from
&lt;a class="reference external" href="http://www.crustcrawler.com/"&gt;Crustcrawler&lt;/a&gt; and
&lt;a class="reference external" href="http://www.lynxmotion.com/"&gt;LynxMotion&lt;/a&gt; and settled on a 9 servo
design, one to rotate the base, two for the main shoulder joint, three
more joints in the arm, one write rotate and two for the gripper.
Robotis provide various bits of software. &lt;a class="reference external" href="http://support.robotis.com/en/software/roboplus/roboplus_motion_main.htm"&gt;RoboPlus
Motion&lt;/a&gt;:
using this servos can be dynamically set to test positions. This is
useful for working out different servo settings for various positions
that the arm will need to be in. &lt;a class="reference external" href="http://support.robotis.com/en/software/roboplus/roboplus_task_main.htm"&gt;RoboPlus
Task&lt;/a&gt;:
a C like programming language. I will not be using this to control the
arm as it is limited in features. Instead I will be using a &lt;a class="reference external" href="https://github.com/iandanforth/pydynamixel"&gt;Python
library&lt;/a&gt; for control.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="52%"/&gt;
&lt;col width="48%"/&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Full arm in crouched position&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="Full arm in crouched position" class="size-medium wp-image-99" src="/images/robot_arm1.jpg" style="width: 300px; height: 169px;"/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Detail of the gripper&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="Detail of the gripper" class="size-medium wp-image-96" src="/images/robot_arm2.jpg" style="width: 300px; height: 169px;"/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Detail of the shoulder&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="Detail of the shoulder join" class="size-medium wp-image-97" src="/images/robot_arm3.jpg" style="width: 300px; height: 169px;"/&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/body&gt;&lt;/html&gt;</content><category term="Robotics"></category><category term="Programming"></category><category term="Python"></category><category term="Robotics"></category></entry></feed>